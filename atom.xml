<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zJun's Tech Blog]]></title>
  <link href="http://zjun.github.io/atom.xml" rel="self"/>
  <link href="http://zjun.github.io/"/>
<<<<<<< HEAD
  <updated>2014-06-08T12:11:00+08:00</updated>
=======
  <updated>2014-06-08T00:56:06+08:00</updated>
>>>>>>> d0250ae17e26b35f4d4232608447ac2ba34f9d33
  <id>http://zjun.github.io/</id>
  <author>
    <name><![CDATA[zJun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go笔记7:并发]]></title>
    <link href="http://zjun.github.io/blog/2014/02/08/go_note_7_goroutine/"/>
    <updated>2014-02-08T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2014/02/08/go_note_7_goroutine</id>
    <content type="html"><![CDATA[<p>Golang 给人印象最深刻的一个特性就是：从语言层面支持并行，而且实现起来相当简单。</p>

<h2>goroutine</h2>

<p>goroutine是Go并行设计的核心。goroutine其实就是协程，它比线程更小，十几个goroutine可能体现在底层就是五六个线程，Go语言内部实现了这些goroutine之间的内存共享。oroutine比thread更易用、更高效、更轻便。</p>

<p>goroutine通过<code>go</code>关键字实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<!--more-->


<h2>channels</h2>

<p>说到并发，不得不说一下多线程之间的通讯（数据共享），说到这不由的会想起Java中的线程间通讯：通过同步和加锁在线程间传递数据，synchronized, locker, wait, notifyAll&hellip;光是想起来都让人头疼。但是Golang中，线程间的通讯实现来就要简单和直观的多，因为它提供了一个很好的通信机制channel。channel与Unix shell 中的双向管道很相似：可以通过它发送或者接收值。</p>

<p>使用make 创建channel(定义一个channel时，也需要定义发送到channel的值的类型)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ci</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'><span class="nx">cs</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</span><span class='line'><span class="nx">cf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">interface</span><span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure>


<p>channel通过操作符&lt;-来接收和发送数据:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">v</span>    <span class="c1">// 发送v到channel ch.  </span>
</span><span class='line'><span class="nx">v</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>  <span class="c1">// 从ch中接收数据，并赋值给v  </span>
</span></code></pre></td></tr></table></div></figure>


<p>默认情况下，channel接收和发送数据都是阻塞的，除非另一端已经准备好，这样就使得Goroutines同步变的更加的简单，而不需要显式的lock。所谓阻塞，也就是如果读取（value := &lt;-ch）它将会被阻塞，直到有数据接收。其次，任何发送（ch&lt;-5）将会被阻塞，直到数据被读出。无缓冲channel是在多个goroutine之间同步很棒的工具。</p>

<p>正式由于通过channel我们可以很简单地实现和控制Goroutines之间地同步，所以我们通常遵循一条设计原则：<strong>不要通过共享来通信，而要通过通信来共享。</strong></p>

<h2>Buffered Channels</h2>

<p>在Golang中实现带缓存地Channel非常简单，就是在申明Channel时指定缓存地大小即可，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ch</span><span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建了可以存储4个元素的bool 型channel。在这个channel 中，前4个元素可以无阻塞的写入。当写入第5个元素时，代码将会阻塞，直到其他goroutine从channel 中读取一些元素.</p>

<h2>Range和Close</h2>

<p>Golang中非常贴心地提供可一个Range函数，方便我们通过轮询地方式读取Channel中地值，知道Channel被现实地关闭，避免了低效而且看上去比较愚蠢地一条一条地去读取，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">c</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">x</span>
</span><span class='line'>        <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">=</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">close</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nb">cap</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>for i := range c</code>能够不断的读取channel里面的数据，直到该channel被显式的关闭。上面代码我们看到通过内置函数<code>close</code>显式关闭channel。关闭channel之后就无法再发送任何数据了，可以通过语法<code>v, ok := &lt;-ch</code>测试channel是否被关闭。如果ok返回false，那么说明channel已经没有任何数据并且已经被关闭。</p>

<h2>Select</h2>

<p>如果存在多个channel的时候，我们可以通过<code>select</code>监听channel上的数据流动。</p>

<p><code>select</code>默认是阻塞的，只有当监听的channel中有发送或接收可以进行时才会运行，当多个channel都准备好的时候，select是随机的选择一个执行的。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">quit</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">x</span><span class="p">:</span>
</span><span class='line'>            <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">=</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">quit</span><span class="p">:</span>
</span><span class='line'>            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;quit&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">quit</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="o">&lt;-</span><span class="nx">c</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">quit</span> <span class="o">&lt;-</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}()</span>
</span><span class='line'>    <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">quit</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>select</code>里面还有default语法，<code>select</code>其实就是类似switch的功能，default就是当监听的channel都没有准备好的时候，默认执行的.</p>

<h3>超时</h3>

<p>我们可以利用select来设置超时，来避免整个程序进入阻塞的情况。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">o</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nx">v</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">c</span><span class="p">:</span>
</span><span class='line'>                    <span class="nb">println</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'>                <span class="k">case</span> <span class="o">&lt;-</span> <span class="nx">time</span><span class="p">.</span><span class="nx">After</span><span class="p">(</span><span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">):</span>
</span><span class='line'>                    <span class="nb">println</span><span class="p">(</span><span class="s">&quot;timeout&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="nx">o</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}()</span>
</span><span class='line'>    <span class="o">&lt;-</span> <span class="nx">o</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/02.7.md">Go Web 编程：并发</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go笔记6：Go数据结构]]></title>
    <link href="http://zjun.github.io/blog/2014/01/22/go_note_6_data_structure/"/>
    <updated>2014-01-22T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2014/01/22/go_note_6_data_structure</id>
    <content type="html"><![CDATA[<h2>结构与指针</h2>

<p>定义一个叫Point的简单的结构类型，意味着内存里是两个相邻的int。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Point</span> <span class="kd">struct</span> <span class="p">{</span> <span class="nx">X</span> <span class="p">,</span> <span class="nx">Y</span> <span class="kt">int</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<!--more-->


<p><img src="http://research.swtch.com/godata1a.png" alt="" /></p>

<p>Point{ 10, 20 }表示一个被初始化的Point对象。<br/>
&amp;Point{ 10, 20 }则表示一个指向被初始化的Point对象的指针。<br/>
前者在内存中有两个数据块，而后者则存放着一个指向两个数据块的指针。</p>

<p>结构中的字段被依次地排列在内存里面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Rect1</span> <span class="kd">struct</span> <span class="p">{</span> <span class="nx">Min</span><span class="p">,</span> <span class="nx">Max</span> <span class="nx">Point</span> <span class="p">}</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Rect2</span> <span class="kd">struct</span> <span class="p">{</span> <span class="nx">Min</span><span class="p">,</span> <span class="nx">Max</span> <span class="o">*</span><span class="nx">Point</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://research.swtch.com/godata1b.png" alt="" /></p>

<p>Rect1是一个拥有两个Point类型字段的结构，它的一条记录包含了两条Point记录——共4个int。Rect2是一个拥有两个Point类型指针的结构，在内存里它占两个Point指针的空间。</p>

<h2>字符串</h2>

<p>接下来我们看一个字符串的例子：</p>

<p><img src="http://research.swtch.com/godata2.png" alt="" /></p>

<p>一个字符串在内存中的表示被分成两段，一个指向字符串数据的指针和一个长度值。对s字符串进行一个切片选择，将得到一个可能不一样的指针和长度，但它们也指向同一段字节序列。这意味着，切片并不需要分配空间或者是复制数据，创建切片很容易，只需要传递明确的下标值就行了。</p>

<h2>切片</h2>

<p><img src="http://research.swtch.com/godata3.png" alt="" /><br/>
切片是对数组中一段数据的引用。在内存中它有三段数据组成：一个指向数据头的指针、切片的长度、切片的容量。长度是索引操作的上界，如：x[i] ,容量是切片操作的上界，如：x[i:j]</p>

<p>关于切片的长度(len)和容量(cap),可以通过 <code>len()</code>和<code>cap()</code>函数得到：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">arry</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">arry</span><span class="p">)</span>      <span class="c1">// [1 2 3 4 5]  </span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">arry</span><span class="p">))</span> <span class="c1">// 5  </span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">cap</span><span class="p">(</span><span class="nx">arry</span><span class="p">))</span> <span class="c1">// 5  </span>
</span><span class='line'>
</span><span class='line'><span class="nx">slce</span> <span class="o">:=</span> <span class="nx">arry</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">slce</span><span class="p">)</span>       <span class="c1">// [2]  </span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">slce</span><span class="p">))</span>  <span class="c1">// 1  </span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">cap</span><span class="p">(</span><span class="nx">slce</span><span class="p">))</span>  <span class="c1">// 4  </span>
</span><span class='line'>
</span><span class='line'><span class="nx">slce</span> <span class="p">=</span> <span class="nx">arry</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">slce</span><span class="p">)</span>       <span class="c1">// [2 3]  </span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">slce</span><span class="p">))</span>  <span class="c1">// 2  </span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">cap</span><span class="p">(</span><span class="nx">slce</span><span class="p">))</span>  <span class="c1">// 4  </span>
</span><span class='line'>
</span><span class='line'><span class="nx">slce</span> <span class="p">=</span> <span class="nx">arry</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">slce</span><span class="p">)</span>       <span class="c1">// [2 3 4]  </span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">slce</span><span class="p">))</span>  <span class="c1">// 3  </span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">cap</span><span class="p">(</span><span class="nx">slce</span><span class="p">))</span>  <span class="c1">// 4  </span>
</span><span class='line'>
</span><span class='line'><span class="nx">slce</span> <span class="p">=</span> <span class="nx">arry</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">slce</span><span class="p">)</span>       <span class="c1">// [2 3 4 5]  </span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">slce</span><span class="p">))</span>  <span class="c1">// 4  </span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">cap</span><span class="p">(</span><span class="nx">slce</span><span class="p">))</span>  <span class="c1">// 4  </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>从上面的例子可以看出，slice的 len 表示切片中实际存在item的的个数，cap 表示分配的内存空间的大小。<strong>如果是通过对已有数组切片生成的slice ,默认分配的内存空间 cap 是从切片的起始位置到原有数组的结尾</strong>。比如上面的例子： <code>slce := arry[1:2]</code>的 cap() 就是 4。</p>

<h2>new和make</h2>

<p>Go有两种创建数据结构的方法：new和make。<br/>
它们的区别于:<br/>
&ndash; new(T)返回一个*T类型，一个可以被隐性反向引用的指针（如图中的黑色指针） <br/>
&ndash; make(T,args)返回一个原始的T，它并不是一个指针。T中常有写隐性的指针（如图中的灰色指针）</p>

<p><strong>new返回一个指向初始化为全0值的指针，而make返回一个复杂的结构</strong>。</p>

<p><img src="http://research.swtch.com/godata4.png" alt="" /></p>

<h2>参考资料</h2>

<p><a href="http://research.swtch.com/godata">Go Data Structures</a><br/>
<a href="http://www.oschina.net/question/1441707_141799">【原创翻译】深度剖析Go数据结构</a><br/>
<a href="http://golang.org/doc/effective_go.html#slices">Effective Go: slices</a><br/>
<a href="http://www.zingscript.com/category/snack">慎用GO中的SLICE——关于SLICE的隐含陷阱</a><br/>
<a href="http://blog.golang.org/slices">The Go Blog: Arrays, slices (and strings): The mechanics of &lsquo;append&rsquo;</a><br/>
<a href="http://www.golang-book.com/6">Arrays, Slices and Maps</a><br/>
<a href="http://blog.golang.org/go-slices-usage-and-internals">The Go Blog: Go Slices: usage and internals</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Sublime Text2中开发Golang]]></title>
    <link href="http://zjun.github.io/blog/2014/01/16/dev_go_in_sublimetext2/"/>
    <updated>2014-01-16T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2014/01/16/dev_go_in_sublimetext2</id>
    <content type="html"><![CDATA[<p>Sublime Text 2 是一个可定制程度相当高的轻量级编辑器,具有丰富的第三方插件，关键是可以无限期的免费使用。下面就介绍通过安装几种插件，将Sublime Text 2定制成为一款相当好用的Golang IDE。</p>

<!--more-->


<h2>下载</h2>

<ol>
<li>下载<a href="http://www.sublimetext.com/">Sublime Text 2</a></li>
<li>安装</li>
</ol>


<h2>安装Package Control</h2>

<ol>
<li>按Ctrl + ` 打开console</li>
<li><p>粘贴下列代码到console并回车</p>

<p> import urllib2,os;pf=&lsquo;Package Control.sublime-package&rsquo;;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),&lsquo;wb&rsquo;).write(urllib2.urlopen(&lsquo;<a href="http://sublime.wbond.net/">http://sublime.wbond.net/</a>&rsquo;+pf.replace(&lsquo; &rsquo;,&lsquo;%20&rsquo;)).read())</p></li>
</ol>


<p>重启Sublime Text 2, 重启后，如果在 Preferences菜单下，多出一个菜单项 Package Control，说明安装成功。</p>

<h2>安装 <a href="https://github.com/nsf/gocode">gocode</a></h2>

<p>打开终端，输入以下内容（需要安装git工具):</p>

<pre><code>go get github.com/nsf/gocode  
go install github.com/nsf/gocode  
</code></pre>

<p>安装完成后，我们可以在 go/bin 目录下，发现多出了个 gocode 文件。</p>

<h2>安装 Gosublime 插件</h2>

<ol>
<li>Ctrl+Shift+p 打开Package Controll 输入pcip（即“Package Control: Install Package”的缩写）</li>
<li>输入GoSublime，回车开始安装</li>
</ol>


<h2>安装 SidebarEnhancements 插件</h2>

<ol>
<li>Ctrl+Shift+p 打开Package Controll 输入pcip</li>
<li>输入SidebarEnhancements，回车开始安装</li>
</ol>


<h2>安装 Go Build 插件</h2>

<h3>安装</h3>

<ol>
<li>Ctrl+Shift+p 打开Package Controll 输入pcip</li>
<li>输入 <a href="https://github.com/cthackers/SublimeGoBuild">Go Build</a>，回车开始安装</li>
</ol>


<p>如果通过Package Controll 不能安装 Go Build, 那么可以通过git手动安装：</p>

<ul>
<li>For Windows:
Open a cmd, go to <code>%APPDATA%\Sublime Text 2\Packages</code> and type&hellip;</li>
<li><p>For Linux:
Open a shell, go to <code>~/.config/Sublime Text 2/Packages</code> and type&hellip;</p>

<p>  <code>git clone git://github.com/cthackers/SublimeGoBuild.git</code></p></li>
</ul>


<h3>使用</h3>

<ul>
<li><code>F5</code> to run your project</li>
<li><code>F7</code> to build</li>
<li><code>CTRL + F5</code> to run tests</li>
</ul>


<h2>安装 Git Gutter 插件</h2>

<p><a href="https://github.com/jisaacks/GitGutter">Git Gutter</a> is a sublime text 2/3 plugin to show an icon in the gutter area indicating whether a line has been inserted, modified or deleted.</p>

<ol>
<li>Ctrl+Shift+p 打开Package Controll 输入pcip</li>
<li>输入 Git Gutter，回车开始安装</li>
</ol>


<h2>安装 SideBarGit 插件</h2>

<p><a href="https://github.com/SublimeText/SideBarGit">SideBarGit</a> provides git commands on Side Bar of Files and Folders for Sublime Text 2.</p>

<ol>
<li>Ctrl+Shift+p 打开Package Controll 输入pcip</li>
<li>输入 SideBarGit，回车开始安装</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go笔记5：访问MySQL数据库]]></title>
    <link href="http://zjun.github.io/blog/2014/01/03/go_note_5_accessmysql/"/>
    <updated>2014-01-03T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2014/01/03/go_note_5_accessmysql</id>
    <content type="html"><![CDATA[<h2>安装驱动</h2>

<p>MySQL驱动： <a href="https://github.com/go-sql-driver/mysql">https://github.com/go-sql-driver/mysql</a> 。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get github.com/go-sql-driver/mysql</span></code></pre></td></tr></table></div></figure>


<p></p>

<!--more-->


<h2>连接数据库</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;github.com/Go-SQL-Driver/MySQL&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;mysql&quot;</span><span class="p">,</span> <span class="s">&quot;user:password@/dbname&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>关闭数据库连接</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>增删改查</h2>

<h3>查询</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;mysql&quot;</span><span class="p">,</span> <span class="s">&quot;user:password@/dbname?charset=utf8&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//查询数据  </span>
</span><span class='line'><span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="s">&quot;SELECT * FROM account&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">id</span> <span class="kt">int</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>新增</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;mysql&quot;</span><span class="p">,</span> <span class="s">&quot;zjun:zjun@/test?charset=utf8&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="c1">//插入数据  </span>
</span><span class='line'><span class="nx">stmt</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Prepare</span><span class="p">(</span><span class="s">&quot;INSERT INTO userinfo(username, departname, created) VALUES(?,?,?)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="s">&quot;zjun&quot;</span><span class="p">,</span> <span class="s">&quot;研发部门&quot;</span><span class="p">,</span> <span class="s">&quot;2014-01-03&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">LastInsertId</span><span class="p">()</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>修改</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">//更新数据</span>
</span><span class='line'><span class="nx">stmt</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Prepare</span><span class="p">(</span><span class="s">&quot;update userinfo set username=? where uid=?&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="s">&quot;zjunupdate&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">affect</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">RowsAffected</span><span class="p">()</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">affect</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>删除</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">//删除数据</span>
</span><span class='line'><span class="nx">stmt</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Prepare</span><span class="p">(</span><span class="s">&quot;delete from userinfo where uid=?&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">affect</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">RowsAffected</span><span class="p">()</span>
</span><span class='line'><span class="nx">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">affect</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/05.2.md">Go Web编程：使用MySQL数据库</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go笔记4：接口]]></title>
    <link href="http://zjun.github.io/blog/2013/12/30/go_note_4_interface/"/>
    <updated>2013-12-30T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/12/30/go_note_4_interface</id>
    <content type="html"><![CDATA[<h2>什么是接口(interface)</h2>

<p>Golang中的interface是一组method的组合，我们通过interface来定义对象的一组行为。<strong>如果某个对象实现了某个接口的所有方法，则此对象就实现了此接口。</strong></p>

<!--more-->


<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 定义interface</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Men</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SayHi</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">Sing</span><span class="p">(</span><span class="nx">lyrics</span> <span class="kt">string</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 定义struct</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Human</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">age</span> <span class="kt">int</span>
</span><span class='line'>    <span class="nx">phone</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Human对象实现Sayhi方法</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">h</span> <span class="o">*</span><span class="nx">Human</span><span class="p">)</span> <span class="nx">SayHi</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Hi, I am %s you can call me on %s\n&quot;</span><span class="p">,</span> <span class="nx">h</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">h</span><span class="p">.</span><span class="nx">phone</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Human对象实现Sing方法</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">h</span> <span class="o">*</span><span class="nx">Human</span><span class="p">)</span> <span class="nx">Sing</span><span class="p">(</span><span class="nx">lyrics</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;La la, la la la, la la la la la...&quot;</span><span class="p">,</span> <span class="nx">lyrics</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中对象Human实现了接口Men中的所有方法，所以Human可以被看作一个Men类型的对象，照此类推：<strong>一个接口可以被多个不同的对象思想，同理，一个对象也可以实现多个接口</strong>。</p>

<h2>interface变量的值</h2>

<p>一个interface的变量，可以存实现这个interface的任意类型的对象。</p>

<h2>空interface</h2>

<p>空interface(<code>interface{}</code>)不包含任何的method，所以所有的类型都默认实现了空interface。空interface在我们需要存储任意类型的数值的时候相当有用，因为它可以存储任意类型的数值。它有点类似于java语言的Object对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="kd">interface</span><span class="p">{}</span> <span class="c1">// 定义a为空接口  </span>
</span><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">5</span>
</span><span class='line'><span class="nx">s</span> <span class="o">:=</span> <span class="s">&quot;Hello world&quot;</span>
</span><span class='line'><span class="c1">// a可以存储任意类型的数值</span>
</span><span class='line'><span class="nx">a</span> <span class="p">=</span> <span class="nx">i</span>
</span><span class='line'><span class="nx">a</span> <span class="p">=</span> <span class="nx">s</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>一个函数把interface{}作为参数，那么他可以接受任意类型的值作为参数，如果一个函数返回interface{},那么也就可以返回任意类型的值。</strong></p>

<h2>嵌入interface</h2>

<p>和struct中的匿名字段类似：如果一个interface1作为interface2的一个嵌入字段，那么interface2隐式的包含了 interface1 里面的method。</p>

<p>比如：io包下面的 io.ReadWriter ，他包含了io包下面的Reader和Writer两个interface。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">ReadWriter</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Reader</span>
</span><span class='line'>    <span class="nx">Writer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/02.6.md">Go Web编程：interface</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go笔记3：面向对象]]></title>
    <link href="http://zjun.github.io/blog/2013/12/19/go_note_3_object/"/>
    <updated>2013-12-19T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/12/19/go_note_3_object</id>
    <content type="html"><![CDATA[<p>Go是一个面向对象的语言，但是不同于Java，C++中略显复杂的面向对象思想，Golang 则将 OOP 思想做了极大的简化，只留下了最核心的特征：你可以给任何类型（包括内置类型）“增加”新方法。而在实现某个接口时，<strong>只需要实现该接口要求的所有方法即可</strong>。</p>

<p>接下来就是我对Go语言面向对象的特点一些总结。</p>

<!--more-->


<h2>对象</h2>

<p>Golang中没有类似于Java中的Class对象，而是和C类似，通过结构体 struct 来实现的：</p>

<div>
  <pre><code class='go'>type person struct {  
    name string  
    age int  
}</code></pre>
</div>


<p>可以同下面几种方法来声明和初始化 struct 变量：</p>

<ol>
<li>先声明，后赋值：</li>
</ol>


<div>
  <pre><code class='go'>var P person  // P现在就是person类型的变量了  
P.name = &quot;zJun&quot;  // 赋值&quot;Astaxie&quot;给P的name属性  
P.age = 25  // 赋值&quot;25&quot;给变量P的age属性</code></pre>
</div>


<ol>
<li>按照顺序提供初始化值</li>
</ol>


<div>
  <pre><code class='go'>P := person{&quot;Tom&quot;, 25}</code></pre>
</div>


<ol>
<li>通过field:value的方式初始化，可以任意顺序</li>
</ol>


<div>
  <pre><code class='go'>P := person{age:24, name:&quot;Tom&quot;}</code></pre>
</div>


<ol>
<li>通过new函数分配一个指针，此处P的类型为*person</li>
</ol>


<div>
  <pre><code class='go'>P := new(person)</code></pre>
</div>


<h2>继承</h2>

<p>Golang中继承是通过<strong>匿名变量</strong>实现的：<br/>
<strong>匿名字段</strong>，也称为嵌入字段 &ndash; 只提供类型，而不写字段名的变量。<br/>
当匿名字段是一个struct的时候，那么这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct。  比如下面的例子：</p>

<div>
  <pre><code class='go'>type Human struct {  
    name string  
    age int  
    weight int  
}  
 
type Student struct {  
    Human  // 匿名字段，默认Student包含了Human的所有字段  
    speciality string  
}  

func main() {  
    // 初始化一个学生  
    mark := Student{Human{&quot;Mark&quot;, 25, 120}, &quot;Computer Science&quot;}  
 
    // 访问相应的字段  
    fmt.Println(&quot;His name is &quot;, mark.name)  
    fmt.Println(&quot;His age is &quot;, mark.age)  
    fmt.Println(&quot;His weight is &quot;, mark.weight)  
    fmt.Println(&quot;His speciality is &quot;, mark.speciality)  
}</code></pre>
</div>


<h2>方法</h2>

<p>上面我们已经看到在Golang中可以通过 struct 来定义对象的属性(变量)，但是还不能直接在 struct 中定义方法(method),下面我们就来看看如何在Golang中定义一个对象的方法：</p>

<h3>定义</h3>

<p>method的语法如下：</p>

<div>
  <pre><code class='go'>func (r ReceiverType) funcName(parameters) (results)</code></pre>
</div>


<p>其中的 ReceiverType(接收者)如果是自定义的struct类型，那么这个方法就是struct的一个方法，可以通过下面的方式调用：</p>

<div>
  <pre><code class='go'>r.funcName(param);</code></pre>
</div>


<h3>方法的继承</h3>

<p>和前面提到的一样，方法也可以通过匿名方法的方式进行继承：如果一个对象中有一个匿名字段实现了方法，那么在这个对象中也继承了这个方法，比如下面的例子：</p>

<div>
  <pre><code class='go'>type Human struct {  
    name string  
    age int  
    phone string  
}  
 
type Student struct {  
    Human //匿名字段  
    school string  
}  
   
//在human上面定义了一个method  
func (h *Human) SayHi() {  
    fmt.Printf(&quot;Hi, I am %s you can call me on %s%n&quot;, h.name, h.phone)  
}  
 
func main() {  
    mark := Student{Human{&quot;Mark&quot;, 25, &quot;222-222-YYYY&quot;}, &quot;MIT&quot;}
 
    mark.SayHi()  
}</code></pre>
</div>


<h3>方法重写</h3>

<p>Golang不支持方法的重载(override)，但是可以对方法进行重写(overwrite),实现的方式也很简单：<strong>直接在子类中实现一个相同的方法</strong>。在调用时，会优先调用子类自己实现的方法，如果没有找到才会向上寻找调用父类(匿名变量)中的方法。</p>

<h2>参考资料</h2>

<p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/02.5.md">Go Web 编程：面向对象</a><br/>
<a href="http://www.oschina.net/translate/go-object-oriented-design">Go 面向对象</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring MVC 实现 REST service]]></title>
    <link href="http://zjun.github.io/blog/2013/12/04/spring_mvc_rest/"/>
    <updated>2013-12-04T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/12/04/spring_mvc_rest</id>
    <content type="html"><![CDATA[<h2>web.xml</h2>

<pre><code>&lt;!-- 配置字符过滤器--&gt;    
&lt;filter&gt;  
    &lt;filter-name&gt;CharacterFilter&lt;/filter-name&gt;  
    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;  
    &lt;init-param&gt;  
        &lt;param-name&gt;encoding&lt;/param-name&gt;  
        &lt;param-value&gt;UTF-8&lt;/param-value&gt;  
    &lt;/init-param&gt;  
&lt;/filter&gt;  

&lt;filter-mapping&gt;  
    &lt;filter-name&gt;CharacterFilter&lt;/filter-name&gt;  
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  
&lt;/filter-mapping&gt;  

&lt;!-- 指定spring配置文件位置 --&gt;  
&lt;context-param&gt;  
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  
    &lt;param-value&gt;  
        &lt;!--加载多个spring配置文件 --&gt;  
        classpath:spring-homebills-cfg.xml
    &lt;/param-value&gt;  
&lt;/context-param&gt;  

&lt;!-- 定义SPRING监听器，加载spring --&gt;  
&lt;listener&gt;  
    &lt;listener-class&gt;  
        org.springframework.web.context.ContextLoaderListener
    &lt;/listener-class&gt;  
&lt;/listener&gt;  

&lt;listener&gt;  
    &lt;listener-class&gt;  
org.springframework.web.context.request.RequestContextListener
    &lt;/listener-class&gt;  
&lt;/listener&gt;   

&lt;servlet&gt;  
    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;  
    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;  
    &lt;init-param&gt;  
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  
        &lt;param-value&gt;classpath:homebills-servlet.xml&lt;/param-value&gt;  
    &lt;/init-param&gt;  
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  
&lt;/servlet&gt;  

&lt;servlet-mapping&gt;  
    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;  
    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  
&lt;/servlet-mapping&gt;  
</code></pre>

<!--more-->


<h2>application-servlet.xml</h2>

<div>
  <pre><code class='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  
&lt;beans  xmlns=&quot;http://www.springframework.org/schema/beans&quot;  
       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        &quot;&gt;

    &lt;!--
        指定使用注解方式配置,配置自动扫描的包名,
        base-package指定自己应用中控制器所在的包目录
        &lt;context:component-scan/&gt; 扫描指定的包中的类上的注解，常用的注解有： 
        @Controller 声明Action组件
        @Service 声明Service组件
        @Service(&quot;myMovieLister&quot;) 
        @Repository 声明Dao组件
        @Component 泛指组件, 当不好归类时. 
        @RequestMapping(&quot;/menu&quot;) 请求映射 
        @Resource用于注入，( j2ee提供的 ) 默认按名称装配，
        @Resource(name=&quot;beanName&quot;) 
        @Autowired用于注入，(srping提供的) 默认按类型装配 
        @Transactional(rollbackFor={Exception.class}) 事务管理 
        @ResponseBody @Scope(&quot;prototype&quot;)设定bean的作用域
    --&gt;
    &lt;context:component-scan base-package=&quot;com.zjun.homebills.controller&quot; /&gt;
    
    &lt;!-- 默认的注解映射的支持 --&gt;
    &lt;!-- JSR-303 support will be detected on classpath and enabled automatically --&gt;
    &lt;mvc:annotation-driven/&gt;
    
    &lt;!-- http://static.springsource.org/spring/docs/3.0.0.RC3/reference/html/ch05s07.html --&gt;&lt;!-- 配置视图解析器 --&gt;
    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
        &lt;!-- 配置视图层 使用jstl标签 --&gt;
        &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;
        &lt;!-- 定义视图前缀格式 --&gt;
        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;
        &lt;!-- 定义视图后缀格式 --&gt;
        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;
    &lt;/bean&gt;  
&lt;/beans&gt;</code></pre>
</div>


<h2>Controler</h2>

<div>
  <pre><code class='java'>package com.zjun.homebills.controller;  

import java.util.List;  

import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.stereotype.Controller;  
import org.springframework.ui.Model;  
import org.springframework.validation.BindingResult;  
import org.springframework.validation.annotation.Validated;  
import org.springframework.web.bind.annotation.PathVariable;  
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.bind.annotation.RequestMethod;  

import com.zjun.homebills.domain.Account;  
import com.zjun.homebills.service.AccountService;  

@Controller  
@RequestMapping(value = &quot;/account&quot;)  
public class AccountController {  

    @Autowired
    AccountService accountService;

    /**
     * 
     * 
     * Description: 构建REST风格 /account/list的GET请求时才执行该方法的操作RequestMethod.GET表示
     * 只处理GET请求
     * 
     * @param model
     *            用于上下文参数传递
     * @return 视图页面 account/list 结合user-servlet.xml中配置的视图模型匹配视图页面
     *         实例中方法返回表示/WEB-INF/jsp/account/list.jsp页面
     * 
     */
    @RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)
    public String list(Model model) {
        List&lt;Account&gt; accounts = accountService.getAll();
        model.addAttribute(&quot;accounts&quot;, accounts);
        return &quot;account/list&quot;;
    }

    @RequestMapping(value = &quot;/add&quot;, method = RequestMethod.GET)
    public String add(Model model) {
        model.addAttribute(&quot;account&quot;, new Account()); // 开启ModelDriven
                                                        // 跳转到增加页面时使用该Model
        return &quot;account/add&quot;;
    }

    /**
     * 
     * Description: 添加操作 请求/account/add form表单提交时使用的post请求调用该方法
     * 
     * @param user
     *            添加的User对象
     * @param br
     *            验证绑定
     * @return 视图页面 添加成功 请求重定向redirect:/account/list 表示执行操作结束后请求定向为/user/users
     *         添加失败 页面转到/WEB-INF/jsp/add.jsp 这里有验证绑定,将在视图页面展示验证错误信息
     * @throws Exception
     * 
     */
    @RequestMapping(value = &quot;/add&quot;, method = RequestMethod.POST)
    public String add(@Validated Account account, BindingResult br)
            throws Exception {
        // 需要说明的是BindingResult形参一定要跟@Validated修饰的形参后面写验证
        if (br.hasErrors()) { // 如果有错误,直接跳转到添加视图
            return &quot;account/add&quot;; // 服务端跳转 该跳转会自动在前面增加 forward
        }
        accountService.save(account);
        return &quot;redirect:/account/list&quot;; // 客户端跳转 使用 redirect
    }

    /**
     * 
     * 
     * Description: 预更新操作根据用户名查询用户信息 然后数据交给携带体 展示到视图 REST风格: /更新的用户的用户名/update
     * 
     * @param username
     * @PathVariable修饰 表示形参同URL中的请求参数
     * @param model
     *            携带数据的Model
     * @return 视图页面/WEB-INF/jsp/account/update页面
     * 
     */
    @RequestMapping(value = &quot;/{id}/update&quot;, method = RequestMethod.GET)
    public String update(@PathVariable Integer id, Model model) {
        System.out.println(&quot;获取到传入的参数值为:&quot; + id);
        Account account = accountService.findById(id);
        model.addAttribute(account);
        return &quot;account/update&quot;;
    }

    /**
     * 
     * 
     * Description: 真正更新的操作 REST风格： /更新的id/update
     * 
     * @param username
     *            带更新的用户的用户名
     * @param user
     *            带更新的用户的信息对象 @Validated修饰表示信息需要被验证
     * @param br
     *            验证信息绑定对象 必须紧跟在待验证的信息形参后面
     * @return 视图页面 更新成功 请求重定向 /account/list 更新失败 转到/WEB-INF/jsp/account/update.jsp页面
     * 
     */
    @RequestMapping(value = &quot;/{id}/update&quot;, method = RequestMethod.POST)
    public String update(@PathVariable Integer id, @Validated Account account,
            BindingResult br) {
        if (br.hasErrors()) { // 如果有错误,直接跳转到修改视图
            return &quot;account/update&quot;;
        }
        accountService.update(account);
        return &quot;redirect:/account/list&quot;;
    }

    /**
     * 
     * 
     * Description: 删除操作 REST风格:/删除的id/delete
     * 
     * @param username
     *            删除的用户名 类似表主键,可以标记到整个记录信息
     * @return 视图页面 请求重定向到 /account/list
     * 
     */
    @RequestMapping(value = &quot;/{id}/delete&quot;, method = RequestMethod.GET)
    public String delete(@PathVariable Integer id) {
        System.out.println(&quot;获取到传入的参数值为:&quot; + id);
        accountService.deleteById(id);
        return &quot;redirect:/account/list&quot;;
    }  
}</code></pre>
</div>


<h2>JSP</h2>

<div>
  <pre><code class='java'>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
&lt;%
    String path = request.getContextPath();
    String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path;
%&gt;

&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;
    &lt;title&gt;&lt;%=basePath%&gt;&lt;/title&gt;
  &lt;/head&gt;
  
  &lt;body&gt;
    &lt;h2&gt;账户&lt;/h2&gt;   
    &lt;p&gt;&lt;a href=&quot;&lt;%=basePath %&gt;/account/add&quot;&gt;添加账户&lt;/a&gt;&lt;/p&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;操作&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;c:forEach items=&quot;${accounts}&quot; var=&quot;account&quot;&gt;
            &lt;tr&gt;
                &lt;td&gt;${account.id }&lt;/td&gt;
                &lt;td&gt;${account.name }&lt;/td&gt;
                &lt;td&gt;
                    &lt;a href=&quot;&lt;%=basePath %&gt;/account/${account.id }/update&quot;&gt;修改&lt;/a&gt;
                    &lt;a href=&quot;&lt;%=basePath %&gt;/account/${account.id }/delete&quot;&gt;删除&lt;/a&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;/c:forEach&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    
  &lt;/body&gt;  
&lt;/html&gt;</code></pre>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Spring Data JPA 简化持久层的开发]]></title>
    <link href="http://zjun.github.io/blog/2013/12/03/use_spring_data_jpa/"/>
    <updated>2013-12-03T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/12/03/use_spring_data_jpa</id>
    <content type="html"><![CDATA[<p>最近看到<a href="http://www.springside.org.cn/">SpringSide</a>最新版的<a href="https://github.com/springside/springside4/wiki/Design">技术选型</a>中提到了<a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a>,号称只需要实现接口就可以实现大部分操作。真有怎么神奇？于是Google一番，果然好使，在这里记录一下：</p>

<!--more-->


<h2>需要的包</h2>

<ul>
<li>spring 3.x(4.0)</li>
<li>spring data jpa 1.4.2</li>
<li>spring data commons 1.5 or later</li>
<li>hibernate 4</li>
<li>JUnit 4.11</li>
<li>log4j 1.2.14</li>
</ul>


<p>所需的包可以在这里下载。</p>

<h2>配置文件</h2>

<h3>persistence.xml</h3>

<p>根据JPA的规范，要在类路径下的META-INF文件夹中创建<strong>persistence.xml</strong>文件，spring提供了<strong>org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean</strong>来进行配置，persistence.xml中的属性都可以在这个bean中进行注入。</p>

<div>
  <pre><code class='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  
&lt;persistence xmlns=&quot;http://java.sun.com/xml/ns/persistence&quot; version=&quot;2.0&quot;&gt;  
    &lt;persistence-unit name=&quot;appName&quot; transaction-type=&quot;RESOURCE_LOCAL&quot;&gt;  
        &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;  
        &lt;properties&gt;  
            &lt;property name=&quot;hibernate.connection.driver_class&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;  
            &lt;property name=&quot;hibernate.connection.url&quot; value=&quot;jdbc:mysql://localhost:3306/appname&quot;/&gt;  
            &lt;property name=&quot;hibernate.connection.username&quot; value=&quot;root&quot;/&gt;  
            &lt;property name=&quot;hibernate.connection.password&quot; value=&quot;root&quot;/&gt;  
            &lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.MySQL5Dialect&quot;/&gt;  
            &lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&gt;  
            &lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;  
            &lt;property name=&quot;hibernate.use_sql_comments&quot; value=&quot;false&quot;/&gt;  
            &lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot;/&gt;  
        &lt;/properties&gt;  
    &lt;/persistence-unit&gt;  
    
&lt;/persistence&gt;</code></pre>
</div>


<p><strong>说明:</strong> <br/>
1. <strong>persistence-unit</strong>是定义一个单元名称,可以定义多个，在实际使用的时候选择其中一个就可以了。将在后面的<strong>applicationContext.xml</strong>中使用。  <br/>
2. 这里的META-INF是classpath下的目录，不是WEB目录下与WEB-INF同级那个目录，要注意区分，我刚开始的时候就是混淆了这两个目录，搞了很久。</p>

<h3>applicationContext.xml</h3>

<div>
  <pre><code class='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jpa=&quot;http://www.springframework.org/schema/data/jpa&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd&quot;&gt;  

    &lt;context:annotation-config /&gt;      
     
    &lt;context:component-scan base-package=&quot;com.zjun.appname&quot;/&gt;
    
    &lt;!-- 启用 annotation事务--&gt;  
    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;  

    &lt;!-- 配置事务管理器 --&gt;  
    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;&gt;  
        &lt;property name=&quot;entityManagerFactory&quot; ref=&quot;entityManagerFactory&quot;/&gt;  
    &lt;/bean&gt;  

    &lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;  
        &lt;property name=&quot;persistenceUnitName&quot; value=&quot;appName&quot; /&gt;  
        &lt;property name=&quot;persistenceXmlLocation&quot; value=&quot;classpath:META-INF/persistence.xml&quot;/&gt;  
        &lt;property name=&quot;jpaVendorAdapter&quot;&gt;  
            &lt;bean class=&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;&gt;  
                &lt;property name=&quot;generateDdl&quot; value=&quot;false&quot;/&gt;  
                &lt;property name=&quot;showSql&quot; value=&quot;true&quot;/&gt;  
            &lt;/bean&gt;  
        &lt;/property&gt;  
    &lt;/bean&gt;  

    &lt;!-- 配置Spring Data JPA扫描目录--&gt;  
    &lt;jpa:repositories base-package=&quot;com.zjun.appname.dao&quot;  repository-impl-postfix=&quot;Impl&quot; entity-manager-factory-ref=&quot;entityManagerFactory&quot; transaction-manager-ref=&quot;transactionManager&quot;/&gt;  

&lt;/beans&gt;</code></pre>
</div>


<p><strong>说明：</strong>主要就是 <code>&lt;jpa:repositories base-package="com.zjun.appname.dao"/&gt;</code>，这个可以扫描repository接口。</p>

<h3>log4j.properties</h3>

<pre><code>log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

log4j.rootLogger=debug, stdout
log4j.logger.footmark=debug
</code></pre>

<h2>创建 Domain 类</h2>

<div>
  <pre><code class='java'>@Entity  
@Table(name = &quot;account&quot;)  
public class Account implements Serializable {  

    private static final long serialVersionUID = 1487994788928657645L;  
    private int id;  
    private String name;  

    @Id  
    @GeneratedValue(strategy = GenerationType.AUTO)  
    public int getId() {  
        return id;  
    }  

    public void setId(int id) {  
        this.id = id;  
    }

    @Column(name = &quot;name&quot;)  
    public String getName() {  
        return name;  
    }  

    public void setName(String name) {  
        this.name = name;  
    }  

}</code></pre>
</div>


<h2>创建 DAO 类</h2>

<div>
  <pre><code class='java'>public interface AccountDao extends CrudRepository&lt;Account, Integer&gt; {  

}</code></pre>
</div>


<p><strong>说明：</strong><br/>
&ndash; 这里实现的是 <strong>CrudRepository</strong> 接口， 通过这个接口 Spring Data JPA 默认提供了全套的增删改查(CRUD)操作；<br/>
&ndash; 也可以实现 <strong>JpaRepository</strong>接口，通过定义方法名来定制需要的操作；<br/>
&ndash; 泛型中的参数，第一个是Entry类，第二个是这个类ID的类型；
&ndash; 根据规范来对方法进行命名，比如 findByUsername 意思是通过username栏位进行数据查找，具体可以参照下面的表格：</p>

<p><img src="http://farm4.staticflickr.com/3833/11186910614_341d29397c_c.jpg" alt="" /></p>

<h2>Unit Test Case</h2>

<div>
  <pre><code class='java'>@RunWith(SpringJUnit4ClassRunner.class)  
@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,
        TransactionalTestExecutionListener.class })  
@Transactional  
@ContextConfiguration(locations = { &quot;classpath:spring-appname-cfg.xml&quot; })  
public class TestAccountDao {  

    private ApplicationContext ctx;  
    private AccountDao accountDao;  
    private Account account;  

    @Before  
    public void setup() {  
        ctx = new ClassPathXmlApplicationContext(&quot;spring-appname-cfg.xml&quot;);  
        accountDao = ctx.getBean(&quot;accountDao&quot;, AccountDao.class);   
        account = new Account();  
        account.setName(&quot;for testing&quot;);  
    }  

    @After  
    public void clear() {  
        ctx = null;  
    }  

    @Test  
    public void testCRUD() {  
        // Test create  
        Account a = accountDao.save(account);  
        long count = accountDao.count();  
        Assert.assertEquals(1, count);  

        // Test find  
        Account b = accountDao.findOne(a.getId());  
        Assert.assertNotNull(b);  
        Assert.assertEquals(account.getName(), b.getName());  

        // Test update  
        b.setName(&quot;Test Update&quot;);  
        accountDao.save(b);  
        Account c = accountDao.findOne(a.getId());  
        Assert.assertEquals(&quot;Test Update&quot;, c.getName());  

        // Test delete  
        accountDao.delete(account.getId());  
        Account d = accountDao.findOne(account.getId());  
        Assert.assertNull(d);  
    }  
}</code></pre>
</div>


<h3>参考资料</h3>

<ul>
<li><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-spring-jpa/">使用 Spring Data JPA 简化 JPA 开发</a></li>
<li><a href="http://mybar.iteye.com/blog/1863390">Spring-data-jpa 使用</a></li>
<li><a href="http://docs.spring.io/spring-data/jpa/docs/1.4.2.RELEASE/reference/html/index.html">Spring Data JPA &ndash; Reference Documentation</a></li>
<li><a href="http://docs.spring.io/spring-data/jpa/docs/1.4.2.RELEASE/reference/html/repository-query-keywords.html">Appendix B. Repository query keywords</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go笔记2：基础语法]]></title>
    <link href="http://zjun.github.io/blog/2013/10/27/go_note_2_basic_grammar/"/>
    <updated>2013-10-27T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/10/27/go_note_2_basic_grammar</id>
    <content type="html"><![CDATA[<h2>变量</h2>

<p><strong>说明：</strong><br/>
1. 使用var关键字是Go最基本的定义变量方式，Go把变量类型放在变量名后面；<br/>
2. _（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃；</p>

<div>
  <pre><code class='go'>_, b := 34, 35 //将值35赋予b，并同时丢弃34</code></pre>
</div>


<ol>
<li>Go对于已声明但未使用的变量会在编译阶段报错；</li>
</ol>


<!--more-->


<div>
  <pre><code class='go'>var variableName type //定义一个名称为“variableName”，类型为&quot;type&quot;的变量  
var vname1, vname2, vname3 type //定义三个类型都是“type”的三个变量  
var variableName type = value //初始化“variableName”的变量为“value”值，类型是“type”  
var vname1, vname2, vname3 type= v1, v2, v3 //定义三个类型都是&quot;type&quot;的三个变量,并且它们分别初始化相应的值   
var vname1, vname2, vname3 = v1, v2, v3 // 定义三个变量，它们分别初始化相应的值,Go会根据其相应值的类型来初始化它们  
vname1, vname2, vname3 := v1, v2, v3 //**:=**这个符号直接取代了var和type,这种形式叫做简短声明,只能用在函数内部；在函数外部使用var方式来定义全局变量</code></pre>
</div>


<h2>常量</h2>

<p><strong>说明：</strong><br/>
1. 在Go程序中，常量可定义为<strong>数值</strong>、<strong>布尔值</strong>或<strong>字符串</strong>等类型；</p>

<div>
  <pre><code class='go'>const constantName = value  
  
const Pi float32 = 3.1415926  //如果需要，也可以明确指定常量的类型</code></pre>
</div>


<h2>基础类型</h2>

<ul>
<li>布尔型：类型为bool，值是true或false，默认为false;</li>
<li>数值类型:

<ol>
<li>整数类型: 有无符号和带符号两种 &ndash; int和uint，这两种类型的长度相同;</li>
<li>浮点类型: 有float32和float64两种（没有float类型），默认是float64;</li>
<li>复数: 它的默认类型是complex128（64位实数+64位虚数）,也有complex64(32位实数+32位虚数) ;</li>
</ol>
</li>
<li>字符串: 类型是string, 是用一对双引号（&#8221;&ldquo;）或反引号（<code></code>）括起来定义;

<ol>
<li>Go中字符串是不可变的;</li>
<li>可以将字符串转换为 []byte 类型数组，修改后在转换回 []string 数组，例如下面的例子：</li>
</ol>
</li>
</ul>


<div>
  <pre><code class='go'>s := &quot;hello&quot;  
c := []byte(s)  // 将字符串 s 转换为 []byte 类型  
c[0] = 'c'  
s2 := string(c)  // 再转换回 string 类型  
fmt.Printf(&quot;%s\n&quot;, s2)</code></pre>
</div>


<ol>
<li> Go中使用+操作符来连接两个字符串；</li>
<li><p> 使用反引号（<code></code>）来申明多行字符串：<strong>` 括起的字符串为Raw字符串，即字符串在代码中的形式就是打印时的形式，它没有字符转义，换行也将原样输出</strong>；</p></li>
<li><p>错误类型：内置有一个error类型，专门用来处理错误信息，Go的package里面还专门有一个包errors来处理错误：</p></li>
</ol>


<div>
  <pre><code class='go'>err := errors.New(&quot;emit macho dwarf: elf header corrupted&quot;)  
if err != nil {  
    fmt.Print(err)  
}</code></pre>
</div>


<h2>分组声明</h2>

<p>同时声明多个常量、变量，或者导入多个包时，可采用分组的方式进行声明：</p>

<div>
  <pre><code class='go'>import(  
    &quot;fmt&quot;  
    &quot;os&quot;  
)  
 
const(  
    i = 100  
    pi = 3.1415  
    prefix = &quot;Go_&quot;  
)  
 
var(  
    i int  
    pi float32  
    prefix string  
)</code></pre>
</div>


<h2>iota枚举</h2>

<p>关键字<strong>iota</strong>用来声明enum的时候采用，它默认开始值是0，每调用一次加1：</p>

<div>
  <pre><code class='go'>const(  
    x = iota  // x == 0  
    y = iota  // y == 1  
    z = iota  // z == 2  
    w  // 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用&quot;= iota&quot;  
)
 
const v = iota // 每遇到一个const关键字，iota就会重置，此时v == 0  
 
const (  
  e, f, g = iota, iota, iota //e=0,f=0,g=0 iota在同一行值相同  
)</code></pre>
</div>


<h2>默认规则</h2>

<ul>
<li><strong>大写字母开头的变量</strong>是可导出的，也就是其它包可以读取的，是<strong>公用变量</strong>；</li>
<li><strong>小写字母开头的变量</strong>就是不可导出的，是<strong>私有变量</strong>。</li>
<li><strong>大写字母开头的函数</strong>也是一样，相当于class中的带<strong>public关键词的公有函数</strong>；</li>
<li><strong>小写字母开头的函数</strong>就是有<strong>private关键词的私有函数</strong>。</li>
</ul>


<h2>array、slice、map</h2>

<h3>array</h3>

<p>array就是数组，定义方式如下：</p>

<div>
  <pre><code class='go'>var arr [n]type  //n表示数组的长度，type表示存储元素的类型  
a := [3]int{1, 2, 3} // 声明了一个长度为3的int数组
 
b := [10]int{1, 2, 3} // 声明了一个长度为10的int数组，其中前三个元素初始化为1、2、3，其它默认为0
 
c := [...]int{4, 5, 6} // 可以省略长度而采用`...`的方式，Go会自动根据元素个数来计算长度  

doubleArray := [2][4]int{[4]int{1, 2, 3, 4}, [4]int{5, 6, 7, 8}} //声明了一个二维数组</code></pre>
</div>


<p><strong>说明：</strong><br/>
1. 数组不能改变长度；
2. 数组之间的赋值是值的赋值，即当把一个数组作为参数传入函数的时候，传入的其实是该数组的副本，而不是它的指针;</p>

<h3>slice</h3>

<p>slice是一个引用类型, slice总是指向一个底层array，slice的声明也可以像array一样，只是不需要长度:</p>

<div>
  <pre><code class='go'>var fslice []int //和声明array一样，只是少了长度  

// 声明一个含有10个元素元素类型为byte的数组
var ar = [10]byte {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}
 
// 声明两个含有byte的slice
var a, b []byte
 
// a指向数组的第3个元素开始，并到第五个元素结束，
a = ar[2:5]
//现在a含有的元素: ar[2]、ar[3]和ar[4]
 
// b是数组ar的另一个slice
b = ar[3:5]
// b的元素是：ar[3]和ar[4]</code></pre>
</div>


<p><strong>说明：声明数组时，方括号内写明了数组的长度或使用&hellip;自动计算长度，而声明slice时，方括号内没有任何字符。</strong></p>

<h3>map</h3>

<p>map的格式为</p>

<pre><code>map[keyType]valueType  
</code></pre>

<p><strong>说明：</strong><br/>
&ndash; map是无序的，每次打印出来的map都会不一样，它不能通过index获取，而必须通过key获取<br/>
&ndash; map的长度是不固定的，也就是和slice一样，也是一种引用类型<br/>
&ndash; 内置的len函数同样适用于map，返回map拥有的key的数量<br/>
&ndash; map的值可以很方便的修改，通过numbers[&ldquo;one&rdquo;]=11可以很容易的把key为one的字典值改为11<br/>
&ndash; map和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制<br/>
&ndash; map的初始化可以通过<strong>key:val</strong>的方式初始化值
&ndash; map有两个返回值，第二个返回值，如果不存在key，那么ok为false，如果存在ok为true
&ndash; 通过函数<strong>delete(array,key)</strong>删除map的元素</p>

<h2>make 和 new操作</h2>

<h3>new</h3>

<p>new(T)分配了零值填充的T类型的内存空间，并且返回其地址：</p>

<blockquote><p><strong>new返回指针</strong></p></blockquote>

<h3>make</h3>

<p>make(T, args)只能创建slice、map和channel，并且返回一个有初始值(非零)的T类型，而不是*T:</p>

<blockquote><p><strong>make返回初始化后的（非零）值</strong></p></blockquote>

<h2>参考资料</h2>

<p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/02.2.md">Go Web 编程 ：Go　基础</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go笔记1：环境配置]]></title>
    <link href="http://zjun.github.io/blog/2013/10/24/go_note_1_install/"/>
    <updated>2013-10-24T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/10/24/go_note_1_install</id>
    <content type="html"><![CDATA[<h2>Go 安装</h2>

<p>我的环境是Win7，所以这里主要记录在Win7下安装Go的过程：</p>

<ul>
<li>首先到<a href="http://code.google.com/p/go/downloads/list">这里</a>去下载安装程序，32位系统下载go1.0.3.windows-386.msi，64位系统下载go1.0.3.windows-amd64.msi；</li>
<li>双击打开下载的文件，一路按照默认点击下一步，这个时候go已经安装到你的系统中，默认安装之后已经在你的系统环境变量中加入了c:/go/bin；</li>
<li>打开cmd，输入go，如果出现Go的Usage信息，那么说明Go已经安装成功了；如果出现该命令不存在，那么可以检查一下PATH环境变中是否包含了Go的安装目录。</li>
</ul>


<!--more-->


<p></p>

<h2>GOPATH</h2>

<p>go 命令依赖一个重要的环境变量：$GOPATH。<em>(注：这个不是Go安装目录)</em><br/>
在Windows中新建一个环境变量名称叫做GOPATH：<code>GOPATH=c:\mygo</code> .</p>

<p>$GOPATH 目录约定有三个子目录：</p>

<ul>
<li>src 存放源代码（比如：.go .c .h .s等）</li>
<li>pkg 编译后生成的文件（比如：.a）</li>
<li>bin 编译后生成的可执行文件（为了方便，可以把此目录加入到 $PATH变量中）</li>
</ul>


<h2>开发工具</h2>

<p>Windows平台上还是有很多Go的开发工具可供选择，比如：<a href="http://code.google.com/p/golangide">LiteIDE</a>， Sublime Text， IntelliJ IDEA&hellip; 这里我还是选择平时最常用最熟悉的Eclipse。步骤如下：</p>

<h3>Eclipse</h3>

<ol>
<li>下载并安装<a href="http://www.eclipse.org/">Eclipse</a>；</li>
<li>安装 goclipse 插件：<a href="http://code.google.com/p/goclipse/wiki/InstallationInstructions">http://code.google.com/p/goclipse/wiki/InstallationInstructions</a>;</li>
<li>下载gocode，用于go的代码补全提示: <code>go get -u github.com/nsf/gocode</code> <em>(注:在Windows中这一步老是报错，然后自动退出，还没有找到原因，如果不能顺利下载gocode的话，可以直接下载gocode.exe文件)</em></li>
<li>下载 <a href="http://sourceforge.net/projects/mingw/files/MinGW/">MinGW</a> 并按要求装好; <em>(做调试用)</em></li>
<li>配置插件：<code>Windows-&gt;Reference-&gt;Go</code><br/>
(1). 配置Go的编译器
(2). 配置Gocode（可选，代码补全），设置Gocode路径为之前生成的gocode.exe文件;
(3). 配置GDB（可选，做调试用），设置GDB路径为MingW安装目录下的gdb.exe文件;</li>
</ol>


<p>接下来就可以写一个简单的Go程序来检验安装是否成功了：</p>

<div>
  <pre><code class='go'>package main
 
import &quot;fmt&quot;

func main(){  
    fmt.Println(&quot;Hellow World&quot;);  
}</code></pre>
</div>


<h3>IntelliJ IDEA</h3>

<p>上面提到的 Eclipse 插件在 Win 环境下还是会时不时的出现问题，最后在 CSDN 上看到这篇文章：
<a href="http://blog.csdn.net/slug302/article/details/16991323">使用Intellij IDEA在Windwos下搭建golang开发环境 (把屎把尿超详细)</a> ，超详细的介绍了在Win7下配置 IntelliJ IDEA 开发 Golang 环境的过程，试过了目前最好的可行方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 修改 root 密码]]></title>
    <link href="http://zjun.github.io/blog/2013/09/18/change_mysql_root_password/"/>
    <updated>2013-09-18T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/09/18/change_mysql_root_password</id>
    <content type="html"><![CDATA[<h2>方法1： 用SET PASSWORD命令</h2>

<div>
  <pre><code class='console'>mysql -u root  
mysql&gt; SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpass');</code></pre>
</div>




<!--more-->


<h2>方法2：用mysqladmin</h2>

<div>
  <pre><code class='console'>mysqladmin -u root password &quot;newpass&quot;</code></pre>
</div>


<p>如果root已经设置过密码，采用如下方法</p>

<div>
  <pre><code class='console'>mysqladmin -u root password oldpass &quot;newpass&quot;</code></pre>
</div>


<h2>方法3： 用UPDATE直接编辑user表</h2>

<div>
  <pre><code class='console'>mysql -u root  
mysql&gt; use mysql;  
mysql&gt; UPDATE user SET Password = PASSWORD('newpass') WHERE user = 'root';  
mysql&gt; FLUSH PRIVILEGES;</code></pre>
</div>


<h2>方法4： 在丢失root密码的时候，可以这样</h2>

<div>
  <pre><code class='console'>mysqld_safe --skip-grant-tables&amp;  
mysql -u root mysql  
mysql&gt; UPDATE user SET password=PASSWORD(&quot;new password&quot;) WHERE user='root';  
mysql&gt; FLUSH PRIVILEGES;</code></pre>
</div>


<hr />

<p>经测试，方法三修改成功，其他三种方法没有测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把Raspberry Pi打造成 Web Server]]></title>
    <link href="http://zjun.github.io/blog/2013/09/17/setup_raspberrypi_as_webserver/"/>
    <updated>2013-09-17T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/09/17/setup_raspberrypi_as_webserver</id>
    <content type="html"><![CDATA[<h2>Setup Raspberry Pi</h2>

<h3>安装</h3>

<p>理论上 OS 可以是任何支持 ARM v6 的 Linux 发行版，推荐使用官方的 wheezy 系统，因为这是针对树莓派定制并优化了的 Debian。<br/>
下载地址：<a href="http://www.raspberrypi.org/downloads" title="http://www.raspberrypi.org/downloads">http://www.raspberrypi.org/downloads</a><br/>
解压之后得到一个 .img 的镜像文件，比如 2013-07-26-wheezy-raspbian.img.</p>

<p>在Windows下使用工具：<a href="http://sourceforge.net/projects/win32diskimager/">win32diskimager</a> 把镜像文件写入 SD 卡。</p>

<p>将刻好的 SD 卡插入树莓派的 SD 卡插槽，接上键盘和显示器。然后开机，也就是插上电源，树莓派没有电源开关，插电即开机。拔出电源就是关机，不过最安全的方式是使用 <code>sudo shutdown -h now</code> 或 <code>sudo halt</code> 命令正确地关闭系统，然后再拔电源。 重启使用 <code>sudo reboot</code> 命令。</p>

<!--more-->


<p></p>

<h3>设置</h3>

<p>第一次开机正常启动后，看到的是 Raspi-config 界面， 你可以使用键盘做一些基本的系统设置:</p>

<ul>
<li>先简单地设置一下地区、时区、键盘。注意默认的键盘布局（layout）设置是 English(UK) （因为是英国人发明的），在 Others 中把它改为 English(US)，否则 # 号的位置不对。</li>
<li>接着还可以修改默认用户 pi 的密码，官方系统的默认账号是 pi / raspberry 。</li>
<li>在 ssh 设置中启用 ssh 服务（默认已启用），这样以后就可以 ssh 远程控制了。</li>
<li>在 boot_behaviour 设置中，设置开机是否自动进入桌面环境（默认进入），选择否则只进入命令行模式。建议关闭桌面，需要的时候使用 <code>startx</code> 命令就可以进入。系统提供的桌面是 LXDE ，有一些基本功能。</li>
<li>expand_rootfs 设置是让你的系统扩展到全部 SD 卡空间，默认没有使用全部 SD 卡空间，所以请执行这个选项。</li>
<li>最后，执行 Finish 完成设置，重启系统。</li>
</ul>


<p>重启之后就不会再出现这个设置界面了，但你随时可以使用 <code>sudo raspi-config</code> 命令再次使用这个设置工具。</p>

<p>装好 OS 后，建议先升级一下系统，最新的更新可能会提高系统的性能：</p>

<div>
  <pre><code class='console'>sudo apt-get update      
sudo apt-get upgrade</code></pre>
</div>


<p>一些在设置系统时常用到的命令：</p>

<ul>
<li><p>关机: <div>
<pre><code class='console'>sudo shutdown -h now</code></pre>
</div>
或 <div>
<pre><code class='console'>sudo halt</code></pre>
</div></p></li>
<li><p>重启: <div>
<pre><code class='console'>sudo reboot</code></pre>
</div></p></li>
<li><p>查看IP地址： <div>
<pre><code class='console'>ifconfig</code></pre>
</div></p></li>
<li><p>Set Up SSH:</p></li>
</ul>


<div>
  <pre><code class='console'>sudo mv /boot/boot_enable_ssh.rc /boot/boot.rc   
sudo shutdown -r now</code></pre>
</div>


<ul>
<li>Install FTP</li>
</ul>


<div>
  <pre><code class='console'>sudo chown -R pi /var/www  -- Take ownership of the web root  
sudo apt-get install vsftpd -- install vsftpd  
sudo service vsftpd restart -- restart vsftpd</code></pre>
</div>


<p>到这里，<strong>就装好了一台 RPi</strong></p>

<h2>Setup Tomcat</h2>

<h3>安装</h3>

<ul>
<li>install tomcat server</li>
</ul>


<div>
  <pre><code class='console'>sudo apt-get install tomcat7</code></pre>
</div>


<h3>设置</h3>

<ul>
<li>link conf and webapps folders</li>
</ul>


<div>
  <pre><code class='console'>cd /usr/share/tomcat7  
sudo rm -r webapps  
sudo ln -s /var/lib/tomcat7/conf conf  
sudo ln -s /var/lib/tomcat7/webapps webapps</code></pre>
</div>


<ul>
<li>give full access to webapps folder</li>
</ul>


<div>
  <pre><code class='console'>sudo chmod 777 /usr/share/tomcat7/webapps</code></pre>
</div>


<ul>
<li>copy war file to server webapps folder (from local pc)</li>
</ul>


<div>
  <pre><code class='console'>scp &lt;path&gt;/&lt;file&gt;.war &lt;username&gt;@&lt;ip&gt;:/usr/share/tomcat7/webapps/&lt;file&gt;.war</code></pre>
</div>


<ul>
<li>restart tomcat server</li>
</ul>


<div>
  <pre><code class='console'>sudo service tomcat7 restart</code></pre>
</div>


<h3>管理</h3>

<ul>
<li>tomcat server commands</li>
</ul>


<div>
  <pre><code class='console'>sudo service tomcat7 [&lt;start&gt; &lt;stop&gt; &lt;restart&gt;]</code></pre>
</div>


<ul>
<li>Where to find the web app log files:</li>
</ul>


<div>
  <pre><code class='console'>/var/log/tomcat</code></pre>
</div>


<h2>Setup MySQL</h2>

<h3>安装</h3>

<ul>
<li>Install MySQL server</li>
</ul>


<div>
  <pre><code class='console'>sudo apt-get install mysql-server mysql-client php5-mysql</code></pre>
</div>


<h3>管理</h3>

<ul>
<li>Manage MySQL service</li>
</ul>


<div>
  <pre><code class='console'>sudo service mysql start/stop/restart</code></pre>
</div>


<h3>设置</h3>

<h4>远程访问</h4>

<p>By default remote access to the MySQL database server is disabled for security reasons.To allow remotely access to the database server from the web server or home, follow below quick steps.</p>

<p><strong>1.Edit my.cnf File</strong>  <br/>
&ndash; If you are using Debian Linux file is located at <strong>/etc/mysql/my.cnf</strong> location <br/>
&ndash; If you are using Red Hat Linux/Fedora/Centos Linux file is located at <strong>/etc/my.cnf</strong> location <br/>
&ndash; If you are using FreeBSD you need to create a file <strong>/var/db/mysql/my.cnf</strong>
Edit <strong>/etc/my.cnf</strong>, run:</p>

<div>
  <pre><code class='console'>vi /etc/my.cnf</code></pre>
</div>


<p>Once file opened, locate line that read as follows</p>

<p>[mysqld]<br/>
Make sure line skip-networking is commented (or remove line) and add following line</p>

<div>
  <pre><code class='console'>bind-address=YOUR-SERVER-IP</code></pre>
</div>


<p>For example, if your MySQL server IP is <code>65.55.55.2</code> then entire block should be look like as follows:</p>

<div>
  <pre><code class='console'>[mysqld]  
user            = mysql  
pid-file        = /var/run/mysqld/mysqld.pid  
socket          = /var/run/mysqld/mysqld.sock  
port            = 3306  
basedir         = /usr  
datadir         = /var/lib/mysql  
tmpdir          = /tmp  
language        = /usr/share/mysql/English  
bind-address    = 65.55.55.2  
#  skip-networking  
....  
..  
....</code></pre>
</div>


<p>Where,</p>

<ul>
<li><strong>bind-address</strong> : IP address to bind to.</li>
<li><strong>skip-networking</strong> : Don’t listen for TCP/IP connections at all. All interaction with mysqld must be made via Unix sockets. This option is highly recommended for systems where only local requests are allowed. Since you need to allow remote connection this line should be removed from my.cnf or put it in comment state.</li>
</ul>


<p>2.Grant access to remote IP address  <br/>
&ndash; Connect to mysql server:</p>

<div>
  <pre><code class='console'>$ mysql -u root -p mysql</code></pre>
</div>


<ul>
<li>Grant access to a new database<br/>
If you want to add a new database called foo for user bar and remote IP <code>202.54.10.20</code> then you need to type the following commands at mysql> prompt:</li>
</ul>


<div>
  <pre><code class='console'>mysql&gt; CREATE DATABASE foo;  
mysql&gt; GRANT ALL ON foo.* TO bar@'202.54.10.20' IDENTIFIED BY 'PASSWORD';</code></pre>
</div>


<ul>
<li>Grant Access To An Existing Database</li>
</ul>


<div>
  <pre><code class='console'>mysql&gt; update db set Host='202.54.10.20' where Db='webdb';  
mysql&gt; update user set Host='202.54.10.20' where user='webadmin';</code></pre>
</div>


<ul>
<li>Test connection</li>
</ul>


<div>
  <pre><code class='console'>$ mysql -u webadmin –h 65.55.55.2 –p</code></pre>
</div>


<p>Where<br/>
&ndash; u webadmin: webadmin is MySQL username <br/>
&ndash; h IP or hostname: 65.55.55.2 is MySQL server IP address or hostname (FQDN) <br/>
&ndash; p Prompt for password</p>

<p>You can also use the telnet or nc command to connect to port 3306 for testing purpose:</p>

<div>
  <pre><code class='console'>$ echo X | telnet -e X 65.55.55.2 3306</code></pre>
</div>


<p>OR</p>

<div>
  <pre><code class='console'>$ nc -z -w1 65.55.55.2 3306</code></pre>
</div>


<p>Sample outputs:</p>

<div>
  <pre><code class='console'>Connection to 65.55.55.2 3306 port [tcp/mysql] succeeded!</code></pre>
</div>


<h4>MySQL 中文乱码</h4>

<p>MySQL中默认字符集的设置有四级:服务器级，数据库级，表级 。最终是字段级 的字符集设置。注意前三种均为默认设置，并不代码你的字段最终会使用这个字符集设置。所以我们建议要用<code>show create table table ;</code> 或<code>show full fields from tableName;</code> 来检查当前表中字段的字符集设置。</p>

<p><strong>1.查看默认的编码格式:</strong></p>

<div>
  <pre><code class='console'>mysql&gt; show variables like &quot;%char%&quot;;
 
+--------------------------+---------------+  
| Variable_name | Value |  
+--------------------------+---------------+  
| character_set_client | gbk |  
| character_set_connection | gbk |  
| character_set_database | utf8 |  
| character_set_filesystem | binary |  
| character_set_results | gbk |  
| character_set_server | utf8 |  
| character_set_system | utf8 |  
+--------------------------+-------------+</code></pre>
</div>


<p>注：以前2个来确定,可以使用<code>set names utf8</code>,<code>set names gbk</code>设置默认的编码格式;</p>

<div>
  <pre><code class='console'>mysql&gt; set names utf8;   **有时候这一句很关键！**</code></pre>
</div>


<p>执行SET NAMES utf8的效果等同于同时设定如下：</p>

<div>
  <pre><code class='console'>SET character_set_client='utf8';  
SET character_set_connection='utf8';  
SET character_set_results='utf8';</code></pre>
</div>


<p><strong>2.数据库表中字段的字符集设置 :</strong></p>

<p><code>show create table TableName</code> 或 <code>show full columns from tableName</code></p>

<div>
  <pre><code class='console'>mysql&gt; show create table t1;  
+-------+------------------------------------  
| Table | Create Table                       
+-------+------------------------------------  
| t1    | CREATE TABLE `t1` (  
  `id` int(11) NOT NULL,  
  `c1` varchar(30) DEFAULT NULL,  
  PRIMARY KEY (`id`)      
) ENGINE=InnoDB DEFAULT CHARSET=gbk |  
+-------+------------------------------------  
1 row in set (0.00 sec)   
                        
mysql&gt; show full columns from t1;  
+-------+-------------+----------------+------+-----+-  
| Field | Type        | Collation      | Null | Key |   
+-------+-------------+----------------+------+-----+-  
| id    | int(11)     | NULL           | NO   | PRI |   
| c1    | varchar(30) | gbk_chinese_ci | YES  |     |   
+-------+-------------+----------------+------+-----+-  
2 rows in set (0.00 sec)   
mysql&gt;</code></pre>
</div>


<p><strong>3.当前联接系统参数</strong></p>

<div>
  <pre><code class='console'>show variables like 'char%'    
&gt;+--------------------------+----------------  
| Variable_name            | Value  
+--------------------------+----------------  
| character_set_client     | gbk  
| character_set_connection | gbk  
| character_set_database   | latin1  
| character_set_filesystem | binary  
| character_set_results    | gbk  
| character_set_server     | latin1  
| character_set_system     | utf8  
| character_sets_dir       | C:/Program File  
+--------------------------+----------------  
8 rows in set (0.00 sec)   
mysql&gt;</code></pre>
</div>


<p><strong>4.中文，请确保 表中该字段的字符集为中文兼容：</strong></p>

<div>
  <pre><code class='console'>big5     | Big5 Traditional Chinese  
gb2312   | GB2312 Simplified Chinese  
gbk      | GBK Simplified Chinese  
utf8     | UTF-8 Unicode</code></pre>
</div>


<p><strong>5.确保联接参数与这个字段字符集一致,你可以用 <code>set name 'charsetname';</code></strong><br/>
比如， <code>set name 'gbk';</code><br/>
 这条命令会同时修改</p>

<div>
  <pre><code class='console'>character_set_client  
character_set_connection  
character_set_results</code></pre>
</div>


<p>(如果你的这架MySQL中都为中文，则你可以在<code>my.ini</code>或<code>my.cnf</code>中加上或修改这个参数, 参数文件修改后需重启MySQL服务)</p>

<div>
  <pre><code class='console'>[mysql]
default-character-set=gbk</code></pre>
</div>


<p><strong>Update on 2013-9-20</strong><br/>
上面提到的方法都没有解决中文乱码的问题，最终采用在connection URL 中加入编码参数的方法，问题解决，终于可以正常存入和显示中文了。</p>

<div>
  <pre><code class='console'>jdbc:mysql://serverhost:3306/database?useUnicode=true&amp;characterEncoding=utf-8</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git常用命令笔记]]></title>
    <link href="http://zjun.github.io/blog/2013/08/15/git_commands_notes/"/>
    <updated>2013-08-15T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/08/15/git_commands_notes</id>
    <content type="html"><![CDATA[<p>在 <a href="http://robbinfan.com/">Robin Fan</a> 那里看到一份 <a href="http://robbinfan.com/blog/34/git-common-command" title="Git常用命令备忘">http://robbinfan.com/blog/34/git-common-command</a>， 非常的干货，转帖在这里，以备日后查询。</p>

<!--more-->


<h2>配置命令</h2>

<pre><code>git config --global user.name "zJun"     
git config --global user.email "zjun101@gmail.com"  
git config --global color.ui true  
git config --global alias.co checkout  
git config --global alias.ci commit  
git config --global alias.st status  
git config --global alias.br branch  
</code></pre>

<p>用户的git配置文件~/.gitconfig</p>

<h2>常用命令</h2>

<h3>查看、添加、提交、删除、找回，重置修改文件</h3>

<pre><code>git help &lt;command&gt;  # 显示command的help
git show            # 显示某次提交的内容
git show $id

git co  -- &lt;file&gt;   # 抛弃工作区修改
git co  .           # 抛弃工作区修改

git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区
git add .           # 将所有修改过的工作文件提交暂存区

git rm &lt;file&gt;       # 从版本库中删除文件
git rm &lt;file&gt; --cached  # 从版本库中删除文件，但不删除文件

git reset &lt;file&gt;    # 从暂存区恢复到工作文件
git reset -- .      # 从暂存区恢复到工作文件
git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

git ci &lt;file&gt;
git ci .
git ci -a           # 将git add, git rm和git ci等操作都合并在一起做
git ci -am "some comments"
git ci --amend      # 修改最后一次提交记录

git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象
git revert HEAD     # 恢复最后一次提交的状态
</code></pre>

<h3>查看文件diff</h3>

<pre><code>git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异
git diff
git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异
git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 
git diff --staged   # 比较暂存区和版本库差异
git diff --cached   # 比较暂存区和版本库差异
git diff --stat     # 仅仅比较统计信息
</code></pre>

<h3>查看提交记录</h3>

<pre><code>git log
git log &lt;file&gt;      # 查看该文件每次提交记录
git log -p &lt;file&gt;   # 查看每次详细修改内容的diff
git log -p -2       # 查看最近两次详细修改
</code></pre>

<h2>本地分支管理</h2>

<h3>查看、切换、创建和删除分支</h3>

<pre><code>git br -r           # 查看远程分支
git br &lt;new_branch&gt; # 创建新的分支
git br -v           # 查看各个分支最后提交信息
git br --merged     # 查看已经被合并到当前分支的分支
git br --no-merged  # 查看尚未被合并到当前分支的分支

git co &lt;branch&gt;     # 切换到某个分支
git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去
git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch

git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支

git br -d &lt;branch&gt;  # 删除某个分支
git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
</code></pre>

<h3>分支合并和rebase</h3>

<pre><code>git merge &lt;branch&gt;               # 将branch分支合并到当前分支
git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交

git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：
git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;
</code></pre>

<h2>补丁管理(方便在多台机器上开发同步时用)</h2>

<pre><code>git diff &gt; ../sync.patch         # 生成补丁
git apply ../sync.patch          # 打补丁
git apply --check ../sync.patch  # 测试补丁能否成功
</code></pre>

<h2>暂存管理</h2>

<pre><code>git stash                        # 暂存
git stash list                   # 列所有stash
git stash apply                  # 恢复暂存的内容
git stash drop                   # 删除暂存区
</code></pre>

<h2>远程分支管理</h2>

<pre><code>git pull                         # 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin                 # 抓取远程仓库更新
git merge origin/master          # 将远程主分支合并到本地当前分支
git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支
git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上

git push                         # push所有分支
git push origin master           # 将本地主分支推到远程主分支
git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名
git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支
git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支
</code></pre>

<h2>远程仓库管理</h2>

<pre><code>git remote -v                    # 查看远程服务器地址和仓库名称
git remote show origin           # 查看远程服务器仓库状态
git remote add origin git@github:robbin/robbin_site.git         # 添加远程仓库地址
git remote set-url origin git@github.com:robbin/rob
</code></pre>

<h3>创建远程仓库</h3>

<pre><code>git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上

mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库
git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址
git push -u origin master                                      # 客户端首次提交
git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track

git remote set-head origin master   # 设置远程仓库的HEAD指向master分支
</code></pre>

<h3>命令设置跟踪远程库和本地库</h3>

<pre><code>git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop
</code></pre>

<h2>参考资料</h2>

<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰的官方网站-Git教程</a><br/>
<a href="http://robbinfan.com/blog/34/git-common-command" title="Git常用命令备忘">Git常用命令备忘</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Jekyll+Github+Markdown来写Blog]]></title>
    <link href="http://zjun.github.io/blog/2013/08/05/use-jekyll-github-blog/"/>
    <updated>2013-08-05T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/08/05/use-jekyll-github-blog</id>
    <content type="html"><![CDATA[<p>继续折腾，之前使用 Octpress 来写Blog,但用了一段时间以后还是觉得笨重，发布一篇新文章需要把所有页面重新发布一遍，最终还是决定使用定制更灵活的Jekyll.下面就记录一下这次迁移的步骤和遇到的问题。</p>

<p>以下过程在Windows7下进行：</p>

<!--more-->


<h2>安装 Ruby</h2>

<p>在Windows环境下推荐安装<a href="http://railsinstaller.org/">RailsInstaller</a>.</p>

<h2>安装 Git</h2>

<ol>
<li>在windows下安装<a href="http://code.google.com/p/msysgit/downloads/list">msysgit</a>.</li>
<li>设置<code>SSH keys</code><br/>
首先备份已有的keys</li>
</ol>


<div>
  <pre><code class='console'>$ ls  
config  id_rsa  id_rsa.pub  known_hosts  
$ mkdir key_backup
$ cp id_rsa* key_backup  
$ rm id_rsa*</code></pre>
</div>


<p>  生成新的 SSH keys</p>

<div>
  <pre><code class='console'>$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;    
Generating public/private rsa key pair.  
Enter file in which to save the key (/Users、your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</code></pre>
</div>


<p>输入GitHub的密码</p>

<div>
  <pre><code class='console'>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;  
Enter same passphrase again:&lt;再次输入加密串&gt;</code></pre>
</div>


<ol>
<li>添加SSH Key到GitHub：登录GitHub，在主页上点击设置按钮，选择<code>SSH Keys</code>项，把复制的内容粘贴进去，然后点击Add Key按钮即可。<br/>
可以输入下面的命令，看看设置是否成功，<code>git@github.com</code>的部分不要修改：</li>
</ol>


<div>
  <pre><code class='console'>$ ssh -T git@github.com</code></pre>
</div>


<ol>
<li>设置GitHub账号信息：</li>
</ol>


<div>
  <pre><code class='console'>$ git config --global user.name &quot;你的名字&quot;  
$ git config --global user.email &quot;your_email@youremail.com&quot;</code></pre>
</div>


<h2>安装jekyll</h2>

<ol>
<li>把淘宝的镜像加到gem的镜像列表里</li>
</ol>


<div>
  <pre><code class='console'>gem sources --remove http://rubygems.org/  
gem sources -a http://ruby.taobao.org/</code></pre>
</div>


<p>  用<code>gem sources -l</code>看看现在源列表</p>

<div>
  <pre><code class='console'>*** CURRENT SOURCES ***

http://ruby.taobao.org</code></pre>
</div>


<ol>
<li>如果是上面这样就可以安装jekyll了</li>
</ol>


<div>
  <pre><code class='console'>gem install jekyll</code></pre>
</div>


<p>  安装<code>rdiscount</code>来解析Markdown文档</p>

<div>
  <pre><code class='console'>gem install rdiscount kramdown</code></pre>
</div>


<h2>建立github pages</h2>

<ol>
<li>登录GitHub,建立一个名为 <code>USERNAME.github.com</code> 的 repositories，（注意：这里的USERNAME要与你的GitHub用户名一致）。</li>
<li>建立本地Blog目录：</li>
</ol>


<div>
  <pre><code class='console'>$ mkdir USERNAME.github.com  
$ cd USERNAME.github.com  
$ git init  
$ git add .  
$ git commit -m 'init commit'  
$ git remote add origin git@github.com:USERNAME/USERNAME.github.com.git  
$ git push  -u origin master</code></pre>
</div>


<ol>
<li>等待大约10分钟，就可以通过　<code>USERNAME.github.io</code> 访问新的blog了</li>
<li>使用脚本来新建文章<br/>
在本地的Blog目录下新建一个 <code>Rakefile</code> 文件，然后将<a href="https://github.com/plusjade/jekyll-bootstrap/blob/master/Rakefile">Rakefile content</a>拷贝到文件中.<br/>
现在就可以在命令行中新建一篇文章了：</li>
</ol>


<div>
  <pre><code class='console'>rake post title=&quot;titlename&quot;</code></pre>
</div>


<p>  执行该命令后，将会在<code>_post</code>的文件夹下生成形式为<code>YYYY-MM-dd-titlename.md</code>的文件，并且会提供好一些附加信息。其中，titlename就是命令中的title后引号中的值。</p>

<h2>代码高亮 Pygments</h2>

<p>Jekyll通过Pygments支持对代码/语法的高亮显示。<br/>
<a href="https://github.com/mojombo/jekyll/wiki/Liquid-Extensions">Pygments on github</a><br/>
<a href="http://pygments.org/">Pygments homepage</a><br/>
<a href="http://pygments.org/languages/">Supported languages list</a><br/>
1. 安装 Python:</p>

<div>
  <pre><code class='console'>$ python --version  
Python 2.7.2</code></pre>
</div>


<ol>
<li>安装setuptools： 下载并运行 <a href="https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py">ez_setup.py</a></li>
</ol>


<div>
  <pre><code class='console'>python ez_setup.py</code></pre>
</div>


<ol>
<li>安装 pygments：</li>
</ol>


<div>
  <pre><code class='console'>$ sudo easy_install Pygments</code></pre>
</div>


<ol>
<li>生成CSS文件</li>
</ol>


<div>
  <pre><code class='console'>$ pygmentize -S default -f html &gt; highlight.css</code></pre>
</div>


<ol>
<li>在<code>config.yaml</code>中enable <code>pygmentize</code>:</li>
</ol>


<div>
  <pre><code class='console'>pygments: true</code></pre>
</div>


<ol>
<li>Include pygments.css
在 <code>/_layouts/default.html</code> 中include highlight.css:</li>
</ol>


<div>
  <pre><code class='html'>&lt;link rel=&quot;stylesheet&quot; href=&quot;/highlight.css&quot;&gt;</code></pre>
</div>


<h3><strong>Note: 遇到的问题</strong></h3>

<p>在文章中使用<code>highlight</code>后每次<code>jekyll build</code>时都会遇到异常：</p>

<div>
  <pre><code class='console'>C:/Ruby193/lib/ruby/gems/1.9.1/gems/posix-spawn-0.3.6/lib/posix/spawn.rb:162: warning: cannot close fd before spawn
←[31m  Liquid Exception: No such file or directory - /bin/sh in 2013-08-05-test-post.md←[0m</code></pre>
</div>


<p>在这里找到了原因和解决方法：<a href="http://stackoverflow.com/questions/17364028/jekyll-on-windows-pygments-not-working">Jekyll on Windows: Pygments not working</a></p>

<p>原来是因为 jekyll 和 Pygments 只能和 Pygments.rb 0.5.0 配合使用，但是我本机装的是 Pygments.rb 0.5.2，卸载后重新安装Pygments.rb 0.5.0，再重新build,异常消失。</p>

<div>
  <pre><code class='console'>gem uninstall pygments.rb --version &quot;=0.5.2&quot;
gem install pygments.rb --version &quot;=0.5.0&quot;</code></pre>
</div>


<p><strong><em>2013-12-20 更新：</em></strong><br/>
Jekyll现在已经支持用<a href="https://github.com/vmg/redcarpet">Redcarpet</a>来处理markdown，并且在1.1以后的版本中， <code>Jekyll new</code> 新建的站点也将默认采用Redcarpet。目前只要在<code>_config.yml</code>中进行类似如下相关设置：</p>

<pre><code>markdown: redcarpet
redcarpet:
    extensions: ["fenced_code_blocks", "autolink", "tables", "strikethrough"]
</code></pre>

<p>代码高亮均可以采用如下格式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>显示效果如下：</p>

<blockquote><p>&#8220;` ruby<br/>
require &lsquo;rubygems&rsquo;</p>

<p>def foo<br/>
  puts &lsquo;foo&#8217;<br/>
end</p>

<h1>comment</h1>

<p>&#8220;`</p></blockquote>

<h2>常用命令</h2>

<div>
  <pre><code class='console'>$ git clone git@github.com:username/username.github.com.git //本地如果无远程代码，先做这步，不然就忽略

$ cd .ssh/username.github.com //定位到你blog的目录下

$ git pull origin master //先同步远程文件，后面的参数会自动连接你远程的文件

$ git status //查看本地自己修改了多少文件

$ git add . //添加远程不存在的git文件

$ git commit * -m &quot;what I want told to someone&quot;

$ git push origin master //更新到远程服务器上</code></pre>
</div>


<h2>参考资料</h2>

<p><a href="http://beiyuu.com/github-pages/#github">使用Github Pages建独立博客</a></p>

<p><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog&mdash;&mdash;github Pages和Jekyll入门</a></p>

<p><a href="http://site.douban.com/196781/widget/notes/12161495/note/264946576/">写作环境搭建(git+github+markdown+jekyll)</a></p>

<p><a href="http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/">Github Pages极简教程</a></p>

<p><a href="http://web-design-weekly.com/2013/03/04/going-static-with-jekyll-deploying-via-github-for-free/">Going Static with Jekyll &amp; Deploying via GitHub for Free</a></p>

<p><a href="http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html">通过GitHub Pages建立个人站点（详细步骤）</a></p>

<p><a href="http://ztpala.com/2011/10/27/code-highlighting-jekyll/">Jekyll的代码高亮</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 Java String 内存管理的几个有趣的例子]]></title>
    <link href="http://zjun.github.io/blog/2013/05/30/java-string-ram-management/"/>
    <updated>2013-05-30T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/05/30/java-string-ram-management</id>
    <content type="html"><![CDATA[<p>今天在 <a href="http://www.oschina.net">OSChina</a> 上看到一篇有趣的文章：<a href="http://my.oschina.net/u/551903/blog/134000">关于String内存分配的深入探讨</a>,文章通过几个简单的例子，把Java中String的内存管理的方式解释的很清楚，涨了不少姿势，现根据自己的理解做些笔记在这里：</p>

<!-- more -->


<p>废话不多说，先上代码：</p>

<pre><code>public class StringDemo {

    public static final String MESSAGE = "taobao";

    public static void main(String[] args) {

        // ---------------------------------------------
        String a = "tao" + "bao";
        String b = "tao";
        String c = "bao";

        System.out.println(a == MESSAGE);// true
        System.out.println((b + c) == MESSAGE);// false

        // ---------------------------------------------
        final String d = "tao";
        final String e = "bao";

        System.out.println((d + e) == MESSAGE);// true

        // ---------------------------------------------
        String f = "tao" + "bao";
        String g = new String("taobao");

        System.out.println(f == MESSAGE); // true
        System.out.println(g == MESSAGE); // false

        g = g.intern();

        System.out.println(g == MESSAGE); // true
        System.out.println(f == g.intern()); // true
        // ---------------------------------------------
    }
}
</code></pre>

<h2>笔记：</h2>

<ul>
<li>Java中对于编译和运行时能够知道大小的变量（如：引用变量和基本类型的值）存放于<strong>栈内存</strong></li>
<li>Java中通过 new 产生的变量和大小会在运行时变化的变量(如：数组和链表)存放于<strong>堆内存，但指向对象的引用还是存放在栈内存</strong></li>
<li><strong>栈内存中的数据会相互共享</strong>，如果新增变量的值在栈中已经存在，那么新变量将指向同一个地址和值，而不会新增一个空间来存放自己的值;如果没有就在该栈内存增加一个该常量，并将变量指向该常量。</li>
<li>对于<strong>直接赋值的字符串常量</strong>（如String s=“Hello World”；中的Hello World）也是<strong>存放在栈内存中</strong></li>
<li>堆内存没有数据共享的特点,每次都会新增划分一个空间给新的变量，哪怕是相同的值</li>
<li>Java <strong>编译器的优化</strong>，会对于<strong>字符串常量的相加</strong>，在编译时<strong>直接</strong>将字符串<strong>合并</strong>，而不是等到运行时再合并，比如：<strong>String a = &ldquo;tao&rdquo;+&ldquo;bao&rdquo;;和String a = &ldquo;taobao&rdquo;;编译出的字节码是一样的</strong></li>
<li><strong>Java对String的相加是通过StringBuffer实现的</strong>，先构造一个StringBuffer,然后调用append()方法追加，然后将StringBuffer转化成String对象。StringBuffer对象<strong>在堆内存中</strong>，那转换成的String对象理所应当的也是在堆内存中</li>
<li><strong>intern()</strong>方法会<strong>先检查</strong>String池(或者说成<strong>栈内存</strong>)中是否存在相同的字符串常量，如果有就返回</li>
<li><strong>final变量</strong>不可能再次赋值了，所以存放在<strong>栈内存里</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dojo在IE中的那些坑]]></title>
    <link href="http://zjun.github.io/blog/2013/05/14/dojo-traps-in-ie/"/>
    <updated>2013-05-14T17:37:00+08:00</updated>
    <id>http://zjun.github.io/blog/2013/05/14/dojo-traps-in-ie</id>
    <content type="html"><![CDATA[<p>最近的一个小项目中使用的<a href="http://dojotoolkit.org/">dojo</a>作为前台页面框架。本来很简单的功能，但是发布给用户做  UAT时却发现一堆简单低级的错误，但在开发环境却始终不能重现，百思不得其解&hellip;原来用户的测试环境是 IE8，果然问题在这，之前测试是在FireFox，没想到相同的功能在IE中却报错。</p>

<!-- more -->


<h3>坑一：</h3>

<ul>
<li>症状：页面上普通按钮，在IE中确实始终会默认submit页面。</li>
<li><p>原因：在<a href="http://zhidao.baidu.com/question/531818487.html">这里</a>找到类似的问题：</p>

<blockquote><p>button元素的默认type属性的值为submit，这个是标准，和IE版本没关系。如果不喜欢可以直接用&lt; input type=&lsquo;button&rsquo;>代替。</p></blockquote></li>
<li><p>解决方案：在 button 强制加上 type=&lsquo;button&rsquo; 属性</p>

<pre><code>  &lt; button data-dojo-type="dijit.form.Button" type='button'&gt;  
     Add  
  &lt; script type="dojo/method" data-dojo-event="onClick" data-dojo-args="evt"&gt;  
     add()  
  &lt; /script&gt;    
  &lt; /button&gt;
</code></pre></li>
</ul>


<h3>坑二：</h3>

<ul>
<li>症状：在datagrid上做了 inline edit后，保存后数据不会刷新，总是更改前的就数据</li>
<li>原因： datagrid的data store默认是使用了cache,这在FireFox中是不会引起问题的，但在IE中就不能刷新数据。</li>
<li>解决方案：在datagrid中不使用缓存：
      var store= new dojo.data.ItemFileWriteStore({
          url : &lsquo;&lt;c:url value=&ldquo;/billitem.wss?method=modifiedListStore&amp;selectId=${selectId}&rdquo; />&rsquo;,
          requestMethod:&ldquo;post&rdquo;,
          urlPreventCache:true}
      );</li>
</ul>


<h3>坑三：</h3>

<ul>
<li>症状：datagrid中最后修改的cell里的值总是不能保存到数据库</li>
<li>原因：datagrid是通过onApplyCellEdit事件将未保存的修改数据save到itemStore.<em>pending(</em>newItem，<em>modifiedItems, </em>removedItems).但是onApplyCellEdit是通过Enter或者blur触发的，在FireFox中当用户点击当前cell以外的任意页面都会触发这个事件，但是在IE中必须要点击datagrid的其他地方才能触发，否则不会（比如：点击grid以外的save按钮）。</li>
<li>解决方案：google了一下午，最后在<a href="http://dojo-toolkit.33424.n3.nabble.com/DataGrid-last-edited-cell-does-not-save-td2358868.html">这里</a>找到解决办法：

<blockquote><p>this is a known problem, I think.  Well at least I&rsquo;ve known about it for
a while lol. I&rsquo;m lazy so I never bothered to check for a bug on it. I
always figured that I could manually trigger lost focus or something on
the cell to get it to set the value to the store.</p></blockquote>

<pre><code>  &lt; table dojoType="dojox.grid.DataGrid" onBlur="onTableBlur"&gt;---&lt; /table&gt;

  function onTableBlur()
  {
    if (this.edit.isEditing())
      this.edit.apply();
  } 
</code></pre></li>
</ul>


<h3>参考资料：</h3>

<ul>
<li><a href="http://dojo-toolkit.33424.n3.nabble.com/DataGrid-last-edited-cell-does-not-save-td2358868.html">DataGrid last edited cell does not save</a></li>
<li><a href="http://stackoverflow.com/questions/12616974/event-not-firing-for-dojos-datagrid">Event not firing for dojo&rsquo;s DataGrid</a></li>
<li><a href="http://zhidao.baidu.com/question/531818487.html">html中button自动提交表单问题!</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2快捷键及常用插件]]></title>
    <link href="http://zjun.github.io/blog/2013/05/08/using-sublime/"/>
    <updated>2013-05-08T14:36:00+08:00</updated>
    <id>http://zjun.github.io/blog/2013/05/08/using-sublime</id>
    <content type="html"><![CDATA[<p>SublimeText2 是我目前为止用过的最为强大的编辑器，支持但不限于 C, C++, C#, CSS, D, Erlang, HTML, Groovy, Haskell, HTML, Java, JavaScript, LaTeX, Lisp, Lua, Markdown, Matlab, OCaml, Perl, PHP, Python, R, Ruby, SQL, TCL, Textile and XML 等主流编程语言的语法高亮。拥有优秀的代码自动完成功能 (自动补齐括号，大括号等配对符号；自动补全已经出现的单词；自动补全函数名)，非常智能。 最重要的是这么一个原来高不可攀的“神器”，现在居然开源免费了，所以还不赶快试试：</p>

<!-- more -->


<h1>常用快捷键：</h1>

<h2>默认方式：</h2>

<ul>
<li>鼠标选中多行，按下 Ctrl+Shift+L    —->     同时编辑这些行</li>
<li>鼠标选中文本，反复按 CTRL+D       —->     继续向下同时选中下一个相同的文本进行同时编辑</li>
<li>鼠标选中文本，按下 Alt+F3             —->     一次性选择全部的相同文本进行同时编辑</li>
<li>Shift+鼠标右键/按住鼠标中键          —->     进行竖向多行选择</li>
<li>Ctrl+鼠标左键                                  —->     选择同时要编辑的多处文本</li>
<li>ctrl+L                                               —->     选择整行</li>
<li>ctrl+kk                                             —->     从光标处删除至行尾</li>
<li>ctrl+j                                                —->     合并行</li>
<li>ctrl+/                                               —->     注释整行</li>
<li>ctrl+y                                               —->    恢复撤销</li>
<li>ctrl+shift+enter                              —->     插入行前</li>
<li>shift+ctrl+上下键                            —->    光标与上/下行对调，非常实用</li>
<li>cmd+shift+d —-> Duplicate Line</li>
<li>ctrl+shift+w —-> Wrap Selection with Tag</li>
<li>cmd+r —-> Goto Symbol&hellip;</li>
<li>cmd+shift+t —-> Reopen Closed File</li>
<li>cmd+shift+p —-> Command Pallete</li>
</ul>


<h2>常用的Emment快捷键</h2>

<ul>
<li>ctrl+,                                                              ======> 选中标签的内容</li>
<li>shift+ctrl+;                                                   ======> 删除标签</li>
<li>shift+ctrl+r                                                   =====> 更新所有相同css属性的值(在css3中不需要在每个不同前缀都去修改了，非常好用)</li>
<li><p>选中某个css属性的数值，按ctrl+上下键     =====> 值增减1(类似chrome浏览器，非常棒)</p>

<h2>CodeIntel实用快捷键</h2></li>
<li><p>ctrl+鼠标点击某一变量                                 =====> 跳转至定义该变量的行</p></li>
</ul>


<h1>常用插件</h1>

<h3><a href="https://github.com/sergeche/emmet-sublime">Emmet</a>(原名为Zen Coding)</h3>

<p>一个用于HTML和CSS高效的编程的插件，只能在HTML或CSS文件中才能打开，原先zen coding需要按快捷键 ctrl+alt+enter才能运行，现在更新了另一种方式——直接在文本中输入zen coding的语句，然后按tag键就可以实现同样功能。</p>

<h3><a href="https://github.com/aaronpowell/sublime-jquery-snippets">jQuery-snippets</a></h3>

<p>这个插件提供jQuery的提示功能，不过每次提示都需要快捷键ctrl+shift+p上查找，不过如果和CodeIntel插件（下面说到）配合使用能互补不足，因为两个插件都有些jQuery代码缺少。</p>

<h3><a href="https://github.com/wbond/sublime_alignment">Alignment</a></h3>

<p>选定要对齐的行，按ctrl+alt+a</p>

<h3><a href="https://github.com/facelessuser/BracketHighlighter">BracketHighlighter</a></h3>

<p>高亮显示光标所在的括号和引号，类似于代码匹配，可以匹配括号，引号等符号内的范围</p>

<h3><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a></h3>

<p>粘贴板历史记录，方便使用复制/剪切的内容，快捷键ctrl+shift+v可调出该历史记录面板</p>

<h3><a href="https://github.com/kemayo/sublime-text-2-git">Git</a></h3>

<p>用法：在菜单上 Tools –> Git，可使用git的功能
git——大名鼎鼎的git，该插件可以实现大部分的git功能</p>

<h3><a href="https://github.com/Kronuz/SublimeCodeIntel">CodeIntel</a></h3>

<p>代码自动提示，支持大多数语言，能很好的提示大部分jquery函数</p>

<h1>如何安装插件</h1>

<p>最简单的方式就是到上面的插件网站上下载压缩包，然后手工拷贝到sublime得packages 目录下</p>

<blockquote><p>Preferences &ndash;> Browse Packages&hellip;</p></blockquote>

<p>但是sublime提供了更加简单和自动化的安装方式： <a href="http://wbond.net/sublime_packages/package_control">Package Control</a></p>

<blockquote><p>A full-featured package manager that helps discovering, installing, updating and removing packages for Sublime Text 2. It features an automatic upgrader and supports GitHub, BitBucket and a full channel/repository system.</p></blockquote>

<h2>安装 Package Control</h2>

<ul>
<li>Open Sublime Text 2 console:  <strong>ctrl+`</strong></li>
<li>将以下的命令粘贴到console中，并回车运行：  <br/>
  import urllib2,os; pf=&lsquo;Package Control.sublime-package&rsquo;; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),&lsquo;wb&rsquo;).write(urllib2.urlopen(&lsquo;<a href="http://sublime.wbond.net/">http://sublime.wbond.net/</a>&rsquo;+pf.replace(&lsquo; &rsquo;,&lsquo;%20&rsquo;)).read()); print(&lsquo;Please restart Sublime Text to finish installation&rsquo;)</li>
</ul>


<h2>通过 Package Control 安装插件</h2>

<ul>
<li>Open <strong>Command Pallete</strong> in sublime：    press <strong>ctrl+shift+p</strong> (Windows, Linux) or <strong>cmd+shift+p</strong> (OS X)</li>
<li>Enter <strong>Package Control: Install Package</strong> in the Command Pallete</li>
<li>Input/select the plugin name in the list of all available packages that are available for install.</li>
</ul>


<h1>参考资料：</h1>

<ul>
<li><a href="http://drewbarontini.com/setup/sublime-text/">Setup Sublime Text 2</a></li>
<li><a href="http://vtmerhome.com/2013/05/sublime-shortcuts-and-common-plug/">sublime快捷键及常用插件——工欲善其事，必先利其器</a></li>
<li><a href="http://www.iplaysoft.com/sublimetext.html/comment-page-1">Sublime Text 2 &ndash; 性感无比的代码编辑器！程序员必备神器！跨平台支持Win/Mac/Linux</a></li>
<li><a href="http://wbond.net/sublime_packages/package_control">Sublime Package Control</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress写博客]]></title>
    <link href="http://zjun.github.io/blog/2013/05/03/use-octopress-to-write-blog/"/>
    <updated>2013-05-03T21:06:19+08:00</updated>
    <id>http://zjun.github.io/blog/2013/05/03/use-octopress-to-write-blog</id>
    <content type="html"><![CDATA[<p><code>Octopress</code>是利用<code>Jekyll</code>博客引擎开发的一个博客系统，生成的静态页面能够很好的在github page上展现。号称是hacker专属的一个博客系统(<code>A blogging framework for hackers.</code>)
本文就来介绍一下如何利用Octopress搭建一个Github博客。本文需要读者熟悉一些shell命令，并掌握基本的git操作。</p>

<!--more-->


<h2>1. 安装 Ruby</h2>

<p>Octopress需要Ruby环境，RVM(Ruby Version Manager)负责安装和管理Ruby的环境。所以我们先在终端输入如下命令，来安装RVM：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">curl -L https://get.rvm.io | bash -s stable --ruby  </span>
</span></code></pre></td></tr></table></div></figure>


<p>
接着安装Ruby 1.9.3，在终端依次运行如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rvm install 1.9.3  </span>
</span><span class='line'><span class="go">rvm use 1.9.3  </span>
</span><span class='line'><span class="go">rvm rubygems latest  </span>
</span></code></pre></td></tr></table></div></figure>


<p>
完成上面的操作之后，运行<code>ruby --version</code>确认ruby 1.9.3环境已经安装好了。</p>

<p>参考: <a href="http://octopress.org/docs/setup/rvm/">Installing Ruby With RVM</a></p>

<h2>2. 安装Octopress</h2>

<p>在安装Octopress之前，需要安装有<code>git</code>了，在终端输入<code>git --version</code>，可以看到电脑中的git版本，如果没有显示相关内容，请先安装<a href="http://git-scm.com/">git</a>。</p>

<p>git安装之后，利用git命令将octopress从github上clone到本机，如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git clone git://github.com/imathis/octopress.git octopress  </span>
</span><span class='line'><span class="go">cd octopress    # If you use RVM, You&#39;ll be asked if you trust the .rvmrc file (say yes).  </span>
</span><span class='line'><span class="go">ruby --version  # Should report Ruby 1.9.3  </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在安装相关依赖项之前，最好把<code>gem sources</code>改成淘宝的resource：</p>

<blockquote><p>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。所以你会与遇到 <code>gem install rack</code> 或 <code>bundle install</code> 的时候半天没有响应，具体可以用 <code>gem install rails -V</code> 来查看执行过程。</p></blockquote>

<p>通过一下命令修改gem sources:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> gem sources --remove https://rubygems.org/
</span><span class='line'><span class="gp">$</span> gem sources -a https://ruby.taobao.org/
</span><span class='line'><span class="gp">$</span> gem sources -l
</span><span class='line'><span class="go">*** CURRENT SOURCES *** </span>
</span><span class='line'>
</span><span class='line'><span class="go">https://ruby.taobao.org  </span>
</span><span class='line'><span class="gp">#</span> 请确保只有 ruby.taobao.org
</span><span class='line'><span class="gp">$</span> gem install rails
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>参考： <a href="http://ruby.taobao.org/">RubyGems 镜像 &ndash; 淘宝网</a></p>

<p>接着安装相关依赖项：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">gem install bundler  </span>
</span><span class='line'><span class="go">rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command  </span>
</span><span class='line'><span class="go">bundle install  </span>
</span></code></pre></td></tr></table></div></figure>


<p>最后安装默认的Octopress 主题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rake install</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以安装定制的主题，我安装的是这个主题: <a href="https://github.com/kAworu/octostrap3">octostrap3</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">  % cd octopress   </span>
</span><span class='line'><span class="go">  % git clone https://github.com/kAworu/octostrap3 .themes/octostrap3  </span>
</span><span class='line'><span class="go">  % rake &#39;install[octostrap3]&#39;  </span>
</span><span class='line'><span class="go">  % rake generate  </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>参考：<a href="http://octopress.org/docs/setup/">Octopress Setup</a></p>

<h2>3. 配置Octopress</h2>

<p>Octopress的作者已经尽量让配置简化了。大多数情况下只需要配置<code>_config.yml</code>和<code>Rakefile</code>文件即可。其中Rakefile是跟博客部署相关，一般情况下并不需要修改这个文件，除非使用了rsync。</p>

<p>config.yml是博客重要的一个配置文件，在config.yml文件中有三大配置项：<code>Main Configs</code>、<code>Jekyll &amp; Plugins</code>和<code>3rd Party Settings</code>。</p>

<p>一般，该文件中其中url是必须要填写的，这里的url是在github上创建的一个仓库地址，具体请看第四步中创建的地址。另外再修改一下<code>title</code>、<code>subtitle</code>和<code>author</code>，根据需求，在开启一些第三方组件服务。</p>

<p>关于_config.yml文件中的更多内容，请看这里的内容：<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a></p>

<p>建议：最好把里面的google+ 和 twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。</p>

<h2>4. 部署到GitHub上</h2>

<p>Github的<code>[Page service](http://pages.github.com/)</code>可以免费托管博客，并且还可以自定义域名。</p>

<p>首先需要在GitHub上<code>[创建一个仓库](https://github.com/new)</code>，并将仓库名称按照这样的方式进行命名：<code>username.github.com</code>。等后面配置完毕之后，我们就可以在浏览器中使用页面地址<code>http://username.github.com</code>来访问我们的博客。一般来说，博客的源码放到source分支下，生成的内容提交到master分支。</p>

<p>创建好仓库之后，我们需要利用octopress的一个<code>配置rake任务</code>来自动配置上面创建的仓库：可以让我们方便的部署GitHub page。在终端输入如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
上面的命令会做一些事情(详细介绍看下面给出的参考链接)。其中最主要的就是创建一个<code>_deploy</code>目录，目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。</p>

<p>完成上面的命令之后，我们就可以生成博客并真正的部署到仓库中了。执行如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rake generate  </span>
</span><span class='line'><span class="go">rake deploy  </span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的命令首先生成博客文件，并将生成的博客文件拷贝到<code>_deploy/</code>目录下，然后将这些内容添加到git中，并commit和push到仓库的master分支。</p>

<p>现在可以访问<code>http://username.github.com</code>了。注意：有时候可能会有延时，要等几分钟才能打开。</p>

<p>至此，我们的博客已经完成基本的部署，不过博客的source需要单独提交，执行如下命令就可以将source提交到仓库的source分支下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> git add .
</span><span class='line'><span class="gp">$</span> git commit -m <span class="s1">&#39;Initial source commit&#39;</span>
</span><span class='line'><span class="gp">$</span> git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入<code>rake preview</code>命令，然后就能在浏览器中进行本地预览访问了：<code>http://127.0.0.1:4000/</code>或<code>http://localhost:4000/</code>，效果跟仓库中的一样。
参考：<a href="http://octopress.org/docs/deploying/">Deploying to Github Pages</a></p>

<h3>Update:</h3>

<p>推送是出现下面错误：</p>

<blockquote><p>## Pushing generated _deploy website<br/>
To git@github.com:GinSmile/ginsmile.github.io.git<br/>
! [rejected]        master &ndash;> master (non-fast-forward)<br/>
error: 无法推送一些引用到 &lsquo;git@github.com:GinSmile/ginsmile.github.io.git&#8217;<br/>
提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。<br/>
提示：再次推送前，先与远程变更合并（如 &#8216;git pull &hellip;&#8217;）。详见<br/>
提示：&#8217;git push &mdash;help&rsquo; 中的 &lsquo;Note about fast-forwards&rsquo; 小节。</p></blockquote>

<p>在这里找到解决办法： <a href="http://ginsmile.github.io/blog/2013/08/29/octopressbo-ke-ji-qiao/#.U5M_X3WSxhE">Octopress博客技巧</a></p>

<p>修改RakeFile文件（Octopress目录下）来强制推送，这里参考了stackoverflow的解决办法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">system &quot;git push origin #{deploy_branch}&quot;   </span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">system &quot;git push origin +#{deploy_branch}&quot;   </span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：此方法使强制推送，会删除GitHub上的所有的本地分支没有的提交。记住推送完毕后再把RakeFile文件改回来。</p>

<h2>5. 写博客</h2>

<p>Octopress中文章存储在<code>source/_posts</code>目录下，并且需要按照Jekyll的命名规范对文章进行命名：<code>YYYY-MM-DD-post-title.markdown</code>。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。</p>

<p>通过一下命令，可以正确的按照命名规范创建一个博文，并且在博文中会附带常用的一些yaml元数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<<<<<<< HEAD
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rake generate  </span>
</span><span class='line'><span class="go">rake deploy    </span>
=======
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rake new_post[&quot;title&quot;]   </span>
>>>>>>> d0250ae17e26b35f4d4232608447ac2ba34f9d33
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
其中title为博文的文件名，创建出来的文件默认是markdown格式。上面的命令会创建出这样一个文件：<code>source/_posts/2013-05-03-title.markdown</code>。打开这个文件，可以看到里面有如下一些内容了(告诉Jekyll博客引擎如何处理博文和页面)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">---  </span>
</span><span class='line'><span class="go">layout: post  </span>
</span><span class='line'><span class="go">title: &quot;title&quot;</span>
</span><span class='line'><span class="go">date: 2013-05-03 16:36  </span>
</span><span class='line'><span class="go">comments: true  </span>
</span><span class='line'><span class="go">categories:   </span>
</span><span class='line'><span class="go">---  </span>
</span></code></pre></td></tr></table></div></figure>


<p>接着就可以在这个文件中写博文了。</p>

<p>完成之后，我们可以预览和部署博文。下面是创建并部署博文的一个完整过程：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> rake new_post<span class="o">[</span><span class="s2">&quot;New Post&quot;</span><span class="o">]</span>
</span><span class='line'><span class="gp">$</span> rake generate
</span><span class='line'><span class="gp">$</span> git add .
</span><span class='line'><span class="gp">$</span> git commit -am <span class="s2">&quot;Some comment here.&quot;</span>
</span><span class='line'><span class="gp">$</span> git push origin <span class="nb">source  </span>
</span><span class='line'><span class="gp">$</span><span class="nb"> </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>参考：<a href="http://octopress.org/docs/blogging/">Blogging Basics</a></p>

<<<<<<< HEAD
<h2>6. 在另一台电脑上重建Octopress</h2>

<p>Octopress的repositories中有两个分支：<code>source</code> and <code>master</code>.</p>

<p>其中<code>source</code>分支存储的是生成静态文件的原始文件，<code>master</code>存储的是生成的静态文件本身.</p>

<p>所以在另一台电脑上恢复Octopress的时候也要分两步进行恢复：</p>

<h3>clone <code>source</code>分支</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git clone -b source git@github.com:username/username.github.com.git octopress  </span>
</span></code></pre></td></tr></table></div></figure>


<h3>clone <code>master</code>分支</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">cd octopress  </span>
</span><span class='line'><span class="go">git clone git@github.com:username/username.github.com.git _deploy   </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Setup github pages</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">gem install bundler  </span>
</span><span class='line'><span class="gp">$</span> bundle install
</span><span class='line'><span class="gp">$</span> rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<h3>在两台电脑之间同步</h3>

<h4>1. push on 1 machine</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> rake generate
</span><span class='line'><span class="gp">$</span> git add .
</span><span class='line'><span class="gp">$</span> git commit -am <span class="s2">&quot;Some comment here.&quot;</span>
</span><span class='line'><span class="gp">$</span> git push origin <span class="nb">source</span>  <span class="c"># update the remote source branch   </span>
</span><span class='line'><span class="gp">$</span> rake deploy             <span class="c"># update the remote master branch  </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>2. pull on the other machine</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nb">cd </span>octopress
</span><span class='line'><span class="gp">$</span> git pull origin <span class="nb">source</span>  <span class="c"># update the local source branch  </span>
</span><span class='line'><span class="gp">$</span> <span class="nb">cd</span> ./_deploy
</span><span class='line'><span class="gp">$</span> git pull origin master  <span class="c"># update the local master branch  </span>
</span></code></pre></td></tr></table></div></figure>


<p>参考： <a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone Your Octopress to Blog From Two Places</a></p>

<h2>7. 小结：常用命令</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rake generate  # 生成静态页面   </span>
</span><span class='line'><span class="go">rake preview   # 本地预览: http://localhost:4000   </span>
</span><span class='line'><span class="go">rake deploy    # 发布到github  </span>
</span><span class='line'><span class="go">rake new_post[&quot;title&quot;]   # 新建文章</span>
</span><span class='line'><span class="go">  </span>
</span><span class='line'><span class="go"> # 以下命令将source  push 到github  </span>
</span><span class='line'><span class="go">git add .   </span>
</span><span class='line'><span class="go">git commit -m &#39;Initial source commit&#39;    </span>
</span><span class='line'><span class="go">git push origin source    </span>
</span><span class='line'>
</span><span class='line'><span class="go"> # 以下命令将source pull 到本地</span>
</span><span class='line'><span class="go">git pull origin source  # update the local source branch  </span>
</span><span class='line'><span class="go">cd ./_deploy  </span>
</span><span class='line'><span class="go">git pull origin master  # update the local master branch  </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>8. 参考资料</h2>
=======
<h2>6. 参考资料</h2>
>>>>>>> d0250ae17e26b35f4d4232608447ac2ba34f9d33

<ul>
<li><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">利用Octopress搭建一个Github博客</a></li>
<li><a href="http://www.yangzhiping.com/tech/octopress.html">Ruby开源项目介绍(1)：octopress——像黑客一样写博客</a></li>
<li><a href="http://www.lijinma.com/blog/2013/01/23/move-from-wordpress-to-octopress/">博客搬家：从Wordpress迁移到octopress</a></li>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">象写程序一样写博客：搭建基于github的博客</a></li>
<li><a href="http://kaworu.github.io/octopress/setup/install/">Octopress3</a></li>
<li><a href="http://ginsmile.github.io/blog/2013/08/29/octopressbo-ke-ji-qiao/#.U5M_X3WSxhE">Octopress博客技巧</a></li>
<<<<<<< HEAD
<li><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone Your Octopress to Blog From Two Places</a></li>
=======
>>>>>>> d0250ae17e26b35f4d4232608447ac2ba34f9d33
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HighCharts 笔记2：通过表格生成Pie Chart]]></title>
    <link href="http://zjun.github.io/blog/2013/04/01/highcharts-2-piechart/"/>
    <updated>2013-04-01T15:49:00+08:00</updated>
    <id>http://zjun.github.io/blog/2013/04/01/highcharts-2-piechart</id>
    <content type="html"><![CDATA[<p>接上一篇 <a href="http://zjun.github.com/2013/03/28/highcharts-json-dataformat/">HighCharts笔记之: Bar Chart</a>，这一篇继续记录在项目中使用 Pie Chart 的情况,只是自己的一点总结和记录，以备日后翻阅。这一次是通过页面上的表格(Table)数据，生成对应的饼图（Pie Chart），具体实现如下：</p>

<blockquote><p><strong>Highcharts</strong> 是一个用纯JavaScript编写的一个图表库, 能够很简单便捷的在web网站或是web应用程序添加有交互性的图表，并且免费提供给个人学习、个人网站和非商业用途使用。目前HighCharts支持的图表类型有曲线图、区域图、柱状图、饼状图、散状点图和综合图表。
HighCharts界面美观，由于使用JavaScript编写，所以不需要像Flash和Java那样需要插件才可以运行，而且运行速度快。另外HighCharts还有很好的兼容性，能够完美支持当前大多数浏览器。</p></blockquote>

<!-- more -->


<h3>Pie Chart</h3>

<p><img src="http://farm9.staticflickr.com/8539/8609442562_2945899e60.jpg" alt="" /></p>

<h3>HTML Code</h3>

<pre><code>&lt;body&gt;

    &lt;div class="modal-header"&gt;
        &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
        &lt;h3 id="myModalLabel"&gt;${title}&lt;/h3&gt;
    &lt;/div&gt;
    &lt;div class="modal-body"&gt;
        &lt;div id="container2" style="width: 100%; height: 280px"&gt;&lt;/div&gt;

        &lt;table id="datatable" class="table table-striped table-bordered table-hover table-condensed"&gt;
            &lt;thead&gt;
                &lt;tr&gt;
                     &lt;th&gt;User&lt;/th&gt;
                     &lt;th&gt;${title}&lt;/th&gt;
                &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
                &lt;c:forEach items="${userSum}" var="item"&gt;
                &lt;tr&gt;
                    &lt;th&gt;${item.user }&lt;/th&gt;
                    &lt;td&gt;${item.sum }&lt;/td&gt;
                &lt;/tr&gt;
                &lt;/c:forEach&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
    &lt;div class="modal-footer"&gt;
        &lt;button class="btn" data-dismiss="modal" aria-hidden="true"&gt;Close&lt;/button&gt;
    &lt;/div&gt;

&lt;/body&gt;
</code></pre>

<h3>Javascript Code</h3>

<pre><code>var chart;
Highcharts.visualize = function(table, options) {

    // the data series
    options.series = [];
    var l= options.series.length; 
    options.series[l] = {
      name: '${title}',
      data: []
    };

    $('tbody tr', table).each( function(i) {
        var tr = this;
        var th = $('th', tr).text();
        var td =parseFloat($('td', tr).text());
        options.series[0].data.push({name:th,y:td});
    });
    chart = new Highcharts.Chart(options);
}

// On document ready, call visualize on the datatable.
$(document).ready(function() {         
   var table = document.getElementById('datatable'),
   options = {
         chart: {
            renderTo: 'container2',
            defaultSeriesType: 'pie'
         },
         title: {
            text: '${title}'
         },
         tooltip: {
            formatter: function() {
               return '&lt;b&gt;'+ this.series.name +'&lt;/b&gt;&lt;br/&gt;'+
               this.point.name +' '+ this.y;
            }
         },
         plotOptions: {
             pie: {
                 allowPointSelect: true,
                 cursor: 'pointer'
             }
         }
      };


   Highcharts.visualize(table, options);
});
</code></pre>

<p>这种做法在 Coding 时会更简洁，但在实际运行时效率不高，因为 Pie Chart 需要等待页面上的数据都生成时才能呈现，所以总是给用户一种迟滞感，所以个人感觉还是通过 JSon 的方式生成图表更好（更快）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HighCharts笔记之: Bar Chart]]></title>
    <link href="http://zjun.github.io/blog/2013/03/28/highcharts-json-dataformat/"/>
    <updated>2013-03-28T16:52:00+08:00</updated>
    <id>http://zjun.github.io/blog/2013/03/28/highcharts-json-dataformat</id>
    <content type="html"><![CDATA[<p>最近需要做一些Web图标，研究了几个开源的第三方工具后，最后决定使用<strong>HighCharts</strong>开发：</p>

<p><strong>Highcharts</strong> 是一个用纯JavaScript编写的一个图表库, 能够很简单便捷的在web网站或是web应用程序添加有交互性的图表，并且免费提供给个人学习、个人网站和非商业用途使用。目前HighCharts支持的图表类型有曲线图、区域图、柱状图、饼状图、散状点图和综合图表。
HighCharts界面美观，由于使用JavaScript编写，所以不需要像Flash和Java那样需要插件才可以运行，而且运行速度快。另外HighCharts还有很好的兼容性，能够完美支持当前大多数浏览器。</p>

<p>HighCharts 可以通过JSON 数据格式与后台交互，从而生成动态的图表。但是在官方的文档中关于 JSON 数据格式的资料很少，经过一下午的调试终于找到了关于柱状图和饼图的数据格式，在这里记录一下，以备后续的查询：</p>

<!-- more -->


<h2>柱状图：</h2>

<p><img src="http://farm9.staticflickr.com/8382/8596618053_22114c25cc_b.jpg" alt="" />
JSON Data</p>

<pre><code>[
    {
        "data":[0,0,0,0,0,0,0,0,9,0,0,1],
        "name":"Actual"
    },
    {
        "data":[1,1,1,4,1,1,1,1,12,1,3,6],
        "name":"Target"
    }
]
</code></pre>

<p>Javascript code</p>

<pre><code>&lt;script type="text/javascript"&gt;
    $(function () {
        var options = {
            chart: {

                renderTo: 'container',
                defaultSeriesType: 'bar'
            },
            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            xAxis: {
                categories: ['Activity Entry', 'Activity Update', 'Blog Entry', 'Blog Comments', 'Feed','Bookmark','File','Forum Topic','Forum Reply','Wiki','Ram','Liquid'],
                title: {
                    text: null
                }
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Units',
                    align: 'high'
                },
                labels: {
                    overflow: 'justify'
                }
            },
            tooltip: {
                formatter: function() {
                    return ''+
                        this.series.name +': '+ this.y;
                }
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true
                    }
                }
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'top',
                x: -100,
                y: 100,
                floating: true,
                borderWidth: 1,
                backgroundColor: '#FFFFFF',
                shadow: true
            },
            credits: {
                enabled: false
            },
            series: []
        };

        $.getJSON('&lt;c:url value="/action.do?method=barChart"/&gt;', function(json) {
                options.series = json;//options.series.push(json);  
                //console.log("JSON: " + JSON.stringify(options));
                //console.log("Render to element with ID : " + options.chart.renderTo);
                //console.log("Number of matching dom elements : " + $("#" + options.chart.renderTo).length);
                new Highcharts.Chart(options);
            }).error(function() {console.log('error');});

        $("a[data-toggle=modal]").click(function(){
            var target = $(this).attr('data-target');
            var url = $(this).attr('href');
            $(target).innerHTML='';
            $(target).load(url);
        });    
    });
&lt;/script&gt;  
</code></pre>

<p>HTML</p>

<pre><code>&lt;div id="container" style="width: 100%; height: 400px"&gt;&lt;/div&gt;
</code></pre>

<p>Java Code &ndash; Action</p>

<pre><code>public ActionForward barChart(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("application/json;charset=utf-8");

        List&lt;Bar&gt; resultList = getBarData();
        JSONArray json = new JSONArray(resultList);
        String result = json.toString();// 转成json数据

        PrintWriter out = response.getWriter();
        out.write(result);
        out.flush();
        out.close();

        return null;
    }

    private List&lt;Bar&gt; getBarData() {
        BlueCommunity target = dao.getLatestTarget();
        BlueCommunity actual = dao.sumLatestActual();

        List&lt;Bar&gt; resultList = new ArrayList&lt;Bar&gt;();
        if (actual != null) {
            resultList.add(new Bar("Actual", actual.getValueArray()));
        } else {
            resultList.add(new Bar("Actual", new int[] { 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0 }));
        }
        resultList.add(new Bar("Target", target.getValueArray()));

        return resultList;
}
</code></pre>

<p>Java Code &ndash; Bar class</p>

<pre><code>public class Bar {

    private static final long serialVersionUID = 6461863786317563773L;

    private String name;
    private int[] data;

    public Bar() {
    };

    public Bar(String name, int[] data) {
        this.name = name;
        this.data = data;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int[] getData() {
        return data;
    }

    public void setData(int[] data) {
        this.data = data;
    }

}
</code></pre>

<p>Java Code &ndash; Community class</p>

<pre><code>public class Community implements Serializable {

    private static final long serialVersionUID = -7516165631503337884L;

    private int id;
    private int version;
    private String remark;
    private int activity_entry;
    private int activity_update;
    private int blog_entry;
    private int blog_comments;
    private int feed;
    private int bookmark;
    private int file;
    private int forum_topic;
    private int forum_reply;
    private int wiki;
    private int iRam;
    private int liquid;
    private int user;

    ...
    getters;
    setters;
    ...

    public int[] getValueArray() {
        int[] array = { activity_entry, activity_update, blog_entry,
                blog_comments, feed, bookmark, file, forum_topic, forum_reply,
                wiki, iRam, liquid };
        return array;
    }

}
</code></pre>
]]></content>
  </entry>
  
</feed>

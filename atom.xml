<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莫名.堂</title>
  
  <subtitle>虽不能至，心向往之</subtitle>
  <link href="https://zjun.github.io/atom.xml" rel="self"/>
  
  <link href="https://zjun.github.io/"/>
  <updated>2023-11-10T09:46:39.137Z</updated>
  <id>https://zjun.github.io/</id>
  
  <author>
    <name>zJun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring 全局异常处理</title>
    <link href="https://zjun.github.io/article/4f203cd3.html"/>
    <id>https://zjun.github.io/article/4f203cd3.html</id>
    <published>2019-08-10T14:50:51.000Z</published>
    <updated>2023-11-10T09:46:39.137Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;SpringBoot中有一个&lt;code&gt;ControllerAdvice&lt;/code&gt;的注解，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用&lt;code&gt;ExceptionHandler&lt;/code&gt;注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处</summary>
      
    
    
    
    <category term="后端开发" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Spring" scheme="https://zjun.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring中AOP的简单使用</title>
    <link href="https://zjun.github.io/article/e00c1c2.html"/>
    <id>https://zjun.github.io/article/e00c1c2.html</id>
    <published>2019-05-20T08:40:52.000Z</published>
    <updated>2023-11-10T09:43:51.754Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是AOP&quot;&gt;&lt;a href=&quot;#什么是AOP&quot; class=&quot;headerlink&quot; title=&quot;什么是AOP&quot;&gt;&lt;/a&gt;什么是AOP&lt;/h1&gt;&lt;p&gt;AOP （&lt;a class=&quot;link&quot;   href=&quot;https://so.csdn.net/so/se</summary>
      
    
    
    
    <category term="后端开发" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Spring" scheme="https://zjun.github.io/tags/Spring/"/>
    
    <category term="AOP" scheme="https://zjun.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>创建单例模式的几种方式</title>
    <link href="https://zjun.github.io/article/6492d903.html"/>
    <id>https://zjun.github.io/article/6492d903.html</id>
    <published>2015-11-20T13:11:51.000Z</published>
    <updated>2023-11-21T09:17:40.591Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;单例模式可能是最常用到的设计模式了，但是想要正确的使用单例模式却并不简单。&lt;br&gt;我们先从最简单最常用的方式开始：&lt;/p&gt;
&lt;h1 id=&quot;懒汉式&quot;&gt;&lt;a href=&quot;#懒汉式&quot; class=&quot;headerlink&quot; title=&quot;懒汉式&quot;&gt;&lt;/a&gt;懒汉式&lt;/h1&gt;&lt;div</summary>
      
    
    
    
    <category term="架构设计" scheme="https://zjun.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计模式" scheme="https://zjun.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring Data JPA 简化持久层的开发</title>
    <link href="https://zjun.github.io/article/29fea7b8.html"/>
    <id>https://zjun.github.io/article/29fea7b8.html</id>
    <published>2013-12-03T13:06:19.000Z</published>
    <updated>2023-11-10T09:42:46.021Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近看到&lt;a class=&quot;link&quot;   href=&quot;http://www.springside.org.cn/&quot; &gt;SpringSide &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square fa-sm&quot;&gt;&lt;/i&gt;&lt;/a&gt;最新版的&lt;a class=&quot;link&quot;   href=&quot;https://github.com/springside/springside4/wiki/Design&quot; &gt;技术选型 &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square fa-sm&quot;&gt;&lt;/i&gt;&lt;/a&gt;中提到了&lt;a class=&quot;link&quot;   href=&quot;http://www.springsource.org/spring-data/jpa&quot; &gt;Spring Data JPA &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square fa-sm&quot;&gt;&lt;/i&gt;&lt;/a&gt;,号称只需要实现接口就可以实现大部分操作。真有怎么神奇？于是Google一番，果然好使，在这里记录一下：&lt;/p&gt;</summary>
    
    
    
    <category term="后端开发" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Spring" scheme="https://zjun.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>把Raspberry Pi打造成 Web Server</title>
    <link href="https://zjun.github.io/article/ddf385ff.html"/>
    <id>https://zjun.github.io/article/ddf385ff.html</id>
    <published>2013-09-17T13:06:19.000Z</published>
    <updated>2023-11-24T16:19:53.892Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Setup-Raspberry-Pi&quot;&gt;&lt;a href=&quot;#Setup-Raspberry-Pi&quot; class=&quot;headerlink&quot; title=&quot;Setup Raspberry Pi&quot;&gt;&lt;/a&gt;Setup Raspberry Pi&lt;/h2&gt;&lt;h3 id=&quot;安</summary>
      
    
    
    
    <category term="Others" scheme="https://zjun.github.io/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>关于 Java String 内存管理的几个有趣的例子</title>
    <link href="https://zjun.github.io/article/ae982c1d.html"/>
    <id>https://zjun.github.io/article/ae982c1d.html</id>
    <published>2013-05-30T13:06:19.000Z</published>
    <updated>2023-11-10T09:42:20.381Z</updated>
    
    
    <summary type="html">&lt;p&gt;今天在 &lt;a class=&quot;link&quot;   href=&quot;http://www.oschina.net/&quot; &gt;OSChina &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square fa-sm&quot;&gt;&lt;/i&gt;&lt;/a&gt; 上看到一篇有趣的文章：&lt;a class=&quot;link&quot;   href=&quot;http://my.oschina.net/u/551903/blog/134000&quot; &gt;关于String内存分配的深入探讨 &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square fa-sm&quot;&gt;&lt;/i&gt;&lt;/a&gt;,文章通过几个简单的例子，把Java中String的内存管理的方式解释的很清楚，涨了不少姿势，现根据自己的理解做些笔记在这里：&lt;/p&gt;</summary>
    
    
    
    <category term="后端开发" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://zjun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程笔记：线程管理</title>
    <link href="https://zjun.github.io/article/2cf8f79a.html"/>
    <id>https://zjun.github.io/article/2cf8f79a.html</id>
    <published>2012-05-02T08:52:00.000Z</published>
    <updated>2023-11-24T16:20:30.584Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建线程&quot;&gt;&lt;a href=&quot;#创建线程&quot; class=&quot;headerlink&quot; title=&quot;创建线程&quot;&gt;&lt;/a&gt;创建线程&lt;/h2&gt;&lt;p&gt;两种方法：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过直接继承thread类，然后覆盖run()方法;&lt;/li&gt;
&lt;li&gt;构建一个实</summary>
      
    
    
    
    <category term="后端开发" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="并发编程" scheme="https://zjun.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Find duplicate records in text file</title>
    <link href="https://zjun.github.io/article/2f7dbe20.html"/>
    <id>https://zjun.github.io/article/2f7dbe20.html</id>
    <published>2012-04-11T08:52:00.000Z</published>
    <updated>2023-11-24T16:21:26.666Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h2&gt;&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Txt&quot;&gt;&lt;figu</summary>
      
    
    
    
    <category term="Others" scheme="https://zjun.github.io/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>Hibernate中的关系映射</title>
    <link href="https://zjun.github.io/article/9d09cd01.html"/>
    <id>https://zjun.github.io/article/9d09cd01.html</id>
    <published>2007-03-11T13:03:41.000Z</published>
    <updated>2023-11-11T13:13:34.083Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多对多&quot;&gt;&lt;a href=&quot;#多对多&quot; class=&quot;headerlink&quot; title=&quot;多对多&quot;&gt;&lt;/a&gt;多对多&lt;/h1&gt;&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Java&quot;&gt;&lt;figure class=&quot;iseeu</summary>
      
    
    
    
    <category term="后端开发" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="hibernate" scheme="https://zjun.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>剔除List中的重复值</title>
    <link href="https://zjun.github.io/article/59d39a85.html"/>
    <id>https://zjun.github.io/article/59d39a85.html</id>
    <published>2007-01-18T05:48:00.000Z</published>
    <updated>2023-11-24T16:22:08.610Z</updated>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;方法一：循环元素删除&quot;&gt;&lt;a href=&quot;#方法一：循环元素删除&quot; class=&quot;headerlink&quot; title=&quot;方法一：循环元素删除&quot;&gt;&lt;/a&gt;方法一：循环元素删除&lt;/h3&gt;&lt;div class=&quot;highlight-container&quot; data-rel</summary>
      
    
    
    
    <category term="后端开发" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://zjun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate中的继承关系</title>
    <link href="https://zjun.github.io/article/10d51e8f.html"/>
    <id>https://zjun.github.io/article/10d51e8f.html</id>
    <published>2006-08-16T07:15:00.000Z</published>
    <updated>2023-11-24T16:22:39.674Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;Hibernate中支持3种形式实现继承关系：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Table per concrete class&lt;/strong&gt; 表与子类之间独立一对一关系  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Table per subclass&lt;/str</summary>
      
    
    
    
    <category term="后端开发" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="hibernate" scheme="https://zjun.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>配置Log4j</title>
    <link href="https://zjun.github.io/article/eefb8f1c.html"/>
    <id>https://zjun.github.io/article/eefb8f1c.html</id>
    <published>2006-06-28T08:42:00.000Z</published>
    <updated>2023-11-09T13:13:30.525Z</updated>
    
    
    <summary type="html">&lt;p&gt;Log4J的配置文件(Configuration File)就是用来设置记录器的级别、存放器和布局的，它可接key&amp;#x3D;value格式的设置或xml格式的设置信息。通过配置，可以创建出Log4J的运行环境。&lt;/p&gt;</summary>
    
    
    
    <category term="Others" scheme="https://zjun.github.io/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>java中的观察者模式(Observer)</title>
    <link href="https://zjun.github.io/article/368d2438.html"/>
    <id>https://zjun.github.io/article/368d2438.html</id>
    <published>2006-05-18T02:54:00.000Z</published>
    <updated>2023-11-24T16:23:02.878Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;Java作为一种面向对象的开发语言，对实现设计模式提供了良好的支持，并且提供了许多默认的实现，比如：通过Java中的&lt;strong&gt;Observable类&lt;/strong&gt;和&lt;strong&gt;Observer接口&lt;/strong&gt;可以方便的实现观察者模式。&lt;/p&gt;
&lt;p&gt;下面</summary>
      
    
    
    
    <category term="架构设计" scheme="https://zjun.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计模式" scheme="https://zjun.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java中的Proxy模式(续)</title>
    <link href="https://zjun.github.io/article/df437fb5.html"/>
    <id>https://zjun.github.io/article/df437fb5.html</id>
    <published>2006-04-12T03:06:00.000Z</published>
    <updated>2023-11-24T16:23:19.395Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;a href=&quot;https://zjun.github.io/article/46390b53.html&quot;&gt;上一篇随笔&lt;/a&gt; 中,由于时间和篇幅的关系只是简单介绍了Proxy模式的概念,并没有写到Java中对Proxy模式特有的支持,所以严格说起来是有点”名不符实”</summary>
      
    
    
    
    <category term="架构设计" scheme="https://zjun.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计模式" scheme="https://zjun.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java中的Proxy模式</title>
    <link href="https://zjun.github.io/article/46390b53.html"/>
    <id>https://zjun.github.io/article/46390b53.html</id>
    <published>2006-03-21T15:34:00.000Z</published>
    <updated>2023-11-24T16:23:35.995Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是代理模式&quot;&gt;&lt;a href=&quot;#什么是代理模式&quot; class=&quot;headerlink&quot; title=&quot;什么是代理模式&quot;&gt;&lt;/a&gt;什么是代理模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;代理（Proxy）模式&lt;/strong&gt;，顾名思义就是对象之间不直接发生联系，而是通</summary>
      
    
    
    
    <category term="架构设计" scheme="https://zjun.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计模式" scheme="https://zjun.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>为程序加上关闭钩子(ShutdownHook)</title>
    <link href="https://zjun.github.io/article/31eff00a.html"/>
    <id>https://zjun.github.io/article/31eff00a.html</id>
    <published>2006-03-12T15:38:00.000Z</published>
    <updated>2023-11-24T16:23:59.740Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;“&lt;strong&gt;关闭钩子&lt;/strong&gt;”（ShutdownHook）是这样一个概念：向虚拟机注册一个线程，当程序退出(Ctrl+C)时虚拟机会启动这个线程,我们可以在这个线程的run()中做一些清除的工作,如:&lt;strong&gt;释放数据库连接,关闭文件&lt;/strong&gt;</summary>
      
    
    
    
    <category term="后端开发" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://zjun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中的继承关系</title>
    <link href="https://zjun.github.io/article/5d2ba95e.html"/>
    <id>https://zjun.github.io/article/5d2ba95e.html</id>
    <published>2006-03-06T13:06:32.000Z</published>
    <updated>2023-11-24T16:24:26.844Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;意译自KevLinDev上一篇文章，才疏学浅，望指正，英文原文可到&lt;a class=&quot;link&quot;   href=&quot;http://www.kevlindev.com/tutorials/javascript/inheritance/&quot; &gt;这里 &lt;i class=&quot;fa-reg</summary>
      
    
    
    
    <category term="前端开发" scheme="https://zjun.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="javascript" scheme="https://zjun.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>将Java应用注册为后台服务</title>
    <link href="https://zjun.github.io/article/d531bfa2.html"/>
    <id>https://zjun.github.io/article/d531bfa2.html</id>
    <published>2006-02-28T14:57:00.000Z</published>
    <updated>2023-11-24T16:24:51.026Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;项目中有一个java应用程序，交付后用户要求要把这个程序做成后台服务程序，即：系统启动后该程序可以自动启动，并且在前台不要出现运行窗口，维护人员只要在“服务管理”(Windows)中选择启动或停止即可.&lt;br&gt;解决办法如下：&lt;/p&gt;
&lt;h2 id=&quot;Linux&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="后端开发" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://zjun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>DisplayTag 1.1 Released, 可分页读取数据！！！</title>
    <link href="https://zjun.github.io/article/25204a98.html"/>
    <id>https://zjun.github.io/article/25204a98.html</id>
    <published>2006-02-27T12:21:00.000Z</published>
    <updated>2023-11-24T16:25:07.666Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;DisplayTag一直以来为人们所诟病的缺点就是它的装载数据的方式: &lt;strong&gt;一次性把所有数据读取到内存中，然后再分页显示&lt;/strong&gt;。这样做的后果就是在处理大批量数据时力不从心,可用性急剧下降,并且在翻页显示的仅仅是内存中的数据而不是实时数据.因此人们往往</summary>
      
    
    
    
    <category term="前端开发" scheme="https://zjun.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
</feed>

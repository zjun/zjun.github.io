<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莫名.堂</title>
  
  <subtitle>虽不能至，心向往之</subtitle>
  <link href="https://zjun.github.io/atom.xml" rel="self"/>
  
  <link href="https://zjun.github.io/"/>
  <updated>2023-11-10T07:48:41.984Z</updated>
  <id>https://zjun.github.io/</id>
  
  <author>
    <name>zJun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring 全局异常处理</title>
    <link href="https://zjun.github.io/article/4f203cd3.html"/>
    <id>https://zjun.github.io/article/4f203cd3.html</id>
    <published>2019-08-10T14:50:51.000Z</published>
    <updated>2023-11-10T07:48:41.984Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;SpringBoot中有一个&lt;code&gt;ControllerAdvice&lt;/code&gt;的注解，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用&lt;code&gt;ExceptionHandler&lt;/code&gt;注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处</summary>
      
    
    
    
    <category term="后端" scheme="https://zjun.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://zjun.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring Data JPA 简化持久层的开发</title>
    <link href="https://zjun.github.io/article/29fea7b8.html"/>
    <id>https://zjun.github.io/article/29fea7b8.html</id>
    <published>2013-12-03T13:06:19.000Z</published>
    <updated>2023-11-09T12:47:30.758Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近看到&lt;a href=&quot;http://www.springside.org.cn/&quot;&gt;SpringSide&lt;/a&gt;最新版的&lt;a href=&quot;https://github.com/springside/springside4/wiki/Design&quot;&gt;技术选型&lt;/a&gt;中提到了&lt;a href=&quot;http://www.springsource.org/spring-data/jpa&quot;&gt;Spring Data JPA&lt;/a&gt;,号称只需要实现接口就可以实现大部分操作。真有怎么神奇？于是Google一番，果然好使，在这里记录一下：&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://zjun.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>把Raspberry Pi打造成 Web Server</title>
    <link href="https://zjun.github.io/article/ddf385ff.html"/>
    <id>https://zjun.github.io/article/ddf385ff.html</id>
    <published>2013-09-17T13:06:19.000Z</published>
    <updated>2023-11-09T12:59:09.135Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Setup-Raspberry-Pi&quot;&gt;&lt;a href=&quot;#Setup-Raspberry-Pi&quot; class=&quot;headerlink&quot; title=&quot;Setup Raspberry Pi&quot;&gt;&lt;/a&gt;Setup Raspberry Pi&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;理论上 OS 可以是任何支持 ARM v6 的 Linux 发行版，推荐使用官方的 wheezy 系统，因为这是针对树莓派定制并优化了的 Debian。&lt;br&gt;下载地址：&lt;a href=&quot;http://www.raspberrypi.org/downloads&quot; title=&quot;http://www.raspberrypi.org/downloads&quot;&gt;http://www.raspberrypi.org/downloads&lt;/a&gt;&lt;br&gt;解压之后得到一个 .img 的镜像文件，比如 2013-07-26-wheezy-raspbian.img.  &lt;/p&gt;
&lt;p&gt;在Windows下使用工具：&lt;a href=&quot;http://sourceforge.net/projects/win32diskimager/&quot;&gt;win32diskimager&lt;/a&gt; 把镜像文件写入 SD 卡。  &lt;/p&gt;
&lt;p&gt;将刻好的 SD 卡插入树莓派的 SD 卡插槽，接上键盘和显示器。然后开机，也就是插上电源，树莓派没有电源开关，插电即开机。拔出电源就是关机，不过最安全的方式是使用 &lt;code&gt;sudo shutdown -h now&lt;/code&gt; 或 &lt;code&gt;sudo halt&lt;/code&gt; 命令正确地关闭系统，然后再拔电源。 重启使用 &lt;code&gt;sudo reboot&lt;/code&gt; 命令。&lt;/p&gt;</summary>
    
    
    
    <category term="Others" scheme="https://zjun.github.io/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>关于 Java String 内存管理的几个有趣的例子</title>
    <link href="https://zjun.github.io/article/ae982c1d.html"/>
    <id>https://zjun.github.io/article/ae982c1d.html</id>
    <published>2013-05-30T13:06:19.000Z</published>
    <updated>2023-11-09T13:05:35.456Z</updated>
    
    
    <summary type="html">&lt;p&gt;今天在 &lt;a href=&quot;http://www.oschina.net/&quot;&gt;OSChina&lt;/a&gt; 上看到一篇有趣的文章：&lt;a href=&quot;http://my.oschina.net/u/551903/blog/134000&quot;&gt;关于String内存分配的深入探讨&lt;/a&gt;,文章通过几个简单的例子，把Java中String的内存管理的方式解释的很清楚，涨了不少姿势，现根据自己的理解做些笔记在这里：&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://zjun.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java并发编程笔记：线程管理</title>
    <link href="https://zjun.github.io/article/2cf8f79a.html"/>
    <id>https://zjun.github.io/article/2cf8f79a.html</id>
    <published>2012-05-02T08:52:00.000Z</published>
    <updated>2023-11-09T07:38:49.469Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;创建线程&quot;&gt;&lt;a href=&quot;#创建线程&quot; class=&quot;headerlink&quot; title=&quot;创建线程&quot;&gt;&lt;/a&gt;创建线程&lt;/h2&gt;&lt;p&gt;两种方法：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过直接继承thread类，然后覆盖run()方法;&lt;/li&gt;
&lt;li&gt;构建一个实现Runnable接口的类, 然后创建一个thread类对象并传递Runnable对象作为构造参数;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;启动线程：&lt;/strong&gt;&lt;br&gt;只有调用start()方法才能启动一个新的执行线程。  &lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://zjun.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Find duplicate records in text file</title>
    <link href="https://zjun.github.io/article/2f7dbe20.html"/>
    <id>https://zjun.github.io/article/2f7dbe20.html</id>
    <published>2012-04-11T08:52:00.000Z</published>
    <updated>2023-11-09T07:24:09.314Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h2&gt;&lt;figure class=&quot;highlight txt&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs txt&quot;&gt;abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  &lt;br&gt;abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  &lt;br&gt;tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  &lt;br&gt;aer 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  &lt;br&gt;tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Others" scheme="https://zjun.github.io/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>剔除List中的重复值</title>
    <link href="https://zjun.github.io/article/59d39a85.html"/>
    <id>https://zjun.github.io/article/59d39a85.html</id>
    <published>2007-01-18T05:48:00.000Z</published>
    <updated>2023-11-09T13:07:46.073Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;方法一：循环元素删除&quot;&gt;&lt;a href=&quot;#方法一：循环元素删除&quot; class=&quot;headerlink&quot; title=&quot;方法一：循环元素删除&quot;&gt;&lt;/a&gt;方法一：循环元素删除&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//  删除ArrayList中重复元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List list)&lt;/span&gt;  &amp;#123;&lt;br&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;  ( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ; i  &amp;lt;  list.size()  -   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ; i ++ )  &amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;  ( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;j&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;  list.size()  -   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ; j  &amp;gt;  i; j -- )  &amp;#123;&lt;br&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;  (list.get(j).equals(list.get(i)))  &amp;#123;&lt;br&gt;        list.remove(j);&lt;br&gt;      &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;  System.out.println(list);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="https://zjun.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Hibernate中的继承关系</title>
    <link href="https://zjun.github.io/article/10d51e8f.html"/>
    <id>https://zjun.github.io/article/10d51e8f.html</id>
    <published>2006-08-16T07:15:00.000Z</published>
    <updated>2023-11-09T13:10:06.880Z</updated>
    
    
    <summary type="html">&lt;p&gt;Hibernate中支持3种形式实现继承关系：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Table per concrete class&lt;/strong&gt; 表与子类之间独立一对一关系  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Table per subclass&lt;/strong&gt; 每个子类对应一张子表，并与主类共享主表  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Table per class hierarchy&lt;/strong&gt; 表与类一对多关系</summary>
    
    
    
    <category term="Java" scheme="https://zjun.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>配置Log4j</title>
    <link href="https://zjun.github.io/article/eefb8f1c.html"/>
    <id>https://zjun.github.io/article/eefb8f1c.html</id>
    <published>2006-06-28T08:42:00.000Z</published>
    <updated>2023-11-09T13:13:30.525Z</updated>
    
    
    <summary type="html">&lt;p&gt;Log4J的配置文件(Configuration File)就是用来设置记录器的级别、存放器和布局的，它可接key&amp;#x3D;value格式的设置或xml格式的设置信息。通过配置，可以创建出Log4J的运行环境。&lt;/p&gt;</summary>
    
    
    
    <category term="Others" scheme="https://zjun.github.io/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>java中的观察者模式(Observer)</title>
    <link href="https://zjun.github.io/article/368d2438.html"/>
    <id>https://zjun.github.io/article/368d2438.html</id>
    <published>2006-05-18T02:54:00.000Z</published>
    <updated>2023-11-10T08:03:37.050Z</updated>
    
    
    <summary type="html">&lt;p&gt;Java作为一种面向对象的开发语言，对实现设计模式提供了良好的支持，并且提供了许多默认的实现，比如：通过Java中的&lt;strong&gt;Observable类&lt;/strong&gt;和&lt;strong&gt;Observer接口&lt;/strong&gt;可以方便的实现观察者模式。&lt;/p&gt;
&lt;p&gt;下面我们就用一个实际的例子来说明：日常生活中说起观察者，最常见的例子可能就是天气预报，在这里我们的观察对象是地球，而我们是通过发射气象卫星这个观察者来检测地球气象变化的。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://zjun.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java中的Proxy模式(续)</title>
    <link href="https://zjun.github.io/article/df437fb5.html"/>
    <id>https://zjun.github.io/article/df437fb5.html</id>
    <published>2006-04-12T03:06:00.000Z</published>
    <updated>2023-11-10T08:03:50.465Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 &lt;a href=&quot;https://zjun.github.io/article/46390b53.html&quot;&gt;上一篇随笔&lt;/a&gt; 中,由于时间和篇幅的关系只是简单介绍了Proxy模式的概念,并没有写到Java中对Proxy模式特有的支持,所以严格说起来是有点”名不符实”,现在就接着介绍JDK中Proxy模式的实现:&lt;br&gt;Java API中提供了对Proxy模式的支持,主要是通过反射(Reflect)包中的&lt;strong&gt;Proxy&lt;/strong&gt;类和&lt;strong&gt;InvocationHandler&lt;/strong&gt;接口实现,具体过程如下:  &lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://zjun.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java中的Proxy模式</title>
    <link href="https://zjun.github.io/article/46390b53.html"/>
    <id>https://zjun.github.io/article/46390b53.html</id>
    <published>2006-03-21T15:34:00.000Z</published>
    <updated>2023-11-10T08:03:02.519Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是代理模式&quot;&gt;&lt;a href=&quot;#什么是代理模式&quot; class=&quot;headerlink&quot; title=&quot;什么是代理模式&quot;&gt;&lt;/a&gt;什么是代理模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;代理（Proxy）模式&lt;/strong&gt;，顾名思义就是对象之间不直接发生联系，而是通过中间的代理人进行沟通。这种关系在现在的娱乐圈中普遍存在：明星通常都有经纪人来代理自己的演出事宜，而不是直接去联系演出商。下面就通过这个实际中的例子来说明代理模式。  &lt;/p&gt;
&lt;h1 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/09/zcCK32vuB89GDSi.jpg&quot; alt=&quot;关系类图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="架构设计" scheme="https://zjun.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计模式" scheme="https://zjun.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>为程序加上关闭钩子(ShutdownHook)</title>
    <link href="https://zjun.github.io/article/31eff00a.html"/>
    <id>https://zjun.github.io/article/31eff00a.html</id>
    <published>2006-03-12T15:38:00.000Z</published>
    <updated>2023-11-09T13:20:43.284Z</updated>
    
    
    <summary type="html">&lt;p&gt;“&lt;strong&gt;关闭钩子&lt;/strong&gt;”（ShutdownHook）是这样一个概念：向虚拟机注册一个线程，当程序退出(Ctrl+C)时虚拟机会启动这个线程,我们可以在这个线程的run()中做一些清除的工作,如:&lt;strong&gt;释放数据库连接,关闭文件&lt;/strong&gt;等.  &lt;/p&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;shutdownhook通常用来在Ctrl+C退出时触发清理工作(多是在后台服务中，这种服务通常是24*7运行的，正常情况下是不退出的)，如果能够在程序中显式地确定退出的时机，那么最好是直接在退出前做清理，不用搞得这么复杂。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://zjun.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript中的继承关系</title>
    <link href="https://zjun.github.io/article/5d2ba95e.html"/>
    <id>https://zjun.github.io/article/5d2ba95e.html</id>
    <published>2006-03-06T13:06:32.000Z</published>
    <updated>2023-11-07T13:13:47.437Z</updated>
    
    
    <summary type="html">&lt;p&gt;意译自KevLinDev上一篇文章，才疏学浅，望指正，英文原文可到&lt;a href=&quot;http://www.kevlindev.com/tutorials/javascript/inheritance/&quot;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;
&lt;p&gt;javascript脚本语言是支持面向对象编程(&lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;O&lt;/strong&gt;riented &lt;strong&gt;P&lt;/strong&gt;rogramming )的,只是javascript实现的方式比较特别，与C++和java中的实现方式不同。在javascript中我们需要借助&lt;strong&gt;prototype&lt;/strong&gt;对象来访问父类的方法，下面将讨论在javascript中实现OOP中最基本的特征关系 — &lt;strong&gt;继承&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="javascript" scheme="https://zjun.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>将Java应用注册为后台服务</title>
    <link href="https://zjun.github.io/article/d531bfa2.html"/>
    <id>https://zjun.github.io/article/d531bfa2.html</id>
    <published>2006-02-28T14:57:00.000Z</published>
    <updated>2023-11-09T13:25:15.804Z</updated>
    
    
    <summary type="html">&lt;p&gt;项目中有一个java应用程序，交付后用户要求要把这个程序做成后台服务程序，即：系统启动后该程序可以自动启动，并且在前台不要出现运行窗口，维护人员只要在“服务管理”(Windows)中选择启动或停止即可.&lt;br&gt;解决办法如下：&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://zjun.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>DisplayTag 1.1 Released, 可分页读取数据！！！</title>
    <link href="https://zjun.github.io/article/25204a98.html"/>
    <id>https://zjun.github.io/article/25204a98.html</id>
    <published>2006-02-27T12:21:00.000Z</published>
    <updated>2023-11-09T13:27:54.428Z</updated>
    
    
    <summary type="html">&lt;p&gt;DisplayTag一直以来为人们所诟病的缺点就是它的装载数据的方式: &lt;strong&gt;一次性把所有数据读取到内存中，然后再分页显示&lt;/strong&gt;。这样做的后果就是在处理大批量数据时力不从心,可用性急剧下降,并且在翻页显示的仅仅是内存中的数据而不是实时数据.因此人们往往只是在实现小型项目的小数量表格分页显示时才想到DisplayTag，并且因为考虑到项目的扩展往往最终弃用DiaplayTag.&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://zjun.github.io/categories/Web/"/>
    
    
  </entry>
  
</feed>

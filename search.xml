<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Find duplicate records in text file</title>
    <url>/2012/04/d175cbab2927.html</url>
    <content><![CDATA[<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  </span><br><span class="line">abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  </span><br><span class="line">tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  </span><br><span class="line">aer 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  </span><br><span class="line">tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  </span><br></pre></td></tr></table></figure></div>

<h2 id="UNIX"><a href="#UNIX" class="headerlink" title="UNIX"></a>UNIX</h2><p>display the no of occurance and the record</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> f1.txt|<span class="built_in">uniq</span> -c</span><br><span class="line"></span><br><span class="line">2 abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  </span><br><span class="line">1 aer 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  </span><br><span class="line">2 tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  </span><br></pre></td></tr></table></figure></div>

<p>display only the duplicate records  </p>
<pre><code class="bash">sort f1.txt|uniq -d

abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  
tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  
</code></pre>
<p>display distinct records</p>
<pre><code class="bash">sort f1.txt|uniq

abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  
aer 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  
tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  
</code></pre>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>Notepad++ can sort by line, and remove the duplicate lines at the same time.</p>
<blockquote>
<ol>
<li>Open the menu under: <strong>TextFX–&gt;TextFX</strong> Tools  </li>
<li>Make sure “<strong>sort outputs only unique…</strong>“ is checked  </li>
<li>select a block of text (ctrl-a to select the entire document).  </li>
<li>click “<strong>sort lines case sensitive</strong>“ or “<strong>sort lines case insensitive</strong>“</li>
</ol>
</blockquote>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a class="link"   href="http://www.unix.com/shell-programming-scripting/85711-how-find-duplicate-records-text-file.html" >How to find Duplicate Records in a text file <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://www.cyberciti.biz/faq/unix-linux-shell-removing-duplicate-lines/" >Shell: How To Remove Duplicate Text Lines <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://www.ehow.com/how_5084389_remove-duplicate-lines-unix.html" >How to Remove Duplicate Lines in Unix <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://answers.yahoo.com/question/index?qid=20080522091139AAoVO8m" >remove duplicates from a text file in free editor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>配置Log4j</title>
    <url>/2006/06/30f3cbc52082.html</url>
    <content><![CDATA[<p>Log4J的配置文件(Configuration File)就是用来设置记录器的级别、存放器和布局的，它可接key&#x3D;value格式的设置或xml格式的设置信息。通过配置，可以创建出Log4J的运行环境。</p>
<span id="more"></span>

<h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h2><p>Log4J配置文件的基本格式如下：</p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置根Logger</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>  =   <span class="string">[ level ]   ,  appenderName1 ,  appenderName2 ,  …</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置日志信息输出目的地Appender</span></span><br><span class="line"><span class="attr">log4j.appender.appenderName</span>  =  <span class="string">fully.qualified.name.of.appender.class </span></span><br><span class="line"><span class="attr">　　log4j.appender.appenderName.option1</span>  =  <span class="string">value1 </span></span><br><span class="line"><span class="attr">　　…</span> <span class="string"></span></span><br><span class="line"><span class="attr">　　log4j.appender.appenderName.optionN</span>  =  <span class="string">valueN </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置日志信息的格式（布局）</span></span><br><span class="line"><span class="attr">log4j.appender.appenderName.layout</span>  =  <span class="string">fully.qualified.name.of.layout.class </span></span><br><span class="line"><span class="attr">　　log4j.appender.appenderName.layout.option1</span>  =  <span class="string">value1 </span></span><br><span class="line"><span class="attr">　　…</span> <span class="string"></span></span><br><span class="line"><span class="attr">　　log4j.appender.appenderName.layout.optionN</span>  =  <span class="string">valueN </span></span><br></pre></td></tr></table></figure></div>

<p>其中 [<strong>level</strong>] 是日志输出级别，共有5级：</p>
<blockquote>
<p>FATAL      0<br>ERROR      3<br>WARN       4<br>INFO       6<br>DEBUG      7</p>
</blockquote>
<p><strong>Appender</strong> 为日志输出目的地，Log4j提供的appender有以下几种：  </p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.apache.log4j.ConsoleAppender（控制台），</span></span><br><span class="line"><span class="attr">org.apache.log4j.FileAppender（文件），</span></span><br><span class="line"><span class="attr">org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），</span></span><br><span class="line"><span class="attr">org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），</span></span><br><span class="line"><span class="attr">org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</span></span><br></pre></td></tr></table></figure></div>

<p><strong>Layout</strong>：日志输出格式，Log4j提供的layout有以下几种：</p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.apache.log4j.HTMLLayout（以HTML表格形式布局），</span></span><br><span class="line"><span class="attr">org.apache.log4j.PatternLayout（可以灵活地指定布局模式），</span></span><br><span class="line"><span class="attr">org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</span></span><br><span class="line"><span class="attr">org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</span></span><br></pre></td></tr></table></figure></div>

<p><strong>打印参数</strong>: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:  </p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line">	<span class="attr">　　%m</span>   <span class="string">输出代码中指定的消息  </span></span><br><span class="line">	<span class="attr">　　%p</span>   <span class="string">输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL   </span></span><br><span class="line">	<span class="attr">　　%r</span>   <span class="string">输出自应用启动到输出该log信息耗费的毫秒数   </span></span><br><span class="line">	<span class="attr">　　%c</span>   <span class="string">输出所属的类目，通常就是所在类的全名   </span></span><br><span class="line">	<span class="attr">　　%t</span>   <span class="string">输出产生该日志事件的线程名   </span></span><br><span class="line">	<span class="attr">　　%n</span>   <span class="string">输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”   </span></span><br><span class="line">	<span class="attr">　　%d</span>   <span class="string">输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d&#123;yyy MMM dd HH:mm:ss , SSS&#125;，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921    </span></span><br><span class="line">	<span class="attr">　　%l</span>   <span class="string">输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )   </span></span><br></pre></td></tr></table></figure></div>

<h2 id="2-在代码中初始化Logger"><a href="#2-在代码中初始化Logger" class="headerlink" title="2. 在代码中初始化Logger"></a>2. 在代码中初始化Logger</h2><p>1）在程序中调用<strong>BasicConfigurator.configure()<strong>方法：给根记录器增加一个ConsoleAppender，输出格式通过PatternLayout设为”%-4r [%t] %-5p %c %x - %m%n”，还有根记录器的默认级别是</strong>Level.DEBUG</strong>.<br>2）配置放在文件里，通过命令行参数传递文件名字，通过PropertyConfigurator.configure(args[x])解析并配置；<br>3）配置放在文件里，通过环境变量传递文件名等信息，利用log4j默认的初始化过程解析并配置；<br>4）配置放在文件里，通过应用服务器配置传递文件名等信息，利用一个特殊的servlet来完成配置。  </p>
<h2 id="3-为不同的-Appender-设置日志输出级别"><a href="#3-为不同的-Appender-设置日志输出级别" class="headerlink" title="3. 为不同的 Appender 设置日志输出级别"></a>3. 为不同的 Appender 设置日志输出级别</h2><p>当调试系统时，我们往往注意的只是异常级别的日志输出，但是通常所有级别的输出都是放在一个文件里的，如果日志输出的级别是BUG！？那就慢慢去找吧。<br>这时我们也许会想要是能把异常信息单独输出到一个文件里该多好啊。当然可以，Log4j已经提供了这样的功能，我们只需要在配置中修改<strong>Appender的Threshold</strong> 就能实现,比如下面的例子：</p>
<p><strong>[配置文件]</strong></p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### set log levels ###</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span> = <span class="string">debug ,  stdout ,  D ,  E</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出到控制台 ###</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span> =  <span class="string">%d&#123;ABSOLUTE&#125; %5p %c&#123; 1 &#125;:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出到日志文件 ###</span></span><br><span class="line"><span class="attr">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.D.File</span> = <span class="string">logs/log.log</span></span><br><span class="line"><span class="attr">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.D.Threshold</span> = <span class="string">DEBUG ## 输出DEBUG级别以上的日志</span></span><br><span class="line"><span class="attr">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 保存异常信息到单独文件 ###</span></span><br><span class="line"><span class="attr">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.D.File</span> = <span class="string">logs/error.log ## 异常日志文件名</span></span><br><span class="line"><span class="attr">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.D.Threshold</span> = <span class="string">ERROR ## 只输出ERROR级别以上的日志!!!</span></span><br><span class="line"><span class="attr">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br></pre></td></tr></table></figure></div>

<p><strong>[代码中使用]</strong>  </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">TestLog4j</span>  &#123;  </span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;  </span><br><span class="line">        PropertyConfigurator.configure( <span class="string">&quot; D:/Code/conf/  log4j.properties &quot;</span> );  </span><br><span class="line">        <span class="type">Logger</span> <span class="variable">logger</span>  <span class="operator">=</span>  Logger.getLogger(TestLog4j. class );  </span><br><span class="line">        logger.debug( <span class="string">&quot; debug &quot;</span> );  </span><br><span class="line">        logger.error( <span class="string">&quot; error &quot;</span> );  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行一下，看看异常信息是不是保存在了一个单独的文件error.log中。 </p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>把Raspberry Pi打造成 Web Server</title>
    <url>/2013/09/59563494bac6.html</url>
    <content><![CDATA[<h2 id="Setup-Raspberry-Pi"><a href="#Setup-Raspberry-Pi" class="headerlink" title="Setup Raspberry Pi"></a>Setup Raspberry Pi</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>理论上 OS 可以是任何支持 ARM v6 的 Linux 发行版，推荐使用官方的 wheezy 系统，因为这是针对树莓派定制并优化了的 Debian。<br>下载地址：<a class="link"   href="http://www.raspberrypi.org/downloads"  title="http://www.raspberrypi.org/downloads">http://www.raspberrypi.org/downloads <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>解压之后得到一个 .img 的镜像文件，比如 2013-07-26-wheezy-raspbian.img.  </p>
<p>在Windows下使用工具：<a class="link"   href="http://sourceforge.net/projects/win32diskimager/" >win32diskimager <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 把镜像文件写入 SD 卡。  </p>
<p>将刻好的 SD 卡插入树莓派的 SD 卡插槽，接上键盘和显示器。然后开机，也就是插上电源，树莓派没有电源开关，插电即开机。拔出电源就是关机，不过最安全的方式是使用 <code>sudo shutdown -h now</code> 或 <code>sudo halt</code> 命令正确地关闭系统，然后再拔电源。 重启使用 <code>sudo reboot</code> 命令。</p>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>第一次开机正常启动后，看到的是 Raspi-config 界面， 你可以使用键盘做一些基本的系统设置:  </p>
<ul>
<li>先简单地设置一下地区、时区、键盘。注意默认的键盘布局（layout）设置是 English(UK) （因为是英国人发明的），在 Others 中把它改为 English(US)，否则 # 号的位置不对。</li>
<li>接着还可以修改默认用户 pi 的密码，官方系统的默认账号是 pi &#x2F; raspberry 。</li>
<li>在 ssh 设置中启用 ssh 服务（默认已启用），这样以后就可以 ssh 远程控制了。</li>
<li>在 boot_behaviour 设置中，设置开机是否自动进入桌面环境（默认进入），选择否则只进入命令行模式。建议关闭桌面，需要的时候使用 <code>startx</code> 命令就可以进入。系统提供的桌面是 LXDE ，有一些基本功能。</li>
<li>expand_rootfs 设置是让你的系统扩展到全部 SD 卡空间，默认没有使用全部 SD 卡空间，所以请执行这个选项。</li>
<li>最后，执行 Finish 完成设置，重启系统。</li>
</ul>
<p>重启之后就不会再出现这个设置界面了，但你随时可以使用 <code>sudo raspi-config</code> 命令再次使用这个设置工具。</p>
<p>装好 OS 后，建议先升级一下系统，最新的更新可能会提高系统的性能：  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update      </span><br><span class="line">sudo apt-get upgrade  </span><br></pre></td></tr></table></figure></div>

<p>一些在设置系统时常用到的命令：  </p>
<ul>
<li><p>关机: <code>sudo shutdown -h now</code>或 <code>sudo halt</code></p>
</li>
<li><p>重启: <code>sudo reboot</code></p>
</li>
<li><p>查看IP地址： <code>ifconfig</code></p>
</li>
<li><p>Set Up SSH:</p>
</li>
<li><p>Install FTP</p>
</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R pi /var/www  -- Take ownership of the web root  </span><br><span class="line">sudo apt-get install vsftpd -- install vsftpd  </span><br><span class="line">sudo service vsftpd restart -- restart vsftpd</span><br></pre></td></tr></table></figure></div>

<p>到这里，<strong>就装好了一台 RPi</strong></p>
<h2 id="Setup-Tomcat"><a href="#Setup-Tomcat" class="headerlink" title="Setup Tomcat"></a>Setup Tomcat</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul>
<li>install tomcat server</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tomcat7  </span><br></pre></td></tr></table></figure></div>

<h3 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h3><ul>
<li>link conf and webapps folders</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/tomcat7  </span><br><span class="line">sudo <span class="built_in">rm</span> -r webapps  </span><br><span class="line">sudo <span class="built_in">ln</span> -s /var/lib/tomcat7/conf conf  </span><br><span class="line">sudo <span class="built_in">ln</span> -s /var/lib/tomcat7/webapps webapps   </span><br></pre></td></tr></table></figure></div>

<ul>
<li>give full access to webapps folder</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 /usr/share/tomcat7/webapps  </span><br></pre></td></tr></table></figure></div>

<ul>
<li>copy war file to server webapps folder (from local pc)</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">scp &lt;path&gt;/&lt;file&gt;.war &lt;username&gt;@&lt;ip&gt;:/usr/share/tomcat7/webapps/&lt;file&gt;.war   </span><br></pre></td></tr></table></figure></div>

<ul>
<li>restart tomcat server</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service tomcat7 restart    </span><br></pre></td></tr></table></figure></div>

<h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><ul>
<li>tomcat server commands</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service tomcat7 [&lt;start&gt; &lt;stop&gt; &lt;restart&gt;]</span><br></pre></td></tr></table></figure></div>

<ul>
<li>Where to find the web app log files:</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">/var/log/tomcat</span><br></pre></td></tr></table></figure></div>

<h2 id="Setup-MySQL"><a href="#Setup-MySQL" class="headerlink" title="Setup MySQL"></a>Setup MySQL</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ul>
<li>Install MySQL server</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client php5-mysql</span><br></pre></td></tr></table></figure></div>

<h3 id="管理-1"><a href="#管理-1" class="headerlink" title="管理"></a>管理</h3><ul>
<li>Manage MySQL service</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mysql start/stop/restart  </span><br></pre></td></tr></table></figure></div>

<h3 id="设置-2"><a href="#设置-2" class="headerlink" title="设置"></a>设置</h3><h4 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h4><p>By default remote access to the MySQL database server is disabled for security reasons.To allow remotely access to the database server from the web server or home, follow below quick steps.  </p>
<p><strong>1.Edit my.cnf File</strong>    </p>
<ul>
<li>If you are using Debian Linux file is located at <strong>&#x2F;etc&#x2F;mysql&#x2F;my.cnf</strong> location   </li>
<li>If you are using Red Hat Linux&#x2F;Fedora&#x2F;Centos Linux file is located at <strong>&#x2F;etc&#x2F;my.cnf</strong> location   </li>
<li>If you are using FreeBSD you need to create a file <strong>&#x2F;var&#x2F;db&#x2F;mysql&#x2F;my.cnf</strong><br>Edit <strong>&#x2F;etc&#x2F;my.cnf</strong>, run:</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf  </span><br></pre></td></tr></table></figure></div>

<p>Once file opened, locate line that read as follows  </p>
<p>[mysqld]<br>Make sure line skip-networking is commented (or remove line) and add following line  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">bind-address=YOUR-SERVER-IP  </span><br></pre></td></tr></table></figure></div>

<p>For example, if your MySQL server IP is <code>65.55.55.2</code> then entire block should be look like as follows:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]  </span><br><span class="line">user            = mysql  </span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid  </span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock  </span><br><span class="line">port            = 3306  </span><br><span class="line">basedir         = /usr  </span><br><span class="line">datadir         = /var/lib/mysql  </span><br><span class="line">tmpdir          = /tmp  </span><br><span class="line">language        = /usr/share/mysql/English  </span><br><span class="line">bind-address    = 65.55.55.2  </span><br><span class="line"><span class="comment">#  skip-networking  </span></span><br><span class="line">....  </span><br><span class="line">..  </span><br><span class="line">....  </span><br></pre></td></tr></table></figure></div>

<p>Where,</p>
<ul>
<li><strong>bind-address</strong> : IP address to bind to.</li>
<li><strong>skip-networking</strong> : Don’t listen for TCP&#x2F;IP connections at all. All interaction with mysqld must be made via Unix sockets. This option is highly recommended for systems where only local requests are allowed. Since you need to allow remote connection this line should be removed from my.cnf or put it in comment state.</li>
</ul>
<p>2.Grant access to remote IP address</p>
<ul>
<li>Connect to mysql server:</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p mysql  </span><br></pre></td></tr></table></figure></div>

<ul>
<li>Grant access to a new database<br>If you want to add a new database called foo for user bar and remote IP <code>202.54.10.20</code> then you need to type the following commands at mysql&gt; prompt:</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE foo;  </span><br><span class="line">mysql&gt; GRANT ALL ON foo.* TO bar@<span class="string">&#x27;202.54.10.20&#x27;</span> IDENTIFIED BY <span class="string">&#x27;PASSWORD&#x27;</span>;  </span><br></pre></td></tr></table></figure></div>

<ul>
<li>Grant Access To An Existing Database</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; update db <span class="built_in">set</span> Host=<span class="string">&#x27;202.54.10.20&#x27;</span> <span class="built_in">where</span> Db=<span class="string">&#x27;webdb&#x27;</span>;  </span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> Host=<span class="string">&#x27;202.54.10.20&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;webadmin&#x27;</span>;   </span><br></pre></td></tr></table></figure></div>

<ul>
<li>Test connection</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -u webadmin –h 65.55.55.2 –p</span><br></pre></td></tr></table></figure></div>

<p>Where  </p>
<ul>
<li>u webadmin: webadmin is MySQL username   </li>
<li>h IP or hostname: 65.55.55.2 is MySQL server IP address or hostname (FQDN)   </li>
<li>p Prompt for password</li>
</ul>
<p>You can also use the telnet or nc command to connect to port 3306 for testing purpose:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> X | telnet -e X 65.55.55.2 3306  </span><br></pre></td></tr></table></figure></div>

<p>OR  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ nc -z -w1 65.55.55.2 3306  </span><br></pre></td></tr></table></figure></div>

<p>Sample outputs:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Connection to 65.55.55.2 3306 port [tcp/mysql] succeeded!  </span><br></pre></td></tr></table></figure></div>

<h4 id="MySQL-中文乱码"><a href="#MySQL-中文乱码" class="headerlink" title="MySQL 中文乱码"></a>MySQL 中文乱码</h4><p>MySQL中默认字符集的设置有四级:服务器级，数据库级，表级 。最终是字段级 的字符集设置。注意前三种均为默认设置，并不代码你的字段最终会使用这个字符集设置。所以我们建议要用<code>show create table table ;</code> 或<code>show full fields from tableName;</code> 来检查当前表中字段的字符集设置。</p>
<p><strong>1.查看默认的编码格式:</strong>  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;%char%&quot;</span>;</span><br><span class="line"></span><br><span class="line">+--------------------------+---------------+  </span><br><span class="line">| Variable_name | Value |  </span><br><span class="line">+--------------------------+---------------+  </span><br><span class="line">| character_set_client | gbk |  </span><br><span class="line">| character_set_connection | gbk |  </span><br><span class="line">| character_set_database | utf8 |  </span><br><span class="line">| character_set_filesystem | binary |  </span><br><span class="line">| character_set_results | gbk |  </span><br><span class="line">| character_set_server | utf8 |  </span><br><span class="line">| character_set_system | utf8 |  </span><br><span class="line">+--------------------------+-------------+  </span><br></pre></td></tr></table></figure></div>

<p>注：以前2个来确定,可以使用<code>set names utf8</code>,<code>set names gbk</code>设置默认的编码格式;</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> names utf8;   **有时候这一句很关键！**</span><br></pre></td></tr></table></figure></div>

<p>执行SET NAMES utf8的效果等同于同时设定如下：  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">SET character_set_client=<span class="string">&#x27;utf8&#x27;</span>;  </span><br><span class="line">SET character_set_connection=<span class="string">&#x27;utf8&#x27;</span>;  </span><br><span class="line">SET character_set_results=<span class="string">&#x27;utf8&#x27;</span>;  </span><br></pre></td></tr></table></figure></div>

<p><strong>2.数据库表中字段的字符集设置 :</strong> </p>
<p><code>show create table TableName</code> 或 <code>show full columns from tableName</code>  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table t1;  </span><br><span class="line">+-------+------------------------------------  </span><br><span class="line">| Table | Create Table                       </span><br><span class="line">+-------+------------------------------------  </span><br><span class="line">| t1    | CREATE TABLE `t1` (  </span><br><span class="line">  `<span class="built_in">id</span>` int(11) NOT NULL,  </span><br><span class="line">  `c1` varchar(30) DEFAULT NULL,  </span><br><span class="line">  PRIMARY KEY (`<span class="built_in">id</span>`)      </span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=gbk |  </span><br><span class="line">+-------+------------------------------------  </span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)   </span><br><span class="line"></span><br><span class="line">mysql&gt; show full columns from t1;  </span><br><span class="line">+-------+-------------+----------------+------+-----+-  </span><br><span class="line">| Field | Type        | Collation      | Null | Key |   </span><br><span class="line">+-------+-------------+----------------+------+-----+-  </span><br><span class="line">| <span class="built_in">id</span>    | int(11)     | NULL           | NO   | PRI |   </span><br><span class="line">| c1    | varchar(30) | gbk_chinese_ci | YES  |     |   </span><br><span class="line">+-------+-------------+----------------+------+-----+-  </span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)   </span><br><span class="line">mysql&gt;   </span><br></pre></td></tr></table></figure></div>

<p><strong>3.当前联接系统参数</strong>  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;char%&#x27;</span>    </span><br><span class="line">&gt;+--------------------------+----------------  </span><br><span class="line">| Variable_name            | Value  </span><br><span class="line">+--------------------------+----------------  </span><br><span class="line">| character_set_client     | gbk  </span><br><span class="line">| character_set_connection | gbk  </span><br><span class="line">| character_set_database   | latin1  </span><br><span class="line">| character_set_filesystem | binary  </span><br><span class="line">| character_set_results    | gbk  </span><br><span class="line">| character_set_server     | latin1  </span><br><span class="line">| character_set_system     | utf8  </span><br><span class="line">| character_sets_dir       | C:/Program File  </span><br><span class="line">+--------------------------+----------------  </span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)   </span><br><span class="line">mysql&gt;   </span><br></pre></td></tr></table></figure></div>

<p><strong>4.中文，请确保 表中该字段的字符集为中文兼容：</strong>  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">big5     | Big5 Traditional Chinese  </span><br><span class="line">gb2312   | GB2312 Simplified Chinese  </span><br><span class="line">gbk      | GBK Simplified Chinese  </span><br><span class="line">utf8     | UTF-8 Unicode   </span><br></pre></td></tr></table></figure></div>

<p><strong>5.确保联接参数与这个字段字符集一致,你可以用 <code>set name &#39;charsetname&#39;;</code></strong><br>比如， <code>set name &#39;gbk&#39;;</code><br> 这条命令会同时修改  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">character_set_client  </span><br><span class="line">character_set_connection  </span><br><span class="line">character_set_results  </span><br></pre></td></tr></table></figure></div>

<p>(如果你的这架MySQL中都为中文，则你可以在<code>my.ini</code>或<code>my.cnf</code>中加上或修改这个参数, 参数文件修改后需重启MySQL服务)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">default-character-set=gbk </span><br></pre></td></tr></table></figure></div>

<p><strong>Update on 2013-9-20</strong><br>上面提到的方法都没有解决中文乱码的问题，最终采用在connection URL 中加入编码参数的方法，问题解决，终于可以正常存入和显示中文了。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://serverhost:3306/database?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>java中的观察者模式(Observer)</title>
    <url>/2006/05/fd665649b35c.html</url>
    <content><![CDATA[<p>Java作为一种面向对象的开发语言，对实现设计模式提供了良好的支持，并且提供了许多默认的实现，比如：通过Java中的<strong>Observable类</strong>和<strong>Observer接口</strong>可以方便的实现观察者模式。</p>
<p>下面我们就用一个实际的例子来说明：日常生活中说起观察者，最常见的例子可能就是天气预报，在这里我们的观察对象是地球，而我们是通过发射气象卫星这个观察者来检测地球气象变化的。</p>
<p>所以这个例子中涉及三个对象： </p>
<ul>
<li><strong>地球 (Earth)：</strong>            被观察对象  </li>
<li><strong>气象卫星(Satellite)：</strong>    观察者</li>
<li><strong>气象局(WeatherService)：</strong> 客户端调用</li>
</ul>
<p><strong>被观察对象：地球 (Earth)</strong> </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.util.Observable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被观察对象：地球</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span>  1.0 create on 2006-5-18 9:42:45</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Earth</span>  <span class="keyword">extends</span>  <span class="title class_">Observable</span>  &#123;</span><br><span class="line">     <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">weather</span>  <span class="operator">=</span>   <span class="string">&quot; 晴朗 &quot;</span> ;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@return</span>  Returns the weather.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>  String <span class="title function_">getWeather</span><span class="params">()</span>  &#123;</span><br><span class="line">         <span class="keyword">return</span>  weather;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span>  weather</span></span><br><span class="line"><span class="comment">     *            The weather to set.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">setWeather</span><span class="params">(String weather)</span>  &#123;</span><br><span class="line">         <span class="built_in">this</span> .weather  =  weather;</span><br><span class="line">         <span class="comment">//  设置变化点</span></span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers(weather);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>[注意]</strong> 在需检测的对象前需要**设置变化点setChanged()和通知观察者notifyObservers()**，这两个函数是由Observable类实现的，封装了观察者模式实现的细节。</p>
<p><strong>观察者：气象卫星(Satellite)</strong>  </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.util.Observable;</span><br><span class="line"><span class="keyword">import</span>  java.util.Observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察对象：气象卫星</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span>  1.0 create on 2006-5-18 9:46:30</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Satellite</span>  <span class="keyword">implements</span>  <span class="title class_">Observer</span>  &#123;</span><br><span class="line">     <span class="keyword">private</span>  String weather;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">update</span><span class="params">(Observable obj, Object arg)</span>  &#123;</span><br><span class="line">        weather  =  (String) arg;</span><br><span class="line">         <span class="comment">//  捕获天气变化情况，反馈给检测者</span></span><br><span class="line">        System.out.println( <span class="string">&quot; 近期天气变化： &quot;</span>   +  weather);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>客户端调用：气象局(WeatherService)</strong>  </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端调用：天气预报</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span>  1.0 create on 2006-5-18 9:57:19</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">WeatherService</span>  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span>  args</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">Earth</span> <span class="variable">earth</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">Earth</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Satellite</span> <span class="variable">satellite</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">Satellite</span>();</span><br><span class="line">         <span class="comment">//  发射气象卫星</span></span><br><span class="line">        earth.addObserver(satellite);</span><br><span class="line"></span><br><span class="line">        System.out.println( <span class="string">&quot; 天气预报： &quot;</span> );</span><br><span class="line">        System.out.println( <span class="string">&quot; ------------ &quot;</span> );</span><br><span class="line">        earth.setWeather( <span class="string">&quot; 台风‘珍珠’逼近 &quot;</span> );</span><br><span class="line">        earth.setWeather( <span class="string">&quot; 大到暴雨 &quot;</span> );</span><br><span class="line">        earth.setWeather( <span class="string">&quot; 天气炎热 &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>[运行结果]</strong>  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">天气预报：  </span><br><span class="line">------------   </span><br><span class="line">近期天气变化：台风‘珍珠’逼近  </span><br><span class="line">近期天气变化：大到暴雨  </span><br><span class="line">近期天气变化：天气炎热  </span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>java中的Proxy模式</title>
    <url>/2006/03/48e6ba8e175d.html</url>
    <content><![CDATA[<h1 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h1><p><strong>代理（Proxy）模式</strong>，顾名思义就是对象之间不直接发生联系，而是通过中间的代理人进行沟通。这种关系在现在的娱乐圈中普遍存在：明星通常都有经纪人来代理自己的演出事宜，而不是直接去联系演出商。下面就通过这个实际中的例子来说明代理模式。  </p>
<h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/11/09/zcCK32vuB89GDSi.jpg"
                      alt="关系类图"
                ></p>
<h1 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h1><p><strong>演艺人士</strong>：包括经纪人和明星，都属于娱乐圈中人。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演艺人士</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zJun</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">interface</span>  <span class="title class_">Artist</span>  &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演出活动</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">(String showType)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>经纪人</strong>：  </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 经纪人（参考《Java与模式》－ &quot;代理(Proxy)模式&quot;一章部分代码）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zJun</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Broker</span>  <span class="keyword">implements</span>  <span class="title class_">Artist</span>, InvocationHandler  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">SIGN</span>  <span class="operator">=</span>   <span class="string">&quot; [经纪人] &quot;</span> ;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//  旗下明星</span></span><br><span class="line">     <span class="keyword">private</span>  Star star;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签订和约</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">subcontract</span><span class="params">()</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  +   <span class="string">&quot; 签订和约 &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 经纪人代明星打理一切演出事宜</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">(String showType)</span>  &#123;</span><br><span class="line">         <span class="comment">//  签约</span></span><br><span class="line">        subcontract();</span><br><span class="line"></span><br><span class="line">         <span class="comment">//  通知明星演出</span></span><br><span class="line">         <span class="keyword">if</span>  (star  ==   <span class="literal">null</span> )  &#123;</span><br><span class="line">            star  =   <span class="keyword">new</span>  <span class="title class_">Star</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        star.show(showType);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//  交税</span></span><br><span class="line">        payTax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演出后交税</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">payTax</span><span class="params">()</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  +   <span class="string">&quot; 演出后交税 &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>明星</strong>：  </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 明星</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zJun</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Star</span>  <span class="keyword">implements</span>  <span class="title class_">Artist</span>  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">SIGN</span>  <span class="operator">=</span>   <span class="string">&quot; [明星] &quot;</span> ;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">(String showType)</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  +  showType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>赞助商</strong>：通过联系经纪人安排明星演出</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 赞助商: 与经纪人联系安排演出事宜</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zJun</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Patron</span>  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span>  args</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">Broker</span> <span class="variable">broker</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">Broker</span>();</span><br><span class="line">        broker.show( <span class="string">&quot; 演电影 &quot;</span> );</span><br><span class="line">        broker.show( <span class="string">&quot; 拍电视 &quot;</span> );</span><br><span class="line">        broker.show( <span class="string">&quot; 出唱片 &quot;</span> );</span><br><span class="line">        broker.show( <span class="string">&quot; 演唱会 &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>[运行结果]：</strong>  </p>
<div class="highlight-container" data-rel="Console"><figure class="iseeu highlight console"><table><tr><td class="code"><pre><span class="line">[ 经纪人 ] 签订和约  </span><br><span class="line">[ 明星 ] 演电影  </span><br><span class="line">[ 经纪人 ] 演出后交税  </span><br><span class="line">[ 经纪人 ] 签订和约  </span><br><span class="line">[ 明星 ] 拍电视  </span><br><span class="line">[ 经纪人 ] 演出后交税  </span><br><span class="line">[ 经纪人 ] 签订和约  </span><br><span class="line">[ 明星 ] 出唱片  </span><br><span class="line">[ 经纪人 ] 演出后交税  </span><br><span class="line">[ 经纪人 ] 签订和约   </span><br><span class="line">[ 明星 ] 演唱会  </span><br><span class="line">[ 经纪人 ] 演出后交税  </span><br></pre></td></tr></table></figure></div>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《Java与模式》 阎宏 电子工业出版社</p>
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>java中的Proxy模式(续)</title>
    <url>/2006/04/3249d2971202.html</url>
    <content><![CDATA[<p>在 <a href="https://zjun.github.io/article/46390b53.html">上一篇随笔</a> 中,由于时间和篇幅的关系只是简单介绍了Proxy模式的概念,并没有写到Java中对Proxy模式特有的支持,所以严格说起来是有点”名不符实”,现在就接着介绍JDK中Proxy模式的实现:<br>Java API中提供了对Proxy模式的支持,主要是通过反射(Reflect)包中的<strong>Proxy</strong>类和<strong>InvocationHandler</strong>接口实现,具体过程如下:  </p>
<p>(1) 实现<strong>InvocationHandler</strong>接口,在**invoke()<strong>方法中实现代理类要完成的操作;<br>(2) 通过</strong>Proxy.newProxyInstance(ClassLoader loader,Class[]<br>interfaces,InvocationHandler h)<strong>方法生成一个代理类,从参数可以看出代理类将实现被代理对象的接口,而具体的实现过程是在上面实现的</strong>InvocationHandler.invoke()**中定义的.</p>
<hr>
<p>我们还是用演艺圈的例子来说明：<br>首先，<strong>类的关系图</strong>需要修改一下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/11/09/B9zW6KQ2MTALIqY.gif"
                      alt="类的关系图"
                ></p>
<p>可以看出，这里并没有经纪人(Broke)类，而是新增了一个经纪人操作类(BrokeHandler),这是因为通过<code>Proxy.newProxyInstance()</code>方法,Java API将自动为我们生成一个对于Artist接口的代理类(即：Broke),我们只需定义代理的操作即可．  </p>
<h2 id="经纪人工作"><a href="#经纪人工作" class="headerlink" title="经纪人工作"></a>经纪人工作</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 经纪人工作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span>  1.0 create on 2006-4-11 18:06:36</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">BrokerHandler</span>  <span class="keyword">implements</span>  <span class="title class_">InvocationHandler</span>  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">SIGN</span>  <span class="operator">=</span>   <span class="string">&quot;  [经纪人工作]  &quot;</span> ;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//  旗下明星</span></span><br><span class="line">     <span class="keyword">private</span>  Star star;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span>  <span class="title function_">BrokerHandler</span><span class="params">(Star star)</span>  &#123;</span><br><span class="line">         <span class="built_in">this</span> .star  =  star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签订和约</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">private</span>   <span class="keyword">void</span>  <span class="title function_">subcontract</span><span class="params">()</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  +   <span class="string">&quot;  签订和约  &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演出后交税</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">private</span>   <span class="keyword">void</span>  <span class="title function_">payTax</span><span class="params">()</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  +   <span class="string">&quot;  演出后交税  &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@see</span>  java.lang.reflect.InvocationHandler#invoke(java.lang.Object,</span></span><br><span class="line"><span class="comment">     *      java.lang.reflect.Method, java.lang.Object)</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>  Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">             <span class="keyword">throws</span>  Throwable  &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span>  <span class="operator">=</span>   <span class="literal">null</span> ;</span><br><span class="line">         <span class="comment">//  签约</span></span><br><span class="line">        subcontract();</span><br><span class="line">         <span class="comment">//  安排艺人演出</span></span><br><span class="line">        obj  =  method.invoke(star, args);</span><br><span class="line">         <span class="comment">//  交税</span></span><br><span class="line">        payTax();</span><br><span class="line">         <span class="keyword">return</span>  obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="艺人"><a href="#艺人" class="headerlink" title="艺人"></a>艺人</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 艺人</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span>  1.0 create on 2006-4-11 18:05:48</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">interface</span>  <span class="title class_">Artist</span>  &#123;</span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">(String showType)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="明星"><a href="#明星" class="headerlink" title="明星"></a>明星</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 明星</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span> zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span> 1.0 create on 2006-4-11 18:08:17</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Star</span>  <span class="keyword">implements</span>  <span class="title class_">Artist</span>  &#123;</span><br><span class="line">     <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">SIGN</span>  <span class="operator">=</span>   <span class="string">&quot;  [明星]  &quot;</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">(String showType)</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  + showType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="演出赞助商"><a href="#演出赞助商" class="headerlink" title="演出赞助商"></a>演出赞助商</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演出赞助商</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span> zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span> 1.0 create on 2006-4-11 18:30:25</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Patron</span>  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/** </span></span><br><span class="line"><span class="comment">      *  <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">Star</span> <span class="variable">star</span>  <span class="operator">=</span>   <span class="keyword">new</span> <span class="title class_">Star</span>();</span><br><span class="line">        <span class="type">BrokerHandler</span> <span class="variable">broker</span>  <span class="operator">=</span>   <span class="keyword">new</span> <span class="title class_">BrokerHandler</span>(star);</span><br><span class="line">        <span class="type">Artist</span> <span class="variable">b</span>  <span class="operator">=</span> (Artist) Proxy.newProxyInstance(star.getClass()</span><br><span class="line">                .getClassLoader(), star.getClass().getInterfaces(), broker);</span><br><span class="line">        b.show( <span class="string">&quot;  演电影  &quot;</span>);</span><br><span class="line">        b.show( <span class="string">&quot;  拍电视  &quot;</span>);</span><br><span class="line">        b.show( <span class="string">&quot;  出唱片  &quot;</span>);</span><br><span class="line">        b.show( <span class="string">&quot;  演唱会  &quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>运行结果</strong>：</p>
<div class="highlight-container" data-rel="Console"><figure class="iseeu highlight console"><table><tr><td class="code"><pre><span class="line">[ 经纪人工作 ]  签订和约   </span><br><span class="line">[ 明星 ]  演电影   </span><br><span class="line">[ 经纪人工作 ]  演出后交税   </span><br><span class="line">[ 经纪人工作 ]  签订和约   </span><br><span class="line">[ 明星 ]  拍电视   </span><br><span class="line">[ 经纪人工作 ]  演出后交税   </span><br><span class="line">[ 经纪人工作 ]  签订和约   </span><br><span class="line">[ 明星 ]  出唱片   </span><br><span class="line">[ 经纪人工作 ]  演出后交税   </span><br><span class="line">[ 经纪人工作 ]  签订和约   </span><br><span class="line">[ 明星 ]  演唱会   </span><br><span class="line">[ 经纪人工作 ]   演出后交税   </span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>创建单例模式的几种方式</title>
    <url>/2015/11/ab4e9650eab3.html</url>
    <content><![CDATA[<p>单例模式可能是最常用到的设计模式了，但是想要正确的使用单例模式却并不简单。<br>我们先从最简单最常用的方式开始：</p>
<h1 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">         instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h2><ul>
<li><p>私有的静态内部引用实例</p>
</li>
<li><p>私有构造函数</p>
</li>
<li><p>共有静态的getInstance()方法，当静态内部引用为空时才实例化</p>
</li>
</ul>
<h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><ul>
<li>多线程环境下不安全</li>
</ul>
<h1 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h1><p>考虑到多线程的条件，还有另外一种常用的简单实现方式：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="要点：-1"><a href="#要点：-1" class="headerlink" title="要点："></a>要点：</h2><ul>
<li><p>private, final 和 static 的实例变量</p>
</li>
<li><p>私有化构造函数</p>
</li>
<li><p>共有静态的getInstance()方法</p>
</li>
<li><p>static 的实例变量在类加载到内存的时候就会初始化，创建实例是线程安全的</p>
</li>
</ul>
<h2 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h2><ul>
<li><p>实例在类初始化一开始就被创建了，哪怕后来根本没有使用它</p>
</li>
<li><p>如果实例的创建时依赖于外部的参数&#x2F;文件的话，这种方式就不适用了</p>
</li>
</ul>
<h1 id="双重检验锁"><a href="#双重检验锁" class="headerlink" title="双重检验锁"></a>双重检验锁</h1><p>为了避免上面饿汉式的缺点，我们来考虑改进懒汉式单例模式来支持多线程的情况。最直接的想法就是对 <code>getInstance()</code>加锁，但是这样一来同一时间只能有一个线程调用单例实例，效率低下。通过分析，我们可以发现其实不用对整个 getInstance()方法加锁，只需要在实例为空需要创建时加锁。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                 instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="要点：-2"><a href="#要点：-2" class="headerlink" title="要点："></a>要点：</h2><ul>
<li>两次检查 <code>instance == null</code>，一次是在同步块外，一次是在同步块内</li>
</ul>
<blockquote>
<p>使用两次判断的原因：有可能多个线程同时进入第一个 <code>if</code> 判断，如果在同步块中不再次判断的话，有可能生成多个实例</p>
</blockquote>
<h2 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h2><ul>
<li>由于JVM指令重排序的优化，在<code>instance = new Singleton();</code>仍有可能生成多个实例</li>
</ul>
<blockquote>
<p>在JVM指令优化时，<code>instance = new Singleton();</code>并不是一个原子操作，而是3个步骤：  </p>
<ol>
<li>为instance分配内存  </li>
<li>调用 Singleton构造函数初始化成员变量  </li>
<li>将instance对象指向分配的内存空间 （instance非null）</li>
</ol>
</blockquote>
<p>在JVM编译优化时，上面3个步骤并不是顺序执行的，有可能重新排列执行的顺序，有可能是 1-2-3， 或者 1-3-2。如果是 1-3-2的执行顺序的话，有可能出现这种情况：线程1执行完了1-3步骤后退出了同步块，这个时候instance已经是非null了，但还没被初始化，这个时候线程2进入同步块，判断instance为非null，所有直接返回没有初始化的对象，在后面的使用中自然会报错。</p>
<h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ul>
<li><p>使用JVM本身机制保证了线程安全问题；  </p>
</li>
<li><p>SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；  </p>
</li>
<li><p>读取实例的时候不会进行同步，没有性能缺陷；  </p>
</li>
<li><p>不依赖 JDK 版本</p>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a class="link"   href="http://www.oschina.net/code/snippet_107039_6062" >Java中的五种单例模式实现方法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://cantellow.iteye.com/blog/838473" >单例模式的七种写法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://www.cnblogs.com/ykt/archive/2011/11/24/2261251.html" >单例模式的几种实现方式 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/" >如何正确地写出单例模式 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://www.itjhwd.com/javaxianchengdanli/" >Java线程安全的单例模式的几种实现 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://www.cnblogs.com/kingzzm/p/3321718.html" >单例模式的5种形式 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程笔记：线程管理</title>
    <url>/2012/05/db86057c545d.html</url>
    <content><![CDATA[<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>两种方法：  </p>
<ol>
<li>通过直接继承thread类，然后覆盖run()方法;</li>
<li>构建一个实现Runnable接口的类, 然后创建一个thread类对象并传递Runnable对象作为构造参数;</li>
</ol>
<p><strong>启动线程：</strong><br>只有调用start()方法才能启动一个新的执行线程。  </p>
<h2 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h2><p>通过以下方法访问线程属性：  </p>
<ol>
<li>id: 			<code>thread.getId()</code>  </li>
<li>name: 		<code>thread.getName()</code>  </li>
<li>Priority: 	<code>thread.getPriority()</code>  </li>
<li>State: 		<code>thread.getState()</code></li>
</ol>
<h2 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h2><ol>
<li>在线程外调用线程的 <code>interrupt()</code> 方法；  </li>
<li>在线程内判断 <code>isInterrupted()</code>，如果为true 则退出线程； </li>
<li>可以在线程内判断 <code>isInterrupted()</code>， 如果为true 则抛出 <code> InterruptedException</code> 异常来进行中断处理；</li>
</ol>
<p><strong>说明</strong>： Thread 类有一个boolean类型的属性来表明线程是否被中断。当你调用线程的 <code>interrupt()</code> 方法，就代表你把这个属性设置为 true。 而 <code>isInterrupted()</code> 方法仅返回属性值。   </p>
<h2 id="线程的睡眠和恢复"><a href="#线程的睡眠和恢复" class="headerlink" title="线程的睡眠和恢复"></a>线程的睡眠和恢复</h2><ol>
<li>可以使用 <code>Thread.sleep()</code> 方法休眠线程，此方法接收一个整数作为参数，表示线程暂停运行的毫秒数；</li>
<li>也可以使用一个有TimeUnit列举元素的sleep() 方法，使用线程类的 sleep() 方法让当前线程睡眠，它接收的参数单位是表示并转换成毫秒的: <code>TimeUnit.SECONDS.sleep(1);</code>  ；  </li>
<li>可以通过 <code>thread.interrupt();</code> 中断休眠，唤醒线程；</li>
</ol>
<p><strong>说明</strong>：当调用sleep()方法， Thread 离开CPU并在一段时间内停止运行。在这段时间内，它是不消耗CPU时间的，使用可以执行其他任务。</p>
<h2 id="等待线程终结"><a href="#等待线程终结" class="headerlink" title="等待线程终结"></a>等待线程终结</h2><p>当前线程调用其他线程的 join() 后， 会暂停当前线程，直到被调用线程执行完成。  </p>
<p>Java 提供2种形式的 join() 方法:  </p>
<ol>
<li><code>join (long milliseconds)</code>  </li>
<li><code>join (long milliseconds, long nanos)</code></li>
</ol>
<p>第一种 join() 方法, 这方法让调用线程等待特定的毫秒数。例如，如果thread1对象使用代码 thread2.join(1000), 那么线程 thread1暂停运行，直到以下其中一个条件发生：</p>
<ol>
<li>thread2 结束运行  </li>
<li>1000 毫秒过去了</li>
</ol>
<p>当其中一个条件为真时，join() 方法返回。</p>
<p>第二个版本的 join() 方法和第一个很像，只不过它接收一个毫秒数和一个纳秒数作为参数。  </p>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p><strong>守护线程</strong>: 这种线程的优先级非常低，通常在程序里没有其他线程运行时才会执行它。当守护线程是程序里唯一在运行的线程时，JVM会结束守护线程并终止程序。  </p>
<ol>
<li><code>setDaemon(true);</code> 设置守护线程  </li>
<li>只能在 <code>start()</code> 方法之前可以调用 <code>setDaemon()</code> 方法。一旦线程运行了，就不能修改守护状态  </li>
<li>可以使用 <code>isDaemon()</code> 方法来检查线程是否是守护线程（方法返回 true) 或者是使用者线程 (方法返回 false)</li>
</ol>
<h2 id="处理线程中的-Unchecked-exceptions"><a href="#处理线程中的-Unchecked-exceptions" class="headerlink" title="处理线程中的 Unchecked exceptions"></a>处理线程中的 Unchecked exceptions</h2><p>Java里有2种异常:</p>
<ul>
<li><p>检查异常（<strong>Checked exceptions</strong>）: 这些异常必须强制捕获它们或在一个方法里的throws子句中。 例如， <code>IOException</code> 或者<code>ClassNotFoundException</code></p>
</li>
<li><p>未检查异常（<strong>Unchecked exceptions</strong>）: 这些异常不用强制捕获它们。例如:<code>NumberFormatException</code></p>
</li>
</ul>
<ol>
<li>thread.run() 方法不接受 throws 子句。当一个非检查异常被抛出，默认的行为是在控制台写下stack trace并退出程序。</li>
<li>实现 UncaughtExceptionHandler 接口并实现 uncaughtException() 方法;</li>
<li>thread.setUncaughtExceptionHandler(new ExceptionHandler());</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">UncaughtExceptionHandler</span>&#123;  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uncaughtException</span><span class="params">(Thread t, Throwable e)</span>&#123;  </span><br><span class="line">		System.out.printf(<span class="string">&quot;An exception has been captured\n&quot;</span>);  </span><br><span class="line">		System.out.printf(<span class="string">&quot;Thread: %s\n&quot;</span>,t.getId());  </span><br><span class="line">		System.out.printf(<span class="string">&quot;Exception: %s: %s\n&quot;</span>,e.getClass().getName(),e.getMessage());  </span><br><span class="line">		System.out.printf(<span class="string">&quot;Stack Trace: \n&quot;</span>);  </span><br><span class="line">		e.printStackTrace(System.out); System.out.printf(<span class="string">&quot;Thread status: %s\n&quot;</span>,t.getState());  </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(task);  </span><br><span class="line">thread.setUncaughtExceptionHandler(<span class="keyword">new</span> <span class="title class_">ExceptionHandler</span>());  </span><br><span class="line">thread.start();  </span><br></pre></td></tr></table></figure></div>

<h2 id="本地线程变量"><a href="#本地线程变量" class="headerlink" title="本地线程变量"></a>本地线程变量</h2><ol>
<li>本地线程变量 ThreadLocal;  </li>
<li>本地线程变量为每个使用这些变量的线程储存属性值;  </li>
<li>使用 get() 方法读取值和使用 set() 方法改变值;  </li>
<li>如果第一次访问本地线程变量的值，没有值给当前的线程对象，那么本地线程变量会调用 initialValue() 方法来设置值给线程并返回初始值;  </li>
<li>本地线程类还提供 remove() 方法，删除存储在线程本地变量里的值;</li>
</ol>
<h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><ol>
<li>创建线程组： ThreadGroup threadGroup &#x3D; new ThreadGroup(“Searcher”);  </li>
<li>加入线程组： Thread thread&#x3D;new Thread(threadGroup, runnable );  </li>
<li>threadGroup.list() 得到关于 ThreadGroup ob对象信息；</li>
<li>activeCount() 方法获取线程个数；  </li>
<li>enumerate() 方法获取与ThreadGroup对象关联的线程的列表；<br>threadGroup.enumerate(Thread[]);  </li>
<li>interrupt() 方法中断组里的其他线程： threadGroup.interrupt();</li>
</ol>
<h2 id="处理线程组中的-Unchecked-exceptions"><a href="#处理线程组中的-Unchecked-exceptions" class="headerlink" title="处理线程组中的 Unchecked exceptions"></a>处理线程组中的 Unchecked exceptions</h2><ol>
<li>override ThreadGroup 的 uncaughtException() 方法；  </li>
<li>当一个非捕捉异常在线程内抛出，JVM会为这个异常寻找3种可能handlers：  <ol>
<li>找这个未捕捉的线程对象的异常handle;  </li>
<li>在线程对象的ThreadGroup里寻找非捕捉异常的handler;  </li>
<li>寻找默认非捕捉异常handle;</li>
</ol>
</li>
</ol>
<p>如果没有 handlers存在, 那么 JVM会把异常的 stack trace 写入控制台并结束任务。  </p>
<h2 id="线程工厂"><a href="#线程工厂" class="headerlink" title="线程工厂"></a>线程工厂</h2><ol>
<li>ThreadFactory 接口;  </li>
<li>实现接口方法: newThread(), 接收 Runnable 对象作为参数并返回一个 Thread 对象;</li>
</ol>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate中的继承关系</title>
    <url>/2006/08/3e65720e5ef3.html</url>
    <content><![CDATA[<p>Hibernate中支持3种形式实现继承关系：  </p>
<ol>
<li><strong>Table per concrete class</strong> 表与子类之间独立一对一关系  </li>
<li><strong>Table per subclass</strong> 每个子类对应一张子表，并与主类共享主表  </li>
<li><strong>Table per class hierarchy</strong> 表与类一对多关系</li>
</ol>
<h3 id="1-Table-per-concrete-class"><a href="#1-Table-per-concrete-class" class="headerlink" title="1. Table per concrete class"></a>1. Table per concrete class</h3><p><strong>数据库</strong>：父类没有对应的表，每个子类独立对应一张表，父类中的公共属性将在每一张表中以相同冗余字段的形式出现。<br><strong>映射文件</strong>：子类对应的Hibernate的配映射文件与普通映射文件没有特别区别，只是通过<class>节点的 polymorphism&#x3D;”implicit” 属性实现隐式多态模式来实现与父类之间的继承关系。</p>
<h3 id="2-Table-per-subclass"><a href="#2-Table-per-subclass" class="headerlink" title="2. Table per subclass"></a>2. Table per subclass</h3><p><strong>数据库</strong>：父类单独映射一张主表，而每个子类分别映射一张子表。子表和主表通过外键相关联。<br><strong>映射文件</strong>：在映射文件中通过 <joined-subclass> 节点来表示主类和子类之间的继承关系，如下：  </p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;BaseClass&quot;</span> <span class="attr">table</span>=<span class="string">&quot;T_BASE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--申明子类1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joined-subclass</span> <span class="attr">name</span>=<span class="string">&quot;SubClass1&quot;</span> <span class="attr">table</span>=<span class="string">&quot;T_SUB1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subName1&quot;</span> <span class="attr">column</span>=<span class="string">&quot;subName1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joined-subclass</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--申明子类2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joined-subclass</span> <span class="attr">name</span>=<span class="string">&quot;SubClass2&quot;</span> <span class="attr">table</span>=<span class="string">&quot;T_SUB1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subName2&quot;</span> <span class="attr">column</span>=<span class="string">&quot;subName2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joined-subclass</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-Table-per-class-hierarchy"><a href="#3-Table-per-class-hierarchy" class="headerlink" title="3. Table per class hierarchy"></a>3. Table per class hierarchy</h3><p><strong>数据库</strong>：用一张表对应所有子类，包含所有子类字段，通过一个标示类别的字段来区分不同子类对应的数据。<br><strong>映射文件</strong>：通过<subclass> 和<disriminator>节点来对不同子类加以区别，如下：  </p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;BaseClass&quot;</span> <span class="attr">table</span>=<span class="string">&quot;T_BASE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">column</span>=<span class="string">&quot;category&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>/&gt;</span>                &lt;------------- 声明discriminator字段</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--子类1--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">subclass</span> <span class="attr">name</span>=<span class="string">&quot;SubClass1&quot;</span> <span class="attr">discriminator-value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>       &lt;------------- discriminator为1，则是子类1</span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subName1&quot;</span> <span class="attr">column</span>=<span class="string">&quot;subName1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">subclass</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--子类2--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">subclass</span> <span class="attr">name</span>=<span class="string">&quot;SubClass2&quot;</span> <span class="attr">discriminator-value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>       &lt;------------- discriminator为2，则是子类2</span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subName2&quot;</span> <span class="attr">column</span>=<span class="string">&quot;subName2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">subclass</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>将Java应用注册为后台服务</title>
    <url>/2006/02/639a82530b73.html</url>
    <content><![CDATA[<p>项目中有一个java应用程序，交付后用户要求要把这个程序做成后台服务程序，即：系统启动后该程序可以自动启动，并且在前台不要出现运行窗口，维护人员只要在“服务管理”(Windows)中选择启动或停止即可.<br>解决办法如下：</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>在Linux中注册后台服务程序相对容易，只需编辑<code>/etc/init.d/boot.local</code>文件，在<code>boot.local</code>文件里加上下面这句脚本：<br><code>/iapappserver/MessageServer2.1/run.sh</code><br>其中run.sh是java应用的运行脚本</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>在Windows下的情况较为复杂，需要使用Windows提供的两个工具：<strong>instsrv.exe</strong>(<a class="link"   href="http://postboy.myetang.com/files/instsrv.exe" >下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)和<strong>Srvany.exe</strong>(<a class="link"   href="http://postboy.myetang.com/files/srvany.exe" >下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>).<br><strong>instsrv: 这个工具是把win32程序变成系统服务。</strong><br>基本用法:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">instsrv [服务名] [应用程序绝对路径] (增加服务)  </span><br><span class="line">instsrv [服务名] REMOVE　　(删除服务)  </span><br></pre></td></tr></table></figure></div>

<p>但是并不是所有程序都适合做系统服务的，注册成系统服务后就是无法启动的,这时就需要用到<code>srvany</code>.</p>
<p><strong>srvany:</strong> 这个工具就是用来解决上面的工具中的问题，你注册的时候把它当作你要的服务，在用它来启动你的应用程序。  </p>
<p>基本用法:<br><code>instsrv [服务名] [srvany的绝对路径]</code></p>
<p>具体步骤如下:  </p>
<ol>
<li>注册服务: <strong>path\instsrv 服务名 path\srvany.exe</strong>  </li>
<li>regedit打开注册表  </li>
<li>进入HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\服务名  </li>
<li>右键-新建-项 填入 Parameters  </li>
<li>打开Parameters，右键-新建-字符串值 Application  </li>
<li>双击Application 填入 应用程序的绝对路径,如: D:\workspace\app\main.exe  </li>
<li>右键-新建-字符串值AppDirectory  </li>
<li>双击AppDirectory 填入 应用程序的工作目录,如: D:\workspace\app\  </li>
<li>启动服务。</li>
</ol>
<p>在<strong>Parameters</strong>里还可以添加很多键值：  </p>
<ul>
<li><strong>AppDirectory</strong> 工作目录  </li>
<li><strong>AppParameters</strong> 你的应用程序的参数。  </li>
<li><strong>AppEnvironment</strong> 运行环境变量。</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>剔除List中的重复值</title>
    <url>/2007/01/6eee36bed6f2.html</url>
    <content><![CDATA[<h3 id="方法一：循环元素删除"><a href="#方法一：循环元素删除" class="headerlink" title="方法一：循环元素删除"></a>方法一：循环元素删除</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  删除ArrayList中重复元素</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">removeDuplicate</span><span class="params">(List list)</span>  &#123;</span><br><span class="line">   <span class="keyword">for</span>  ( <span class="type">int</span>  <span class="variable">i</span>  <span class="operator">=</span>   <span class="number">0</span> ; i  &lt;  list.size()  -   <span class="number">1</span> ; i ++ )  &#123;</span><br><span class="line">    <span class="keyword">for</span>  ( <span class="type">int</span>  <span class="variable">j</span>  <span class="operator">=</span>  list.size()  -   <span class="number">1</span> ; j  &gt;  i; j -- )  &#123;</span><br><span class="line">      <span class="keyword">if</span>  (list.get(j).equals(list.get(i)))  &#123;</span><br><span class="line">        list.remove(j);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="方法二：通过HashSet剔除"><a href="#方法二：通过HashSet剔除" class="headerlink" title="方法二：通过HashSet剔除"></a>方法二：通过HashSet剔除</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  删除ArrayList中重复元素</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">removeDuplicate</span><span class="params">(List list)</span>  &#123;</span><br><span class="line">    <span class="type">HashSet</span> <span class="variable">h</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">HashSet</span>(list);</span><br><span class="line">    list.clear();</span><br><span class="line">    list.addAll(h);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="方法三：-删除ArrayList中重复元素，保持顺序"><a href="#方法三：-删除ArrayList中重复元素，保持顺序" class="headerlink" title="方法三： 删除ArrayList中重复元素，保持顺序"></a>方法三： 删除ArrayList中重复元素，保持顺序</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除ArrayList中重复元素，保持顺序</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">removeDuplicateWithOrder</span><span class="params">(List list)</span>  &#123;</span><br><span class="line">      <span class="type">Set</span> <span class="variable">set</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">HashSet</span>();</span><br><span class="line">      <span class="type">List</span> <span class="variable">newList</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">ArrayList</span>();</span><br><span class="line">   <span class="keyword">for</span>  (<span class="type">Iterator</span> <span class="variable">iter</span>  <span class="operator">=</span>  list.iterator(); iter.hasNext();)  &#123;</span><br><span class="line">         <span class="type">Object</span> <span class="variable">element</span>  <span class="operator">=</span>  iter.next();</span><br><span class="line">         <span class="keyword">if</span>  (set.add(element))</span><br><span class="line">            newList.add(element);</span><br><span class="line">     &#125;</span><br><span class="line">     list.clear();</span><br><span class="line">     list.addAll(newList);</span><br><span class="line">     System.out.println( <span class="string">&quot; remove duplicate &quot;</span>   +  list);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>为程序加上关闭钩子(ShutdownHook)</title>
    <url>/2006/03/5cc83b7cc575.html</url>
    <content><![CDATA[<p>“<strong>关闭钩子</strong>”（ShutdownHook）是这样一个概念：向虚拟机注册一个线程，当程序退出(Ctrl+C)时虚拟机会启动这个线程,我们可以在这个线程的run()中做一些清除的工作,如:<strong>释放数据库连接,关闭文件</strong>等.  </p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>shutdownhook通常用来在Ctrl+C退出时触发清理工作(多是在后台服务中，这种服务通常是24*7运行的，正常情况下是不退出的)，如果能够在程序中显式地确定退出的时机，那么最好是直接在退出前做清理，不用搞得这么复杂。</p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p><code>Runtime.getRuntime().addShutdownHook(Thread t);</code></p>
<h2 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h2><p><code>Runtime.getRuntime().removeShutdownHook(Thread t);</code></p>
<p><strong>[例子]</strong>  </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在这个线程中实现程序退出前的清理工作  </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator  </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isTerminal</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!isTerminal) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;run sub thread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTerminal</span><span class="params">()</span> &#123;</span><br><span class="line">        isTerminal = <span class="literal">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;stop sun sub thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ShutdownDownHook测试类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestShutdownHook</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    TestThread testThread;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addThread</span><span class="params">(TestThread t)</span> &#123;</span><br><span class="line">        testThread = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现程序退出前的清理工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is ShutdownHook&quot;</span>);</span><br><span class="line">        testThread.onTerminal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestShutdownHook</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestShutdownHook</span>();</span><br><span class="line">        <span class="type">TestThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread</span>();</span><br><span class="line">        t.start();</span><br><span class="line">        m.addThread(t);</span><br><span class="line">        <span class="comment">// 注册退出处理线程</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>运行结果</strong>:    </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">run sub thread  </span><br><span class="line">run sub thread  </span><br><span class="line">run sub thread  </span><br><span class="line">run sub thread  </span><br><span class="line">This is ShutdownHook  </span><br><span class="line">stop sun sub thread  </span><br></pre></td></tr></table></figure></div>

<p>可以看到:<strong>当程序退出时启动了TestThread线程，执行了定义的释放工作</strong>。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 Java String 内存管理的几个有趣的例子</title>
    <url>/2013/05/40c1459588ae.html</url>
    <content><![CDATA[<p>今天在 <a class="link"   href="http://www.oschina.net/" >OSChina <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 上看到一篇有趣的文章：<a class="link"   href="http://my.oschina.net/u/551903/blog/134000" >关于String内存分配的深入探讨 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,文章通过几个简单的例子，把Java中String的内存管理的方式解释的很清楚，涨了不少姿势，现根据自己的理解做些笔记在这里：</p>
<span id="more"></span>

<p>废话不多说，先上代码：  </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE</span> <span class="operator">=</span> <span class="string">&quot;taobao&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// ---------------------------------------------</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;tao&quot;</span> + <span class="string">&quot;bao&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;tao&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;bao&quot;</span>;</span><br><span class="line"></span><br><span class="line">		System.out.println(a == MESSAGE);<span class="comment">// true</span></span><br><span class="line">		System.out.println((b + c) == MESSAGE);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// ---------------------------------------------</span></span><br><span class="line">		<span class="keyword">final</span> <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;tao&quot;</span>;</span><br><span class="line">		<span class="keyword">final</span> <span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> <span class="string">&quot;bao&quot;</span>;</span><br><span class="line"></span><br><span class="line">		System.out.println((d + e) == MESSAGE);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// ---------------------------------------------</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> <span class="string">&quot;tao&quot;</span> + <span class="string">&quot;bao&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;taobao&quot;</span>);</span><br><span class="line"></span><br><span class="line">		System.out.println(f == MESSAGE); <span class="comment">// true</span></span><br><span class="line">		System.out.println(g == MESSAGE); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">		g = g.intern();</span><br><span class="line"></span><br><span class="line">		System.out.println(g == MESSAGE); <span class="comment">// true</span></span><br><span class="line">		System.out.println(f == g.intern()); <span class="comment">// true</span></span><br><span class="line">		<span class="comment">// ---------------------------------------------</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ul>
<li>Java中对于编译和运行时能够知道大小的变量（如：引用变量和基本类型的值）存放于<strong>栈内存</strong>   </li>
<li>Java中通过 new 产生的变量和大小会在运行时变化的变量(如：数组和链表)存放于<strong>堆内存，但指向对象的引用还是存放在栈内存</strong>   </li>
<li><strong>栈内存中的数据会相互共享</strong>，如果新增变量的值在栈中已经存在，那么新变量将指向同一个地址和值，而不会新增一个空间来存放自己的值;如果没有就在该栈内存增加一个该常量，并将变量指向该常量。 </li>
<li>对于<strong>直接赋值的字符串常量</strong>（如String s&#x3D;“Hello World”；中的Hello World）也是<strong>存放在栈内存中</strong>  </li>
<li>堆内存没有数据共享的特点,每次都会新增划分一个空间给新的变量，哪怕是相同的值  </li>
<li>Java <strong>编译器的优化</strong>，会对于<strong>字符串常量的相加</strong>，在编译时<strong>直接</strong>将字符串<strong>合并</strong>，而不是等到运行时再合并，比如：<strong>String a &#x3D; “tao”+”bao”;和String a &#x3D; “taobao”;编译出的字节码是一样的</strong>  </li>
<li><strong>Java对String的相加是通过StringBuffer实现的</strong>，先构造一个StringBuffer,然后调用append()方法追加，然后将StringBuffer转化成String对象。StringBuffer对象<strong>在堆内存中</strong>，那转换成的String对象理所应当的也是在堆内存中  </li>
<li><strong>intern()<strong>方法会</strong>先检查</strong>String池(或者说成<strong>栈内存</strong>)中是否存在相同的字符串常量，如果有就返回  </li>
<li><strong>final变量</strong>不可能再次赋值了，所以存放在<strong>栈内存里</strong></li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Go笔记1：环境配置</title>
    <url>/2013/10/274edbd85c00.html</url>
    <content><![CDATA[<h2 id="Go-安装"><a href="#Go-安装" class="headerlink" title="Go 安装"></a>Go 安装</h2><p>我的环境是Win7，所以这里主要记录在Win7下安装Go的过程：  </p>
<ul>
<li>首先到<a class="link"   href="http://code.google.com/p/go/downloads/list" >这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>去下载安装程序，32位系统下载go1.0.3.windows-386.msi，64位系统下载go1.0.3.windows-amd64.msi；</li>
<li>双击打开下载的文件，一路按照默认点击下一步，这个时候go已经安装到你的系统中，默认安装之后已经在你的系统环境变量中加入了c:&#x2F;go&#x2F;bin；</li>
<li>打开cmd，输入go，如果出现Go的Usage信息，那么说明Go已经安装成功了；如果出现该命令不存在，那么可以检查一下PATH环境变中是否包含了Go的安装目录。</li>
</ul>
<h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p>go 命令依赖一个重要的环境变量：$GOPATH。*(注：这个不是Go安装目录)*<br>在Windows中新建一个环境变量名称叫做GOPATH：<code>GOPATH=c:\mygo</code> .</p>
<p>$GOPATH 目录约定有三个子目录：</p>
<ul>
<li>src 存放源代码（比如：.go .c .h .s等）</li>
<li>pkg 编译后生成的文件（比如：.a）</li>
<li>bin 编译后生成的可执行文件（为了方便，可以把此目录加入到 $PATH变量中）</li>
</ul>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>Windows平台上还是有很多Go的开发工具可供选择，比如：<a class="link"   href="http://code.google.com/p/golangide" >LiteIDE <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>， Sublime Text， IntelliJ IDEA… 这里我还是选择平时最常用最熟悉的Eclipse。步骤如下：</p>
<h3 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h3><ol>
<li>下载并安装<a class="link"   href="http://www.eclipse.org/" >Eclipse <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>；</li>
<li>安装 goclipse 插件：<a class="link"   href="http://code.google.com/p/goclipse/wiki/InstallationInstructions" >http://code.google.com/p/goclipse/wiki/InstallationInstructions <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>;</li>
<li>下载gocode，用于go的代码补全提示: <code>go get -u github.com/nsf/gocode</code> <em>(注:在Windows中这一步老是报错，然后自动退出，还没有找到原因，如果不能顺利下载gocode的话，可以直接下载gocode.exe文件)</em></li>
<li>下载 <a class="link"   href="http://sourceforge.net/projects/mingw/files/MinGW/" >MinGW <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 并按要求装好; <em>(做调试用)</em></li>
<li>配置插件：<code>Windows-&gt;Reference-&gt;Go</code><br>(1). 配置Go的编译器<br>(2). 配置Gocode（可选，代码补全），设置Gocode路径为之前生成的gocode.exe文件;<br>(3). 配置GDB（可选，做调试用），设置GDB路径为MingW安装目录下的gdb.exe文件;</li>
</ol>
<p>接下来就可以写一个简单的Go程序来检验安装是否成功了：  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    fmt.Println(<span class="string">&quot;Hellow World&quot;</span>);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>

<h3 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h3><p>上面提到的 Eclipse 插件在 Win 环境下还是会时不时的出现问题，最后在 CSDN 上看到这篇文章：<br><a class="link"   href="http://blog.csdn.net/slug302/article/details/16991323" >使用Intellij IDEA在Windwos下搭建golang开发环境 (把屎把尿超详细) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ，超详细的介绍了在Win7下配置 IntelliJ IDEA 开发 Golang 环境的过程，试过了目前最好的可行方案。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go笔记3：面向对象</title>
    <url>/2013/12/5c556b8a284e.html</url>
    <content><![CDATA[<p>Go是一个面向对象的语言，但是不同于Java，C++中略显复杂的面向对象思想，Golang 则将 OOP 思想做了极大的简化，只留下了最核心的特征：你可以给任何类型（包括内置类型）“增加”新方法。而在实现某个接口时，<strong>只需要实现该接口要求的所有方法即可</strong>。</p>
<p>接下来就是我对Go语言面向对象的特点一些总结。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>Golang中没有类似于Java中的Class对象，而是和C类似，通过结构体 struct 来实现的：  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;  </span><br><span class="line">    name <span class="type">string</span>  </span><br><span class="line">    age <span class="type">int</span>  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>

<p>可以同下面几种方法来声明和初始化 struct 变量：  </p>
<ol>
<li><p>先声明，后赋值：</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> P person  <span class="comment">// P现在就是person类型的变量了  </span></span><br><span class="line">P.name = <span class="string">&quot;zJun&quot;</span>  <span class="comment">// 赋值&quot;Astaxie&quot;给P的name属性  </span></span><br><span class="line">P.age = <span class="number">25</span>  <span class="comment">// 赋值&quot;25&quot;给变量P的age属性  </span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>按照顺序提供初始化值  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">P := person&#123;<span class="string">&quot;Tom&quot;</span>, <span class="number">25</span>&#125;  </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>通过field:value的方式初始化，可以任意顺序  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">P := person&#123;age:<span class="number">24</span>, name:<span class="string">&quot;Tom&quot;</span>&#125;  </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>通过new函数分配一个指针，此处P的类型为*person  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">P := <span class="built_in">new</span>(person)  </span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Golang中继承是通过<strong>匿名变量</strong>实现的：<br><strong>匿名字段</strong>，也称为嵌入字段 - 只提供类型，而不写字段名的变量。<br>当匿名字段是一个struct的时候，那么这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct。  比如下面的例子：  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;  </span><br><span class="line">    name <span class="type">string</span>  </span><br><span class="line">    age <span class="type">int</span>  </span><br><span class="line">    weight <span class="type">int</span>  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;  </span><br><span class="line">    Human  <span class="comment">// 匿名字段，默认Student包含了Human的所有字段  </span></span><br><span class="line">    speciality <span class="type">string</span>  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="comment">// 初始化一个学生  </span></span><br><span class="line">    mark := Student&#123;Human&#123;<span class="string">&quot;Mark&quot;</span>, <span class="number">25</span>, <span class="number">120</span>&#125;, <span class="string">&quot;Computer Science&quot;</span>&#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 访问相应的字段  </span></span><br><span class="line">    fmt.Println(<span class="string">&quot;His name is &quot;</span>, mark.name)  </span><br><span class="line">    fmt.Println(<span class="string">&quot;His age is &quot;</span>, mark.age)  </span><br><span class="line">    fmt.Println(<span class="string">&quot;His weight is &quot;</span>, mark.weight)  </span><br><span class="line">    fmt.Println(<span class="string">&quot;His speciality is &quot;</span>, mark.speciality)  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>上面我们已经看到在Golang中可以通过 struct 来定义对象的属性(变量)，但是还不能直接在 struct 中定义方法(method),下面我们就来看看如何在Golang中定义一个对象的方法：</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>method的语法如下：</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r ReceiverType)</span></span> funcName(parameters) (results)  </span><br></pre></td></tr></table></figure></div>

<p>其中的 ReceiverType(接收者)如果是自定义的struct类型，那么这个方法就是struct的一个方法，可以通过下面的方式调用：  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">r.funcName(param);  </span><br></pre></td></tr></table></figure></div>
<h3 id="方法的继承"><a href="#方法的继承" class="headerlink" title="方法的继承"></a>方法的继承</h3><p>和前面提到的一样，方法也可以通过匿名方法的方式进行继承：如果一个对象中有一个匿名字段实现了方法，那么在这个对象中也继承了这个方法，比如下面的例子：</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;  </span><br><span class="line">    name <span class="type">string</span>  </span><br><span class="line">    age <span class="type">int</span>  </span><br><span class="line">    phone <span class="type">string</span>  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;  </span><br><span class="line">    Human <span class="comment">//匿名字段  </span></span><br><span class="line">    school <span class="type">string</span>  </span><br><span class="line">&#125;  </span><br><span class="line">   </span><br><span class="line"><span class="comment">//在human上面定义了一个method  </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span></span> SayHi() &#123;  </span><br><span class="line">    fmt.Printf(<span class="string">&quot;Hi, I am %s you can call me on %s%n&quot;</span>, h.name, h.phone)  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    mark := Student&#123;Human&#123;<span class="string">&quot;Mark&quot;</span>, <span class="number">25</span>, <span class="string">&quot;222-222-YYYY&quot;</span>&#125;, <span class="string">&quot;MIT&quot;</span>&#125;</span><br><span class="line"> </span><br><span class="line">    mark.SayHi()  </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure></div>
<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>Golang不支持方法的重载(override)，但是可以对方法进行重写(overwrite),实现的方式也很简单：<strong>直接在子类中实现一个相同的方法</strong>。在调用时，会优先调用子类自己实现的方法，如果没有找到才会向上寻找调用父类(匿名变量)中的方法。  </p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a class="link"   href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/02.5.md" >Go Web 编程：面向对象 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://www.oschina.net/translate/go-object-oriented-design" >Go 面向对象 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>    </p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go笔记2：基础语法</title>
    <url>/2013/10/369b270da178.html</url>
    <content><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>说明：</strong>  </p>
<ol>
<li><p>使用var关键字是Go最基本的定义变量方式，Go把变量类型放在变量名后面；  </p>
</li>
<li><p>_（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃；  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">_, b := <span class="number">34</span>, <span class="number">35</span> <span class="comment">//将值35赋予b，并同时丢弃34  </span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Go对于已声明但未使用的变量会在编译阶段报错； </p>
</li>
<li><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variableName <span class="keyword">type</span> <span class="comment">//定义一个名称为“variableName”，类型为&quot;type&quot;的变量  </span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 <span class="keyword">type</span> <span class="comment">//定义三个类型都是“type”的三个变量  </span></span><br><span class="line"><span class="keyword">var</span> variableName <span class="keyword">type</span> = value <span class="comment">//初始化“variableName”的变量为“value”值，类型是“type”  </span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 <span class="keyword">type</span>= v1, v2, v3 <span class="comment">//定义三个类型都是&quot;type&quot;的三个变量,并且它们分别初始化相应的值   </span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 = v1, v2, v3 <span class="comment">// 定义三个变量，它们分别初始化相应的值,Go会根据其相应值的类型来初始化它们  </span></span><br><span class="line">vname1, vname2, vname3 := v1, v2, v3 <span class="comment">//**:=**这个符号直接取代了var和type,这种形式叫做简短声明,只能用在函数内部；在函数外部使用var方式来定义全局变量  </span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><strong>说明：</strong>  </p>
<ol>
<li>在Go程序中，常量可定义为<strong>数值</strong>、<strong>布尔值</strong>或<strong>字符串</strong>等类型；</li>
</ol>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> constantName = value  </span><br><span class="line"><span class="keyword">const</span> Pi <span class="type">float32</span> = <span class="number">3.1415926</span>  <span class="comment">//如果需要，也可以明确指定常量的类型</span></span><br></pre></td></tr></table></figure></div>

<h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><ul>
<li>布尔型：类型为bool，值是true或false，默认为false;</li>
<li>数值类型: <ol>
<li>整数类型: 有无符号和带符号两种 - int和uint，这两种类型的长度相同;</li>
<li>浮点类型: 有float32和float64两种（没有float类型），默认是float64;</li>
<li>复数: 它的默认类型是complex128（64位实数+64位虚数）,也有complex64(32位实数+32位虚数) ;</li>
</ol>
</li>
<li>字符串: 类型是string, 是用一对双引号（””）或反引号（<code> </code>）括起来定义;<ol>
<li>Go中字符串是不可变的;</li>
<li>可以将字符串转换为 []byte 类型数组，修改后在转换回 []string 数组，例如下面的例子：</li>
</ol>
</li>
</ul>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;hello&quot;</span>  </span><br><span class="line">c := []<span class="type">byte</span>(s)  <span class="comment">// 将字符串 s 转换为 []byte 类型  </span></span><br><span class="line">c[<span class="number">0</span>] = <span class="string">&#x27;c&#x27;</span>  </span><br><span class="line">s2 := <span class="type">string</span>(c)  <span class="comment">// 再转换回 string 类型  </span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, s2)  </span><br></pre></td></tr></table></figure></div>

<ol>
<li>Go中使用+操作符来连接两个字符串；  </li>
<li>使用反引号（<code> </code>）来申明多行字符串：**&#96; 括起的字符串为Raw字符串，即字符串在代码中的形式就是打印时的形式，它没有字符转义，换行也将原样输出**；</li>
</ol>
<ul>
<li>错误类型：内置有一个error类型，专门用来处理错误信息，Go的package里面还专门有一个包errors来处理错误：<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">err := errors.New(<span class="string">&quot;emit macho dwarf: elf header corrupted&quot;</span>)  </span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">    fmt.Print(err)  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="分组声明"><a href="#分组声明" class="headerlink" title="分组声明"></a>分组声明</h2><p>同时声明多个常量、变量，或者导入多个包时，可采用分组的方式进行声明：</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span>  </span><br><span class="line">    <span class="string">&quot;os&quot;</span>  </span><br><span class="line">)  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span>(  </span><br><span class="line">    i = <span class="number">100</span>  </span><br><span class="line">    pi = <span class="number">3.1415</span>  </span><br><span class="line">    prefix = <span class="string">&quot;Go_&quot;</span>  </span><br><span class="line">)  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span>(  </span><br><span class="line">    i <span class="type">int</span>  </span><br><span class="line">    pi <span class="type">float32</span>  </span><br><span class="line">    prefix <span class="type">string</span>  </span><br><span class="line">)  </span><br></pre></td></tr></table></figure></div>

<h2 id="iota枚举"><a href="#iota枚举" class="headerlink" title="iota枚举"></a>iota枚举</h2><p>关键字<strong>iota</strong>用来声明enum的时候采用，它默认开始值是0，每调用一次加1：  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>(  </span><br><span class="line">    x = <span class="literal">iota</span>  <span class="comment">// x == 0  </span></span><br><span class="line">    y = <span class="literal">iota</span>  <span class="comment">// y == 1  </span></span><br><span class="line">    z = <span class="literal">iota</span>  <span class="comment">// z == 2  </span></span><br><span class="line">    w  <span class="comment">// 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用&quot;= iota&quot;  </span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> v = <span class="literal">iota</span> <span class="comment">// 每遇到一个const关键字，iota就会重置，此时v == 0  </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> (  </span><br><span class="line">  e, f, g = <span class="literal">iota</span>, <span class="literal">iota</span>, <span class="literal">iota</span> <span class="comment">//e=0,f=0,g=0 iota在同一行值相同  </span></span><br><span class="line">)  </span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 默认规则 ##</span></span><br><span class="line"><span class="string">- **大写字母开头的变量**是可导出的，也就是其它包可以读取的，是**公用变量**；</span></span><br><span class="line"><span class="string">- **小写字母开头的变量**就是不可导出的，是**私有变量**。</span></span><br><span class="line"><span class="string">- **大写字母开头的函数**也是一样，相当于class中的带**public关键词的公有函数**；</span></span><br><span class="line"><span class="string">- **小写字母开头的函数**就是有**private关键词的私有函数**。  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## array、slice、map ##</span></span><br><span class="line"><span class="string">### array ###</span></span><br><span class="line"><span class="string">array就是数组，定义方式如下：  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span> </span><br><span class="line"><span class="keyword">var</span> arr [n]<span class="keyword">type</span>  <span class="comment">//n表示数组的长度，type表示存储元素的类型  </span></span><br><span class="line">a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// 声明了一个长度为3的int数组</span></span><br><span class="line"> </span><br><span class="line">b := [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// 声明了一个长度为10的int数组，其中前三个元素初始化为1、2、3，其它默认为0</span></span><br><span class="line"> </span><br><span class="line">c := [...]<span class="type">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; <span class="comment">// 可以省略长度而采用`...`的方式，Go会自动根据元素个数来计算长度  </span></span><br><span class="line"></span><br><span class="line">doubleArray := [<span class="number">2</span>][<span class="number">4</span>]<span class="type">int</span>&#123;[<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;&#125; <span class="comment">//声明了一个二维数组  </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>说明：</strong>  </p>
<ol>
<li>数组不能改变长度；</li>
<li>数组之间的赋值是值的赋值，即当把一个数组作为参数传入函数的时候，传入的其实是该数组的副本，而不是它的指针;</li>
</ol>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>slice是一个引用类型, slice总是指向一个底层array，slice的声明也可以像array一样，只是不需要长度:</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fslice []<span class="type">int</span> <span class="comment">//和声明array一样，只是少了长度  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个含有10个元素元素类型为byte的数组</span></span><br><span class="line"><span class="keyword">var</span> ar = [<span class="number">10</span>]<span class="type">byte</span> &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 声明两个含有byte的slice</span></span><br><span class="line"><span class="keyword">var</span> a, b []<span class="type">byte</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// a指向数组的第3个元素开始，并到第五个元素结束，</span></span><br><span class="line">a = ar[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line"><span class="comment">//现在a含有的元素: ar[2]、ar[3]和ar[4]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// b是数组ar的另一个slice</span></span><br><span class="line">b = ar[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line"><span class="comment">// b的元素是：ar[3]和ar[4]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>说明：声明数组时，方括号内写明了数组的长度或使用…自动计算长度，而声明slice时，方括号内没有任何字符。</strong></p>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map的格式为<br>    <code>map[keyType]valueType</code>  </p>
<p><strong>说明：</strong>  </p>
<ul>
<li>map是无序的，每次打印出来的map都会不一样，它不能通过index获取，而必须通过key获取  </li>
<li>map的长度是不固定的，也就是和slice一样，也是一种引用类型  </li>
<li>内置的len函数同样适用于map，返回map拥有的key的数量  </li>
<li>map的值可以很方便的修改，通过numbers[“one”]&#x3D;11可以很容易的把key为one的字典值改为11  </li>
<li>map和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制  </li>
<li>map的初始化可以通过<strong>key:val</strong>的方式初始化值</li>
<li>map有两个返回值，第二个返回值，如果不存在key，那么ok为false，如果存在ok为true</li>
<li>通过函数**delete(array,key)**删除map的元素</li>
</ul>
<h2 id="make-和-new操作"><a href="#make-和-new操作" class="headerlink" title="make 和 new操作"></a>make 和 new操作</h2><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>new(T)分配了零值填充的T类型的内存空间，并且返回其地址：  </p>
<blockquote>
<p><strong>new返回指针</strong></p>
</blockquote>
<h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>make(T, args)只能创建slice、map和channel，并且返回一个有初始值(非零)的T类型，而不是*T:  </p>
<blockquote>
<p><strong>make返回初始化后的（非零）值</strong></p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a class="link"   href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/02.2.md" >Go Web 编程 ：Go　基础 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC 实现 REST service</title>
    <url>/2013/12/8f7583c33c2f.html</url>
    <content><![CDATA[<h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置字符过滤器--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定spring配置文件位置 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">		<span class="comment">&lt;!--加载多个spring配置文件 --&gt;</span>  </span><br><span class="line">		classpath:spring-homebills-cfg.xml</span><br><span class="line">	<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义SPRING监听器，加载spring --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line">		org.springframework.web.context.ContextLoaderListener</span><br><span class="line">	<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line">org.springframework.web.context.request.RequestContextListener</span><br><span class="line">	<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:homebills-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br></pre></td></tr></table></figure></div>

<h2 id="application-servlet-xml"><a href="#application-servlet-xml" class="headerlink" title="application-servlet.xml"></a>application-servlet.xml</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>  <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        指定使用注解方式配置,配置自动扫描的包名,</span></span><br><span class="line"><span class="comment">        base-package指定自己应用中控制器所在的包目录</span></span><br><span class="line"><span class="comment">        &lt;context:component-scan/&gt; 扫描指定的包中的类上的注解，常用的注解有： </span></span><br><span class="line"><span class="comment">        @Controller 声明Action组件</span></span><br><span class="line"><span class="comment">        @Service 声明Service组件</span></span><br><span class="line"><span class="comment">        @Service(&quot;myMovieLister&quot;) </span></span><br><span class="line"><span class="comment">        @Repository 声明Dao组件</span></span><br><span class="line"><span class="comment">        @Component 泛指组件, 当不好归类时. </span></span><br><span class="line"><span class="comment">        @RequestMapping(&quot;/menu&quot;) 请求映射 </span></span><br><span class="line"><span class="comment">        @Resource用于注入，( j2ee提供的 ) 默认按名称装配，</span></span><br><span class="line"><span class="comment">        @Resource(name=&quot;beanName&quot;) </span></span><br><span class="line"><span class="comment">        @Autowired用于注入，(srping提供的) 默认按类型装配 </span></span><br><span class="line"><span class="comment">        @Transactional(rollbackFor=&#123;Exception.class&#125;) 事务管理 </span></span><br><span class="line"><span class="comment">        @ResponseBody @Scope(&quot;prototype&quot;)设定bean的作用域</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjun.homebills.controller&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 默认的注解映射的支持 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JSR-303 support will be detected on classpath and enabled automatically --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- http://static.springsource.org/spring/docs/3.0.0.RC3/reference/html/ch05s07.html --&gt;</span><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置视图层 使用jstl标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义视图前缀格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义视图后缀格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>  </span><br></pre></td></tr></table></figure></div>

<h2 id="Controler"><a href="#Controler" class="headerlink" title="Controler"></a>Controler</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjun.homebills.controller;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjun.homebills.domain.Account;  </span><br><span class="line"><span class="keyword">import</span> com.zjun.homebills.service.AccountService;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/account&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;  </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	AccountService accountService;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * Description: 构建REST风格 /account/list的GET请求时才执行该方法的操作RequestMethod.GET表示</span></span><br><span class="line"><span class="comment">	 * 只处理GET请求</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">	 *            用于上下文参数传递</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 视图页面 account/list 结合user-servlet.xml中配置的视图模型匹配视图页面</span></span><br><span class="line"><span class="comment">	 *         实例中方法返回表示/WEB-INF/jsp/account/list.jsp页面</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">		List&lt;Account&gt; accounts = accountService.getAll();</span><br><span class="line">		model.addAttribute(<span class="string">&quot;accounts&quot;</span>, accounts);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;account/list&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/add&quot;, method = RequestMethod.GET)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">		model.addAttribute(<span class="string">&quot;account&quot;</span>, <span class="keyword">new</span> <span class="title class_">Account</span>()); <span class="comment">// 开启ModelDriven</span></span><br><span class="line">														<span class="comment">// 跳转到增加页面时使用该Model</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;account/add&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * Description: 添加操作 请求/account/add form表单提交时使用的post请求调用该方法</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">	 *            添加的User对象</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> br</span></span><br><span class="line"><span class="comment">	 *            验证绑定</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 视图页面 添加成功 请求重定向redirect:/account/list 表示执行操作结束后请求定向为/user/users</span></span><br><span class="line"><span class="comment">	 *         添加失败 页面转到/WEB-INF/jsp/add.jsp 这里有验证绑定,将在视图页面展示验证错误信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/add&quot;, method = RequestMethod.POST)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(<span class="meta">@Validated</span> Account account, BindingResult br)</span></span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">// 需要说明的是BindingResult形参一定要跟@Validated修饰的形参后面写验证</span></span><br><span class="line">		<span class="keyword">if</span> (br.hasErrors()) &#123; <span class="comment">// 如果有错误,直接跳转到添加视图</span></span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;account/add&quot;</span>; <span class="comment">// 服务端跳转 该跳转会自动在前面增加 forward</span></span><br><span class="line">		&#125;</span><br><span class="line">		accountService.save(account);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;redirect:/account/list&quot;</span>; <span class="comment">// 客户端跳转 使用 redirect</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * Description: 预更新操作根据用户名查询用户信息 然后数据交给携带体 展示到视图 REST风格: /更新的用户的用户名/update</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@PathVariable</span>修饰 表示形参同URL中的请求参数</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">	 *            携带数据的Model</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 视图页面/WEB-INF/jsp/account/update页面</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;/update&quot;, method = RequestMethod.GET)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, Model model)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;获取到传入的参数值为:&quot;</span> + id);</span><br><span class="line">		<span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountService.findById(id);</span><br><span class="line">		model.addAttribute(account);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;account/update&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * Description: 真正更新的操作 REST风格： /更新的id/update</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">	 *            带更新的用户的用户名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">	 *            带更新的用户的信息对象 <span class="doctag">@Validated</span>修饰表示信息需要被验证</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> br</span></span><br><span class="line"><span class="comment">	 *            验证信息绑定对象 必须紧跟在待验证的信息形参后面</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 视图页面 更新成功 请求重定向 /account/list 更新失败 转到/WEB-INF/jsp/account/update.jsp页面</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;/update&quot;, method = RequestMethod.POST)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, <span class="meta">@Validated</span> Account account,</span></span><br><span class="line"><span class="params">			BindingResult br)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (br.hasErrors()) &#123; <span class="comment">// 如果有错误,直接跳转到修改视图</span></span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;account/update&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		accountService.update(account);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;redirect:/account/list&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * Description: 删除操作 REST风格:/删除的id/delete</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">	 *            删除的用户名 类似表主键,可以标记到整个记录信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 视图页面 请求重定向到 /account/list</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;/delete&quot;, method = RequestMethod.GET)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;获取到传入的参数值为:&quot;</span> + id);</span><br><span class="line">		accountService.deleteById(id);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;redirect:/account/list&quot;</span>;</span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>

<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String path = request.getContextPath();</span><br><span class="line">    String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%=basePath%&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>账户<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%=basePath %&gt;/account/add&quot;</span>&gt;</span>添加账户<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;accounts&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;account.id &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;account.name &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    			<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    	 			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%=basePath %&gt;/account/$&#123;account.id &#125;/update&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%=basePath %&gt;/account/$&#123;account.id &#125;/delete&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Go笔记4：接口</title>
    <url>/2013/12/745ed4880698.html</url>
    <content><![CDATA[<h2 id="什么是接口-interface"><a href="#什么是接口-interface" class="headerlink" title="什么是接口(interface)"></a>什么是接口(interface)</h2><p>Golang中的interface是一组method的组合，我们通过interface来定义对象的一组行为。<strong>如果某个对象实现了某个接口的所有方法，则此对象就实现了此接口。</strong></p>
<p>比如：  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义interface</span></span><br><span class="line"><span class="keyword">type</span> Men <span class="keyword">interface</span> &#123;</span><br><span class="line">    SayHi()</span><br><span class="line">    Sing(lyrics <span class="type">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义struct</span></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">    phone <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Human对象实现Sayhi方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span></span> SayHi() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Hi, I am %s you can call me on %s\n&quot;</span>, h.name, h.phone)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Human对象实现Sing方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span></span> Sing(lyrics <span class="type">string</span>) &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;La la, la la la, la la la la la...&quot;</span>, lyrics)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在上面的例子中对象Human实现了接口Men中的所有方法，所以Human可以被看作一个Men类型的对象，照此类推：<strong>一个接口可以被多个不同的对象思想，同理，一个对象也可以实现多个接口</strong>。</p>
<h2 id="interface变量的值"><a href="#interface变量的值" class="headerlink" title="interface变量的值"></a>interface变量的值</h2><p>一个interface的变量，可以存实现这个interface的任意类型的对象。</p>
<h2 id="空interface"><a href="#空interface" class="headerlink" title="空interface"></a>空interface</h2><p>空interface(<code>interface&#123;&#125;</code>)不包含任何的method，所以所有的类型都默认实现了空interface。空interface在我们需要存储任意类型的数值的时候相当有用，因为它可以存储任意类型的数值。它有点类似于java语言的Object对象。  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 定义a为空接口  </span></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">5</span></span><br><span class="line">s := <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="comment">// a可以存储任意类型的数值</span></span><br><span class="line">a = i</span><br><span class="line">a = s</span><br></pre></td></tr></table></figure></div>
<p><strong>一个函数把interface{}作为参数，那么他可以接受任意类型的值作为参数，如果一个函数返回interface{},那么也就可以返回任意类型的值。</strong></p>
<h2 id="嵌入interface"><a href="#嵌入interface" class="headerlink" title="嵌入interface"></a>嵌入interface</h2><p>和struct中的匿名字段类似：如果一个interface1作为interface2的一个嵌入字段，那么interface2隐式的包含了 interface1 里面的method。</p>
<p>比如：io包下面的 io.ReadWriter ，他包含了io包下面的Reader和Writer两个interface。  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a class="link"   href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/02.6.md" >Go Web编程：interface <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>在Sublime Text2中开发Golang</title>
    <url>/2014/01/759bcd250fb1.html</url>
    <content><![CDATA[<p>Sublime Text 2 是一个可定制程度相当高的轻量级编辑器,具有丰富的第三方插件，关键是可以无限期的免费使用。下面就介绍通过安装几种插件，将Sublime Text 2定制成为一款相当好用的Golang IDE。  </p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol>
<li>下载<a class="link"   href="http://www.sublimetext.com/" >Sublime Text 2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </li>
<li>安装</li>
</ol>
<h2 id="安装Package-Control"><a href="#安装Package-Control" class="headerlink" title="安装Package Control"></a>安装Package Control</h2><ol>
<li>按Ctrl + &#96; 打开console  </li>
<li>粘贴下列代码到console并回车  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import urllib2,os;pf=<span class="string">&#x27;Package Control.sublime-package&#x27;</span>;ipp=sublime.installed_packages_path();os.makedirs(ipp) <span class="keyword">if</span> not os.path.exists(ipp) <span class="keyword">else</span> None;open(os.path.join(ipp,pf),<span class="string">&#x27;wb&#x27;</span>).write(urllib2.urlopen(<span class="string">&#x27;http://sublime.wbond.net/&#x27;</span>+pf.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;%20&#x27;</span>)).<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure></div>
重启Sublime Text 2, 重启后，如果在 Preferences菜单下，多出一个菜单项 Package Control，说明安装成功。</li>
</ol>
<h2 id="安装-gocode"><a href="#安装-gocode" class="headerlink" title="安装 gocode"></a>安装 <a class="link"   href="https://github.com/nsf/gocode" >gocode <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><p>打开终端，输入以下内容（需要安装git工具):   </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go get github.com/nsf/gocode  </span><br><span class="line">go install github.com/nsf/gocode  </span><br></pre></td></tr></table></figure></div>
<p>安装完成后，我们可以在 go&#x2F;bin 目录下，发现多出了个 gocode 文件。  </p>
<h2 id="安装-Gosublime-插件"><a href="#安装-Gosublime-插件" class="headerlink" title="安装 Gosublime 插件"></a>安装 Gosublime 插件</h2><ol>
<li>Ctrl+Shift+p 打开Package Controll 输入pcip（即“Package Control: Install Package”的缩写）  </li>
<li>输入GoSublime，回车开始安装</li>
</ol>
<h2 id="安装-SidebarEnhancements-插件"><a href="#安装-SidebarEnhancements-插件" class="headerlink" title="安装 SidebarEnhancements 插件"></a>安装 SidebarEnhancements 插件</h2><ol>
<li>Ctrl+Shift+p 打开Package Controll 输入pcip  </li>
<li>输入SidebarEnhancements，回车开始安装</li>
</ol>
<h2 id="安装-Go-Build-插件"><a href="#安装-Go-Build-插件" class="headerlink" title="安装 Go Build 插件"></a>安装 Go Build 插件</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>Ctrl+Shift+p 打开Package Controll 输入pcip  </li>
<li>输入 <a class="link"   href="https://github.com/cthackers/SublimeGoBuild" >Go Build <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，回车开始安装</li>
</ol>
<p>如果通过Package Controll 不能安装 Go Build, 那么可以通过git手动安装：  </p>
<ul>
<li><p>For Windows:<br>Open a cmd, go to <code>%APPDATA%\Sublime Text 2\Packages</code> and type…</p>
</li>
<li><p>For Linux:<br>Open a shell, go to <code>~/.config/Sublime Text 2/Packages</code> and type…</p>
<p>  <code>git clone git://github.com/cthackers/SublimeGoBuild.git</code></p>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><code>F5</code> to run your project</li>
<li><code>F7</code> to build</li>
<li><code>CTRL + F5</code> to run tests</li>
</ul>
<h2 id="安装-Git-Gutter-插件"><a href="#安装-Git-Gutter-插件" class="headerlink" title="安装 Git Gutter 插件"></a>安装 Git Gutter 插件</h2><p><a class="link"   href="https://github.com/jisaacks/GitGutter" >Git Gutter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> is a sublime text 2&#x2F;3 plugin to show an icon in the gutter area indicating whether a line has been inserted, modified or deleted.  </p>
<ol>
<li>Ctrl+Shift+p 打开Package Controll 输入pcip  </li>
<li>输入 Git Gutter，回车开始安装</li>
</ol>
<h2 id="安装-SideBarGit-插件"><a href="#安装-SideBarGit-插件" class="headerlink" title="安装 SideBarGit 插件"></a>安装 SideBarGit 插件</h2><p><a class="link"   href="https://github.com/SublimeText/SideBarGit" >SideBarGit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> provides git commands on Side Bar of Files and Folders for Sublime Text 2.  </p>
<ol>
<li>Ctrl+Shift+p 打开Package Controll 输入pcip  </li>
<li>输入 SideBarGit，回车开始安装</li>
</ol>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Spring Data JPA 简化持久层的开发</title>
    <url>/2013/12/593d9ddfa858.html</url>
    <content><![CDATA[<p>最近看到<a class="link"   href="http://www.springside.org.cn/" >SpringSide <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>最新版的<a class="link"   href="https://github.com/springside/springside4/wiki/Design" >技术选型 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中提到了<a class="link"   href="http://www.springsource.org/spring-data/jpa" >Spring Data JPA <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,号称只需要实现接口就可以实现大部分操作。真有怎么神奇？于是Google一番，果然好使，在这里记录一下：</p>
<span id="more"></span>
<h2 id="需要的包"><a href="#需要的包" class="headerlink" title="需要的包"></a>需要的包</h2><ul>
<li>spring 3.x(4.0)</li>
<li>spring data jpa 1.4.2</li>
<li>spring data commons 1.5 or later</li>
<li>hibernate 4  </li>
<li>JUnit 4.11</li>
<li>log4j 1.2.14</li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="persistence-xml"><a href="#persistence-xml" class="headerlink" title="persistence.xml"></a>persistence.xml</h3><p>根据JPA的规范，要在类路径下的META-INF文件夹中创建<strong>persistence.xml</strong>文件，spring提供了<strong>org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean</strong>来进行配置，persistence.xml中的属性都可以在这个bean中进行注入。  </p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/persistence&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">&quot;appName&quot;</span> <span class="attr">transaction-type</span>=<span class="string">&quot;RESOURCE_LOCAL&quot;</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.ejb.HibernatePersistence<span class="tag">&lt;/<span class="name">provider</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/appname&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.dialect.MySQL5Dialect&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.use_sql_comments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span>  </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span>  </span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">**说明:**   </span><br><span class="line">1. **persistence-unit**是定义一个单元名称,可以定义多个，在实际使用的时候选择其中一个就可以了。将在后面的**applicationContext.xml**中使用。    </span><br><span class="line">2. 这里的META-INF是classpath下的目录，不是WEB目录下与WEB-INF同级那个目录，要注意区分，我刚开始的时候就是混淆了这两个目录，搞了很久。  </span><br><span class="line"></span><br><span class="line">### applicationContext.xml</span><br><span class="line">```xml</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span> <span class="attr">xmlns:jpa</span>=<span class="string">&quot;http://www.springframework.org/schema/data/jpa&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd&quot;</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span>      </span><br><span class="line">	 </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjun.appname&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">&lt;!-- 启用 annotation事务--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span>  </span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置事务管理器 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;entityManagerFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;entityManagerFactory&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;entityManagerFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;persistenceUnitName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;appName&quot;</span> /&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;persistenceXmlLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:META-INF/persistence.xml&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jpaVendorAdapter&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;generateDdl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;showSql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置Spring Data JPA扫描目录--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjun.appname.dao&quot;</span>  <span class="attr">repository-impl-postfix</span>=<span class="string">&quot;Impl&quot;</span> <span class="attr">entity-manager-factory-ref</span>=<span class="string">&quot;entityManagerFactory&quot;</span> <span class="attr">transaction-manager-ref</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>说明：</strong>主要就是 <code>&lt;jpa:repositories base-package=&quot;com.zjun.appname.dao&quot;/&gt;</code>，这个可以扫描repository接口。</p>
<h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line">log4j.rootLogger=debug, stdout</span><br><span class="line">log4j.logger.footmark=debug</span><br></pre></td></tr></table></figure></div>
<h2 id="创建-Domain-类"><a href="#创建-Domain-类" class="headerlink" title="创建 Domain 类"></a>创建 Domain 类</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="meta">@Table(name = &quot;account&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;  </span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1487994788928657645L</span>;  </span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;  </span><br><span class="line">	<span class="keyword">private</span> String name;  </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Id</span>  </span><br><span class="line">	<span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span>  </span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;  </span><br><span class="line">		<span class="keyword">return</span> id;  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;  </span><br><span class="line">		<span class="built_in">this</span>.id = id;  </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Column(name = &quot;name&quot;)</span>  </span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  </span><br><span class="line">		<span class="keyword">return</span> name;  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">		<span class="built_in">this</span>.name = name;  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>

<h2 id="创建-DAO-类"><a href="#创建-DAO-类" class="headerlink" title="创建 DAO 类"></a>创建 DAO 类</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;Account, Integer&gt; &#123;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>

<p><strong>说明：</strong>  </p>
<ul>
<li>这里实现的是 <strong>CrudRepository</strong> 接口， 通过这个接口 Spring Data JPA 默认提供了全套的增删改查(CRUD)操作；  </li>
<li>也可以实现 <strong>JpaRepository</strong>接口，通过定义方法名来定制需要的操作；  </li>
<li>泛型中的参数，第一个是Entry类，第二个是这个类ID的类型；</li>
<li>根据规范来对方法进行命名，比如 findByUsername 意思是通过username栏位进行数据查找，具体可以参照下面的表格：</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/11/09/879UlD1W3H24iN5.jpg"
                     
                ></p>
<h2 id="Unit-Test-Case"><a href="#Unit-Test-Case" class="headerlink" title="Unit Test Case"></a>Unit Test Case</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span>  </span><br><span class="line"><span class="meta">@TestExecutionListeners(&#123; DependencyInjectionTestExecutionListener.class,</span></span><br><span class="line"><span class="meta">		TransactionalTestExecutionListener.class &#125;)</span>  </span><br><span class="line"><span class="meta">@Transactional</span>  </span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123; &quot;classpath:spring-appname-cfg.xml&quot; &#125;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAccountDao</span> &#123;  </span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ApplicationContext ctx;  </span><br><span class="line">	<span class="keyword">private</span> AccountDao accountDao;  </span><br><span class="line">	<span class="keyword">private</span> Account account;  </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span>  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;  </span><br><span class="line">		ctx = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-appname-cfg.xml&quot;</span>);  </span><br><span class="line">		accountDao = ctx.getBean(<span class="string">&quot;accountDao&quot;</span>, AccountDao.class);   </span><br><span class="line">		account = <span class="keyword">new</span> <span class="title class_">Account</span>();  </span><br><span class="line">		account.setName(<span class="string">&quot;for testing&quot;</span>);  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span>  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;  </span><br><span class="line">		ctx = <span class="literal">null</span>;  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span>  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCRUD</span><span class="params">()</span> &#123;  </span><br><span class="line">		<span class="comment">// Test create  </span></span><br><span class="line">		<span class="type">Account</span> <span class="variable">a</span> <span class="operator">=</span> accountDao.save(account);  </span><br><span class="line">		<span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> accountDao.count();  </span><br><span class="line">		Assert.assertEquals(<span class="number">1</span>, count);  </span><br><span class="line"></span><br><span class="line">		<span class="comment">// Test find  </span></span><br><span class="line">		<span class="type">Account</span> <span class="variable">b</span> <span class="operator">=</span> accountDao.findOne(a.getId());  </span><br><span class="line">		Assert.assertNotNull(b);  </span><br><span class="line">		Assert.assertEquals(account.getName(), b.getName());  </span><br><span class="line"></span><br><span class="line">		<span class="comment">// Test update  </span></span><br><span class="line">		b.setName(<span class="string">&quot;Test Update&quot;</span>);  </span><br><span class="line">		accountDao.save(b);  </span><br><span class="line">		<span class="type">Account</span> <span class="variable">c</span> <span class="operator">=</span> accountDao.findOne(a.getId());  </span><br><span class="line">		Assert.assertEquals(<span class="string">&quot;Test Update&quot;</span>, c.getName());  </span><br><span class="line"></span><br><span class="line">		<span class="comment">// Test delete  </span></span><br><span class="line">		accountDao.delete(account.getId());  </span><br><span class="line">		<span class="type">Account</span> <span class="variable">d</span> <span class="operator">=</span> accountDao.findOne(account.getId());  </span><br><span class="line">		Assert.assertNull(d);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a class="link"   href="http://www.ibm.com/developerworks/cn/opensource/os-cn-spring-jpa/" >使用 Spring Data JPA 简化 JPA 开发 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="http://mybar.iteye.com/blog/1863390" >Spring-data-jpa 使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="http://docs.spring.io/spring-data/jpa/docs/1.4.2.RELEASE/reference/html/index.html" >Spring Data JPA - Reference Documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="http://docs.spring.io/spring-data/jpa/docs/1.4.2.RELEASE/reference/html/repository-query-keywords.html" >Appendix B. Repository query keywords <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Go笔记5：访问MySQL数据库</title>
    <url>/2014/01/f9928eb01a4c.html</url>
    <content><![CDATA[<h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><p>MySQL驱动： <a class="link"   href="https://github.com/go-sql-driver/mysql" >https://github.com/go-sql-driver/mysql <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 。  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure></div>

<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/Go-SQL-Driver/MySQL&quot;</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;user:password@/dbname&quot;</span>)  </span><br></pre></td></tr></table></figure></div>

<h2 id="关闭数据库连接"><a href="#关闭数据库连接" class="headerlink" title="关闭数据库连接"></a>关闭数据库连接</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">db.Close()</span><br></pre></td></tr></table></figure></div>
<h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;user:password@/dbname?charset=utf8&quot;</span>)  </span><br><span class="line">checkErr(err)  </span><br><span class="line"></span><br><span class="line"><span class="comment">//查询数据  </span></span><br><span class="line">rows, err := db.Query(<span class="string">&quot;SELECT * FROM account&quot;</span>)  </span><br><span class="line">checkErr(err)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;  </span><br><span class="line">	<span class="keyword">var</span> id <span class="type">int</span>  </span><br><span class="line">	<span class="keyword">var</span> name <span class="type">string</span>  </span><br><span class="line">	err = rows.Scan(&amp;id, &amp;name)  </span><br><span class="line">	checkErr(err)  </span><br><span class="line">	fmt.Print(id)  </span><br><span class="line">	fmt.Println(name)  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>

<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;zjun:zjun@/test?charset=utf8&quot;</span>)  </span><br><span class="line">checkErr(err)  </span><br><span class="line"><span class="comment">//插入数据  </span></span><br><span class="line">stmt, err := db.Prepare(<span class="string">&quot;INSERT INTO userinfo(username, departname, created) VALUES(?,?,?)&quot;</span>)  </span><br><span class="line">checkErr(err)  </span><br><span class="line"></span><br><span class="line">res, err := stmt.Exec(<span class="string">&quot;zjun&quot;</span>, <span class="string">&quot;研发部门&quot;</span>, <span class="string">&quot;2014-01-03&quot;</span>)  </span><br><span class="line">checkErr(err)  </span><br><span class="line"></span><br><span class="line">id, err := res.LastInsertId()   </span><br><span class="line">checkErr(err)  </span><br><span class="line"></span><br><span class="line">fmt.Println(id)  </span><br></pre></td></tr></table></figure></div>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新数据</span></span><br><span class="line">stmt, err = db.Prepare(<span class="string">&quot;update userinfo set username=? where uid=?&quot;</span>)</span><br><span class="line">checkErr(err)</span><br><span class="line"></span><br><span class="line">res, err = stmt.Exec(<span class="string">&quot;zjunupdate&quot;</span>, id)</span><br><span class="line">checkErr(err)</span><br><span class="line"></span><br><span class="line">affect, err := res.RowsAffected()</span><br><span class="line">checkErr(err)</span><br><span class="line"></span><br><span class="line">fmt.Println(affect)</span><br></pre></td></tr></table></figure></div>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">stmt, err = db.Prepare(<span class="string">&quot;delete from userinfo where uid=?&quot;</span>)</span><br><span class="line">checkErr(err)</span><br><span class="line"></span><br><span class="line">res, err = stmt.Exec(id)</span><br><span class="line">checkErr(err)</span><br><span class="line"></span><br><span class="line">affect, err = res.RowsAffected()</span><br><span class="line">checkErr(err)</span><br><span class="line"></span><br><span class="line">fmt.Println(affect)</span><br></pre></td></tr></table></figure></div>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a class="link"   href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/05.2.md" >Go Web编程：使用MySQL数据库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go笔记6：Go数据结构</title>
    <url>/2014/01/27185f4f024e.html</url>
    <content><![CDATA[<h2 id="结构与指针"><a href="#结构与指针" class="headerlink" title="结构与指针"></a>结构与指针</h2><p>定义一个叫Point的简单的结构类型，意味着内存里是两个相邻的int。  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123; X , Y <span class="type">int</span> &#125;   </span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://research.swtch.com/godata1a.png"
                     
                ></p>
<p>Point{ 10, 20 }表示一个被初始化的Point对象。<br>&amp;Point{ 10, 20 }则表示一个指向被初始化的Point对象的指针。<br>前者在内存中有两个数据块，而后者则存放着一个指向两个数据块的指针。</p>
<p>结构中的字段被依次地排列在内存里面。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Rect1 <span class="keyword">struct</span> &#123; Min, Max Point &#125;</span><br><span class="line"><span class="keyword">type</span> Rect2 <span class="keyword">struct</span> &#123; Min, Max *Point &#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://research.swtch.com/godata1b.png"
                     
                >  </p>
<p>Rect1是一个拥有两个Point类型字段的结构，它的一条记录包含了两条Point记录——共4个int。Rect2是一个拥有两个Point类型指针的结构，在内存里它占两个Point指针的空间。  </p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>接下来我们看一个字符串的例子：  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://research.swtch.com/godata2.png"
                     
                >   </p>
<p>一个字符串在内存中的表示被分成两段，一个指向字符串数据的指针和一个长度值。对s字符串进行一个切片选择，将得到一个可能不一样的指针和长度，但它们也指向同一段字节序列。这意味着，切片并不需要分配空间或者是复制数据，创建切片很容易，只需要传递明确的下标值就行了。   </p>
<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://research.swtch.com/godata3.png"
                     
                ><br>切片是对数组中一段数据的引用。在内存中它有三段数据组成：一个指向数据头的指针、切片的长度、切片的容量。长度是索引操作的上界，如：x[i] ,容量是切片操作的上界，如：x[i:j]</p>
<p>关于切片的长度(len)和容量(cap),可以通过 <code>len()</code>和<code>cap()</code>函数得到：  </p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">arry := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;  </span><br><span class="line">fmt.Println(arry)      <span class="comment">// [1 2 3 4 5]  </span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(arry)) <span class="comment">// 5  </span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(arry)) <span class="comment">// 5  </span></span><br><span class="line"></span><br><span class="line">slce := arry[<span class="number">1</span>:<span class="number">2</span>]        </span><br><span class="line">fmt.Println(slce)       <span class="comment">// [2]  </span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slce))  <span class="comment">// 1  </span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slce))  <span class="comment">// 4  </span></span><br><span class="line"></span><br><span class="line">slce = arry[<span class="number">1</span>:<span class="number">3</span>]              </span><br><span class="line">fmt.Println(slce)       <span class="comment">// [2 3]  </span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slce))  <span class="comment">// 2  </span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slce))  <span class="comment">// 4  </span></span><br><span class="line"></span><br><span class="line">slce = arry[<span class="number">1</span>:<span class="number">4</span>]        </span><br><span class="line">fmt.Println(slce)       <span class="comment">// [2 3 4]  </span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slce))  <span class="comment">// 3  </span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slce))  <span class="comment">// 4  </span></span><br><span class="line"></span><br><span class="line">slce = arry[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">fmt.Println(slce)       <span class="comment">// [2 3 4 5]  </span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slce))  <span class="comment">// 4  </span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slce))  <span class="comment">// 4  </span></span><br></pre></td></tr></table></figure></div>

<p>从上面的例子可以看出，slice的 len 表示切片中实际存在item的的个数，cap 表示分配的内存空间的大小。__如果是通过对已有数组切片生成的slice ,默认分配的内存空间 cap 是从切片的起始位置到原有数组的结尾__。比如上面的例子： <code>slce := arry[1:2]</code>的 cap() 就是 4。</p>
<h2 id="new和make"><a href="#new和make" class="headerlink" title="new和make"></a>new和make</h2><p>Go有两种创建数据结构的方法：new和make。<br>它们的区别于:  </p>
<ul>
<li><code>new(T)</code>返回一个*T类型，一个可以被隐性反向引用的指针（如图中的黑色指针）   </li>
<li><code>make(T,args)</code>返回一个原始的T，它并不是一个指针。T中常有写隐性的指针（如图中的灰色指针）</li>
</ul>
<p>__new返回一个指向初始化为全0值的指针，而make返回一个复杂的结构__。  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://research.swtch.com/godata4.png"
                     
                ></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a class="link"   href="http://research.swtch.com/godata" >Go Data Structures <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </li>
<li><a class="link"   href="http://www.oschina.net/question/1441707_141799" >【原创翻译】深度剖析Go数据结构 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </li>
<li><a class="link"   href="http://golang.org/doc/effective_go.html#slices" >Effective Go: slices <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </li>
<li><a class="link"   href="http://www.zingscript.com/category/snack" >慎用GO中的SLICE——关于SLICE的隐含陷阱 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </li>
<li><a class="link"   href="http://blog.golang.org/slices" >The Go Blog: Arrays, slices (and strings): The mechanics of ‘append’ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </li>
<li><a class="link"   href="http://www.golang-book.com/6" >Arrays, Slices and Maps <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </li>
<li><a class="link"   href="http://blog.golang.org/go-slices-usage-and-internals" >The Go Blog: Go Slices: usage and internals <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go笔记7:并发</title>
    <url>/2014/02/d65ff11c3013.html</url>
    <content><![CDATA[<p>Golang 给人印象最深刻的一个特性就是：从语言层面支持并行，而且实现起来相当简单。</p>
<h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><p>goroutine是Go并行设计的核心。goroutine其实就是协程，它比线程更小，十几个goroutine可能体现在底层就是五六个线程，Go语言内部实现了这些goroutine之间的内存共享。oroutine比thread更易用、更高效、更轻便。</p>
<p>goroutine通过<code>go</code>关键字实现：</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> hello(a, b, c)  </span><br></pre></td></tr></table></figure></div>

<h2 id="channels"><a href="#channels" class="headerlink" title="channels"></a>channels</h2><p>说到并发，不得不说一下多线程之间的通讯（数据共享），说到这不由的会想起Java中的线程间通讯：通过同步和加锁在线程间传递数据，synchronized, locker, wait, notifyAll…光是想起来都让人头疼。但是Golang中，线程间的通讯实现来就要简单和直观的多，因为它提供了一个很好的通信机制channel。channel与Unix shell 中的双向管道很相似：可以通过它发送或者接收值。</p>
<p>使用make 创建channel(定义一个channel时，也需要定义发送到channel的值的类型)：</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">ci := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)  </span><br><span class="line">cs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)  </span><br><span class="line">cf := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)  </span><br></pre></td></tr></table></figure></div>

<p>channel通过操作符&lt;-来接收和发送数据:</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">ch &lt;- v    <span class="comment">// 发送v到channel ch.  </span></span><br><span class="line">v := &lt;-ch  <span class="comment">// 从ch中接收数据，并赋值给v  </span></span><br></pre></td></tr></table></figure></div>

<p>默认情况下，channel接收和发送数据都是阻塞的，除非另一端已经准备好，这样就使得Goroutines同步变的更加的简单，而不需要显式的lock。所谓阻塞，也就是如果读取（value :&#x3D; &lt;-ch）它将会被阻塞，直到有数据接收。其次，任何发送（ch&lt;-5）将会被阻塞，直到数据被读出。无缓冲channel是在多个goroutine之间同步很棒的工具。</p>
<p>正式由于通过channel我们可以很简单地实现和控制Goroutines之间地同步，所以我们通常遵循一条设计原则：<strong>不要通过共享来通信，而要通过通信来共享。</strong></p>
<h2 id="Buffered-Channels"><a href="#Buffered-Channels" class="headerlink" title="Buffered Channels"></a>Buffered Channels</h2><p>在Golang中实现带缓存地Channel非常简单，就是在申明Channel时指定缓存地大小即可，比如：</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">ch:= <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">4</span>)   </span><br></pre></td></tr></table></figure></div>

<p>创建了可以存储4个元素的bool 型channel。在这个channel 中，前4个元素可以无阻塞的写入。当写入第5个元素时，代码将会阻塞，直到其他goroutine从channel 中读取一些元素.</p>
<h2 id="Range和Close"><a href="#Range和Close" class="headerlink" title="Range和Close"></a>Range和Close</h2><p>Golang中非常贴心地提供可一个Range函数，方便我们通过轮询地方式读取Channel中地值，知道Channel被现实地关闭，避免了低效而且看上去比较愚蠢地一条一条地去读取，例如：</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    x, y := <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        c &lt;- x</span><br><span class="line">        x, y = y, x + y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>for i := range c</code>能够不断的读取channel里面的数据，直到该channel被显式的关闭。上面代码我们看到通过内置函数<code>close</code>显式关闭channel。关闭channel之后就无法再发送任何数据了，可以通过语法<code>v, ok := &lt;-ch</code>测试channel是否被关闭。如果ok返回false，那么说明channel已经没有任何数据并且已经被关闭。</p>
<h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><p>如果存在多个channel的时候，我们可以通过<code>select</code>监听channel上的数据流动。</p>
<p><code>select</code>默认是阻塞的，只有当监听的channel中有发送或接收可以进行时才会运行，当多个channel都准备好的时候，select是随机的选择一个执行的。例如：</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    x, y := <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> c &lt;- x:</span><br><span class="line">            x, y = y, x + y</span><br><span class="line">        <span class="keyword">case</span> &lt;-quit:</span><br><span class="line">            fmt.Println(<span class="string">&quot;quit&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            fmt.Println(&lt;-c)</span><br><span class="line">        &#125;</span><br><span class="line">        quit &lt;- <span class="number">0</span></span><br><span class="line">    &#125;()</span><br><span class="line">    fibonacci(c, quit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>select</code>里面还有default语法，<code>select</code>其实就是类似switch的功能，default就是当监听的channel都没有准备好的时候，默认执行的.</p>
<h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p>我们可以利用select来设置超时，来避免整个程序进入阻塞的情况。例如：</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    o := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> v := &lt;- c:</span><br><span class="line">                    <span class="built_in">println</span>(v)</span><br><span class="line">                <span class="keyword">case</span> &lt;- time.After(<span class="number">5</span> * time.Second):</span><br><span class="line">                    <span class="built_in">println</span>(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">                    o &lt;- <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    &lt;- o</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a class="link"   href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/02.7.md" >Go Web 编程：并发 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中AOP的简单使用</title>
    <url>/2019/05/9e8623f096b1.html</url>
    <content><![CDATA[<h1 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h1><p>AOP （<a class="link"   href="https://so.csdn.net/so/search?q=Aspect&spm=1001.2101.3001.7020" >Aspect <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> Orient Programming）,直译过来就是 <strong>面向切面编程</strong>，是对<strong>面向对象编程</strong>的一种补充。AOP通过动态代理的方式，为系统提供某种通用的功能。</p>
<h1 id="AOP的应用场景"><a href="#AOP的应用场景" class="headerlink" title="AOP的应用场景"></a>AOP的应用场景</h1><p>典型的AOP使用场景有：</p>
<ul>
<li><p>日志记录</p>
</li>
<li><p>事务管理</p>
</li>
<li><p>权限验证</p>
</li>
<li><p>性能检测</p>
</li>
</ul>
<h1 id="AOP的基本概念"><a href="#AOP的基本概念" class="headerlink" title="AOP的基本概念"></a>AOP的基本概念</h1><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul>
<li><p><strong>Joinpoint(连接点)</strong>: 被拦截的点，在Spring中可以被动态代理拦截的目标类方法</p>
</li>
<li><p><strong>Pointcut(切入点)</strong>: 指要对那些 Joinpoint 进行拦截，即被拦截的连接点</p>
</li>
<li><p><strong>Advice(通知)</strong>: 指拦截到 Joinpoint 之后要做的事情，即对切入点增强的内容</p>
</li>
<li><p><strong>Target(目标)</strong>: 指代理的目标对象</p>
</li>
<li><p><strong>Weaving(植入)</strong>: 指把增强代码应用到目标上，生成代理对象的过程</p>
</li>
<li><p><strong>Proxy(代理)</strong>: 指生成的代理对象</p>
</li>
<li><p><strong>Aspect(切面)</strong>: 切入点和通知的结合</p>
</li>
</ul>
<h2 id="AOP-通知分类"><a href="#AOP-通知分类" class="headerlink" title="AOP 通知分类"></a>AOP 通知分类</h2><ul>
<li><p><strong>before(前置通知)</strong>: 通知方法在目标方法调用之前执行</p>
</li>
<li><p><strong>after(后置通知)</strong>: 通知方法在目标方法返回或异常后执行</p>
</li>
<li><p><strong>after-returning(返回后通知)</strong>: 通知方法在目标方法返回后执行</p>
</li>
<li><p><strong>after-throwing(抛出异常通知)</strong>: 通知方法在目标方法抛出异常后执行</p>
</li>
<li><p><strong>around(环绕通知)</strong>: 通知方法会将目标方法封装起来</p>
</li>
</ul>
<h1 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h1><p>下面用一个简单的例子通过AOP来实现方法级的日志记录</p>
<h2 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个方法级别的<span class="doctag">@log</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    String <span class="title function_">operation</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="定义切面"><a href="#定义切面" class="headerlink" title="定义切面"></a>定义切面</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAsPect</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切入点: 表示匹配带有自定义注解的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.zjun.aoplog.Log)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationLog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在切入点的前后执行增强方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint point)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">beginTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;在目标方法之前执行！&quot;</span>);</span><br><span class="line">            result = point.proceed();</span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            log.info(<span class="string">&quot;目标方法执行时间：&#123;&#125;&quot;</span>,endTime-beginTime);        </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>关于<code>AOP</code>的几个重要注解：</p>
<ul>
<li><code>@Aspect</code>:这个注解表示将当前类视为一个切面类</li>
<li><code>@Component</code>：表示将当前类交由<code>Spring</code>管理。</li>
<li><code>@Pointcut</code>:切点表达式,定义我们的匹配规则，上边我们使用<code>@Pointcut(&quot;@annotation(com.zjun.aoplog.Log)&quot;)</code>表示匹配带有我们自定义注解的方法。</li>
<li><code>@Around</code>:环绕通知，可以在目标方法执行前后执行一些操作，以及目标方法抛出异常时执行的操作。</li>
</ul>
<h2 id="在Controller中使用切面"><a href="#在Controller中使用切面" class="headerlink" title="在Controller中使用切面"></a>在Controller中使用切面</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/aop&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@Log(&quot;测试aoplog&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aop</span><span class="params">(String name, String nick)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        log.info(<span class="string">&quot;目标方法执行了！&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;res&quot;</span>, <span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>执行结果：</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">在目标方法之前执行！</span><br><span class="line">目标方法执行了！</span><br><span class="line">目标方法执行时间：6</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate中的关系映射</title>
    <url>/2007/03/8ab61ae12607.html</url>
    <content><![CDATA[<h1 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ManyToMany()</span></span><br><span class="line"><span class="meta">@JoinTable(name=&quot;t_role_rights&quot;,joinColumns=&#123; @JoinColumn(name=&quot;right_id&quot;)&#125;,</span></span><br><span class="line"><span class="meta">             inverseJoinColumns=&#123; @JoinColumn(name= &quot;role_id&quot;) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Role&gt; <span class="title function_">getRoles</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因为多对多之间会通过一张中间表来维护两表直接的关系，所以通过 <code>JoinTable</code>这个注解来声明，<code>name</code>就是指定了中间表的名字，<code>JoinColumns</code>是一个<code>@JoinColumn</code>类型的数组，表示的是我这方在对方中的外键名称，我方是<strong>Right</strong>，所以在对方外键的名称就是 <strong>right_id</strong>，<code>inverseJoinColumns</code>也是一个<code>@JoinColumn</code>类型的数组，表示的是对方在我这放中的外键名称，对方是<strong>Role</strong>，所以在我方外键的名称就是 <strong>role_id</strong></p>
<h1 id="一对多-和-多对一"><a href="#一对多-和-多对一" class="headerlink" title="一对多 和 多对一"></a>一对多 和 多对一</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置客户和联系人之间的关系（一对多关系）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用注解的形式配置多表关系</span></span><br><span class="line"><span class="comment"> *      1.声明关系</span></span><br><span class="line"><span class="comment"> *          <span class="doctag">@OneToMany</span> : 配置一对多关系</span></span><br><span class="line"><span class="comment"> *              targetEntity ：对方对象的字节码对象</span></span><br><span class="line"><span class="comment"> *      2.配置外键（中间表）</span></span><br><span class="line"><span class="comment"> *              <span class="doctag">@JoinColumn</span> : 配置外键</span></span><br><span class="line"><span class="comment"> *                  name：外键字段名称</span></span><br><span class="line"><span class="comment"> *                  referencedColumnName：参照的主表的主键字段名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  * 在客户实体类上（一的一方）添加了外键了配置，所以对于客户而言，也具备了维护外键的作用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @OneToMany(targetEntity = LinkMan.class)</span></span><br><span class="line"><span class="comment">//    @JoinColumn(name = &quot;lkm_cust_id&quot;,referencedColumnName = &quot;cust_id&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 放弃外键维护权</span></span><br><span class="line"><span class="comment"> *      mappedBy：对方配置关系的属性名称\</span></span><br><span class="line"><span class="comment"> * cascade : 配置级联（可以配置到设置多表的映射关系的注解上）</span></span><br><span class="line"><span class="comment"> *      CascadeType.all         : 所有</span></span><br><span class="line"><span class="comment"> *                  MERGE       ：更新</span></span><br><span class="line"><span class="comment"> *                  PERSIST     ：保存</span></span><br><span class="line"><span class="comment"> *                  REMOVE      ：删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * fetch : 配置关联对象的加载方式</span></span><br><span class="line"><span class="comment"> *          EAGER   ：立即加载</span></span><br><span class="line"><span class="comment"> *          LAZY    ：延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@OneToMany(mappedBy = &quot;customer&quot;,cascade = CascadeType.ALL)</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan&gt; linkMans = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置联系人到客户的多对一关系</span></span><br><span class="line"><span class="comment"> *     使用注解的形式配置多对一关系</span></span><br><span class="line"><span class="comment"> *      1.配置表关系</span></span><br><span class="line"><span class="comment"> *          <span class="doctag">@ManyToOne</span> : 配置多对一关系</span></span><br><span class="line"><span class="comment"> *              targetEntity：对方的实体类字节码</span></span><br><span class="line"><span class="comment"> *      2.配置外键（中间表）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 配置外键的过程，配置到了多的一方，就会在多的一方维护外键</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ManyToOne(targetEntity = Customer.class,fetch = FetchType.LAZY)</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;lkm_cust_id&quot;,referencedColumnName = &quot;cust_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Customer customer;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 全局异常处理</title>
    <url>/2019/08/b3d504d77f20.html</url>
    <content><![CDATA[<p>SpringBoot中有一个<code>ControllerAdvice</code>的注解，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用<code>ExceptionHandler</code>注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处理。</p>
<h1 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;处理空指针的异常&quot;)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value =NullPointerException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResultBody <span class="title function_">npeHandler</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;发生空指针异常！原因是:&quot;</span>,e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="literal">null</span>).message(<span class="string">&quot;执行了全局处理异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ResultBody.error(CommonEnum.BODY_NOT_MATCH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;处理其他异常&quot;)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value =Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResultBody <span class="title function_">exceptionHandler</span><span class="params">(HttpServletRequest req, Exception e)</span>&#123;</span><br><span class="line">         logger.error(<span class="string">&quot;未知异常！原因是:&quot;</span>,e);</span><br><span class="line">         <span class="keyword">return</span> ResultBody.error(CommonEnum.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="统一返回枚举类"><a href="#统一返回枚举类" class="headerlink" title="统一返回枚举类"></a>统一返回枚举类</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseErrorInfoInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getResultCode</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getResultMsg</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CommonEnum</span> <span class="keyword">implements</span> <span class="title class_">BaseErrorInfoInterface</span>&#123;</span><br><span class="line">    <span class="comment">// 数据操作错误定义</span></span><br><span class="line">    SUCCESS(<span class="string">&quot;200&quot;</span>, <span class="string">&quot;成功!&quot;</span>), </span><br><span class="line">    BODY_NOT_MATCH(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;请求的数据格式不符!&quot;</span>),</span><br><span class="line">    SIGNATURE_NOT_MATCH(<span class="string">&quot;401&quot;</span>,<span class="string">&quot;请求的数字签名不匹配!&quot;</span>),</span><br><span class="line">    NOT_FOUND(<span class="string">&quot;404&quot;</span>, <span class="string">&quot;未找到该资源!&quot;</span>), </span><br><span class="line">    INTERNAL_SERVER_ERROR(<span class="string">&quot;500&quot;</span>, <span class="string">&quot;服务器内部错误!&quot;</span>),</span><br><span class="line">    SERVER_BUSY(<span class="string">&quot;503&quot;</span>,<span class="string">&quot;服务器正忙，请稍后再试!&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 错误码 */</span></span><br><span class="line">    <span class="keyword">private</span> String resultCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 错误描述 */</span></span><br><span class="line">    <span class="keyword">private</span> String resultMsg;</span><br><span class="line"></span><br><span class="line">    CommonEnum(String resultCode, String resultMsg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.resultCode = resultCode;</span><br><span class="line">        <span class="built_in">this</span>.resultMsg = resultMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getResultCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resultCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getResultMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resultMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="统计返回结果类"><a href="#统计返回结果类" class="headerlink" title="统计返回结果类"></a>统计返回结果类</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(value = &quot;全局统一返回结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseBean</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseBean</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseBean</span><span class="params">(BaseErrorInfoInterface errorInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = errorInfo.getResultCode();</span><br><span class="line">        <span class="built_in">this</span>.message = errorInfo.getResultMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data= data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseBean <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseBean <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="type">ResponseBean</span> <span class="variable">rb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseBean</span>();</span><br><span class="line">        rb.setCode(CommonEnum.SUCCESS.getResultCode());</span><br><span class="line">        rb.setMessage(CommonEnum.SUCCESS.getResultMsg());</span><br><span class="line">        rb.setData(data);</span><br><span class="line">        <span class="keyword">return</span> rb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseBean <span class="title function_">error</span><span class="params">(BaseErrorInfoInterface errorInfo)</span> &#123;</span><br><span class="line">        <span class="type">ResponseBean</span> <span class="variable">rb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseBean</span>();</span><br><span class="line">        rb.setCode(errorInfo.getResultCode());</span><br><span class="line">        rb.setMessage(errorInfo.getResultMsg());</span><br><span class="line">        rb.setData(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> rb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseBean <span class="title function_">error</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        <span class="type">ResponseBean</span> <span class="variable">rb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseBean</span>();</span><br><span class="line">        rb.setCode(code);</span><br><span class="line">        rb.setMessage(message);</span><br><span class="line">        rb.setData(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> rb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseBean <span class="title function_">error</span><span class="params">( String message)</span> &#123;</span><br><span class="line">        <span class="type">ResponseBean</span> <span class="variable">rb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseBean</span>();</span><br><span class="line">        rb.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        rb.setMessage(message);</span><br><span class="line">        rb.setData(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> rb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Optional处理null</title>
    <url>/2018/08/d239c27ca7d9.html</url>
    <content><![CDATA[<p>Java 8引入了一个Optional类，用来解决空指针异常(NullPointerException)。刚开始使用的时候看到<code>ifPresent()</code>,<code>isPresent()</code>和<code>get()</code>这些函数，感觉和直接通过比较<code>null</code>值的方式差别不大，纯属<strong>脱了裤子放屁</strong>。可是后来看到一些最佳实践的代码例子，才发觉是之前肤浅了，没有理解到Optional的正确的打开方式，所以在这里记录一下。</p>
<h1 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h1><p><strong>使用Optional之前</strong><br>如果一个类中嵌套了很多层的对象，那么为了访问最里层的嵌套对象，不得不写出下面这种很繁琐的代码。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> user.getAddress();</span><br><span class="line">    <span class="keyword">if</span> (address != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Country</span> <span class="variable">country</span> <span class="operator">=</span> address.getCountry();</span><br><span class="line">        <span class="keyword">if</span> (country != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">isocode</span> <span class="operator">=</span> country.getIsocode();</span><br><span class="line">            <span class="keyword">if</span> (isocode != <span class="literal">null</span>) &#123;</span><br><span class="line">                isocode = isocode.toUpperCase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>使用Optional后</strong><br>如果使用Optional的话，只需要一行代码就可以搞定。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">isocode</span> <span class="operator">=</span> Optional.ofNullable(user)</span><br><span class="line">    .map(u -&gt; u.getAddress())</span><br><span class="line">    .map(a -&gt; a.getCountry())</span><br><span class="line">    .map(c -&gt; c.getIsocode())</span><br><span class="line">    .orElse(<span class="string">&quot;default&quot;</span>);</span><br></pre></td></tr></table></figure></div>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="Optional-是用来作为方法返回值的"><a href="#Optional-是用来作为方法返回值的" class="headerlink" title="Optional 是用来作为方法返回值的"></a>Optional 是用来作为方法返回值的</h2><p>Optional 是为了清晰地表达返回值中没有结果的可能性，且如果直接返回 null 很可能导致调用端产生错误（尤其是NullPointerException）。通常用来作为方法返回值，不建议用着方法参数。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个可能为空的 Optional 对象</span></span><br><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure></div>
<h2 id="使用orElse-orElseGet-orElseThrow-取值"><a href="#使用orElse-orElseGet-orElseThrow-取值" class="headerlink" title="使用orElse(),orElseGet(),orElseThrow()取值"></a>使用orElse(),orElseGet(),orElseThrow()取值</h2><ul>
<li><strong>T orElse(T other)</strong>: 如果值存在返回，否则返回orElse中传入的other</li>
<li><strong>T orElseGet(Supplier&lt;? extends T&gt; other)</strong> ：如果存在则返回该值，否则调用other这个函数编程并返回该调用的结果</li>
<li><strong>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</strong>: 如果存在则返回该值，否则为空的话可以抛出自定义的异常<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orElse(T other)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&quot;Hello, &quot;</span> + name.orElse(<span class="string">&quot;Guest&quot;</span>); <span class="comment">//如果 Optional 对象包含一个非空的值，返回该值，否则返回给定的默认值</span></span><br><span class="line">System.out.println(greeting); <span class="comment">// 输出：Hello Guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orElseGet(Supplier&lt;? extends T&gt; supplier)</span></span><br><span class="line">greeting = <span class="string">&quot;Hello, &quot;</span> + name.orElseGet(() -&gt; <span class="string">&quot;Guset&quot;</span>);<span class="comment">//如果 Optional 对象包含一个非空的值，返回该值，否则返回由给定的供应者操作生成的值</span></span><br><span class="line">System.out.println(greeting); <span class="comment">// 输出：Hello Guset</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</span></span><br><span class="line">greeting = <span class="string">&quot;Hello, &quot;</span> + name.orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;null&quot;</span>));<span class="comment">//如果 Optional 对象包含一个非空的值，返回该值，否则抛出由给定的异常供应者操作生成的异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抛出 java.lang.NullPointerException: null 异常</span></span><br></pre></td></tr></table></figure></div>

  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>orElseGet和orElse的区别？</p>

    </div>
    <div class="notel-content">
      <p>当 ofNullable() 传入参数不为空时，orElse() 方法仍然创建了 other这个 对象，而orElseGet() 方法不创建对象。在执行较密集的调用时，这个差异会对性能产生重大影响</p>

    </div>
  </div></li>
</ul>
<h2 id="使用map-和filter-函数做转换"><a href="#使用map-和filter-函数做转换" class="headerlink" title="使用map()和filter()函数做转换"></a>使用map()和filter()函数做转换</h2><ul>
<li><strong>Optional filter(Predicate&lt;? super T&gt; predicate)</strong>: 对Optional中的value进行过滤，如果不匹配，返回空</li>
<li><ul>
<li><strong>Optional map(Function&lt;? super T, ? extends U&gt; mapper)</strong>: 对Optional中的value进行转换映射为另外一个对象，如果value为空，返回empty Optional</li>
</ul>
</li>
<li><strong>Optional flatMap(Function&lt;? super T, Optional&gt; mapper)</strong>: 接受一个返回值为Optional的映射函数参数,该返回值亦是flatMap方法的返回值若结果为空，则返回 空Optional<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 map(Function&lt;? super T,? extends U&gt; mapper)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&quot;Hello, &quot;</span> + name.map(s -&gt; s.toUpperCase()).get();<span class="comment">//如果 Optional 对象包含一个非空的值，对该值应用给定的映射函数，返回一个包含映射结果的 Optional 对象，否则返回一个空的 Optional 对象</span></span><br><span class="line">System.out.println(greeting); <span class="comment">// 输出：Hello JOHN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// filter(Predicate&lt;? super T&gt; predicate)</span></span><br><span class="line">greeting = <span class="string">&quot;Hello &quot;</span> + name.filter(s -&gt; !s.isEmpty()).get();<span class="comment">//如果 Optional 对象包含一个非空的值，并且该值满足给定的谓词条件，返回包含该值的 Optional 对象，否则返回一个空的 Optional 对象</span></span><br><span class="line">System.out.println(greeting); <span class="comment">// 输出：Hello john</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a class="link"   href="https://winterbe.com/posts/2015/03/15/avoid-null-checks-in-java/" >Avoiding Null Checks in Java 8 - winterbe <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>HighCharts笔记之: Bar Chart</title>
    <url>/2013/03/af0dd2fed41a.html</url>
    <content><![CDATA[<p>最近需要做一些Web图标，研究了几个开源的第三方工具后，最后决定使用<strong>HighCharts</strong>开发：</p>
<p><strong>Highcharts</strong> 是一个用纯JavaScript编写的一个图表库, 能够很简单便捷的在web网站或是web应用程序添加有交互性的图表，并且免费提供给个人学习、个人网站和非商业用途使用。目前HighCharts支持的图表类型有曲线图、区域图、柱状图、饼状图、散状点图和综合图表。<br>HighCharts界面美观，由于使用JavaScript编写，所以不需要像Flash和Java那样需要插件才可以运行，而且运行速度快。另外HighCharts还有很好的兼容性，能够完美支持当前大多数浏览器。</p>
<p>HighCharts 可以通过JSON 数据格式与后台交互，从而生成动态的图表。但是在官方的文档中关于 JSON 数据格式的资料很少，经过一下午的调试终于找到了关于柱状图和饼图的数据格式，在这里记录一下，以备后续的查询：  </p>
<h2 id="柱状图："><a href="#柱状图：" class="headerlink" title="柱状图："></a>柱状图：</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://farm9.staticflickr.com/8382/8596618053_22114c25cc_b.jpg"
                     
                ><br>JSON Data</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Actual&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">12</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Target&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></div>

<p>Javascript code</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> options = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">chart</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">renderTo</span>: <span class="string">&#x27;container&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">defaultSeriesType</span>: <span class="string">&#x27;bar&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subtitle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">categories</span>: [<span class="string">&#x27;Activity Entry&#x27;</span>, <span class="string">&#x27;Activity Update&#x27;</span>, <span class="string">&#x27;Blog Entry&#x27;</span>, <span class="string">&#x27;Blog Comments&#x27;</span>, <span class="string">&#x27;Feed&#x27;</span>,<span class="string">&#x27;Bookmark&#x27;</span>,<span class="string">&#x27;File&#x27;</span>,<span class="string">&#x27;Forum Topic&#x27;</span>,<span class="string">&#x27;Forum Reply&#x27;</span>,<span class="string">&#x27;Wiki&#x27;</span>,<span class="string">&#x27;Ram&#x27;</span>,<span class="string">&#x27;Liquid&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">text</span>: <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">yAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">min</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">text</span>: <span class="string">&#x27;Units&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">align</span>: <span class="string">&#x27;high&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">labels</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">overflow</span>: <span class="string">&#x27;justify&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tooltip</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">formatter</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">series</span>.<span class="property">name</span> +<span class="string">&#x27;: &#x27;</span>+ <span class="variable language_">this</span>.<span class="property">y</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">plotOptions</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">bar</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">dataLabels</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">enabled</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">layout</span>: <span class="string">&#x27;vertical&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">align</span>: <span class="string">&#x27;right&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">verticalAlign</span>: <span class="string">&#x27;top&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">x</span>: -<span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">y</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">floating</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">borderWidth</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">backgroundColor</span>: <span class="string">&#x27;#FFFFFF&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">shadow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">credits</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enabled</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">series</span>: []</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">getJSON</span>(<span class="string">&#x27;&lt;c:url value=&quot;/action.do?method=barChart&quot;/&gt;&#x27;</span>, <span class="keyword">function</span>(<span class="params">json</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                options.<span class="property">series</span> = json;<span class="comment">//options.series.push(json);  </span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//console.log(&quot;JSON: &quot; + JSON.stringify(options));</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//console.log(&quot;Render to element with ID : &quot; + options.chart.renderTo);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//console.log(&quot;Number of matching dom elements : &quot; + $(&quot;#&quot; + options.chart.renderTo).length);</span></span></span><br><span class="line"><span class="language-javascript">                   <span class="keyword">new</span> <span class="title class_">Highcharts</span>.<span class="title class_">Chart</span>(options);</span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">error</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>);&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;a[data-toggle=modal]&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> target = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;data-target&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> url = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            $(target).<span class="property">innerHTML</span>=<span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            $(target).<span class="title function_">load</span>(url);</span></span><br><span class="line"><span class="language-javascript">        &#125;);    </span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure></div>

<p>HTML </p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 400px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>Java Code - Action</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ActionForward <span class="title function_">barChart</span><span class="params">(ActionMapping mapping, ActionForm form,</span></span><br><span class="line"><span class="params">            HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Bar&gt; resultList = getBarData();</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(resultList);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> json.toString();<span class="comment">// 转成json数据</span></span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.write(result);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Bar&gt; <span class="title function_">getBarData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BlueCommunity</span> <span class="variable">target</span> <span class="operator">=</span> dao.getLatestTarget();</span><br><span class="line">        <span class="type">BlueCommunity</span> <span class="variable">actual</span> <span class="operator">=</span> dao.sumLatestActual();</span><br><span class="line"></span><br><span class="line">        List&lt;Bar&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Bar&gt;();</span><br><span class="line">        <span class="keyword">if</span> (actual != <span class="literal">null</span>) &#123;</span><br><span class="line">            resultList.add(<span class="keyword">new</span> <span class="title class_">Bar</span>(<span class="string">&quot;Actual&quot;</span>, actual.getValueArray()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resultList.add(<span class="keyword">new</span> <span class="title class_">Bar</span>(<span class="string">&quot;Actual&quot;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        resultList.add(<span class="keyword">new</span> <span class="title class_">Bar</span>(<span class="string">&quot;Target&quot;</span>, target.getValueArray()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Java Code - Bar class</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6461863786317563773L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bar</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bar</span><span class="params">(String name, <span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getData() &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Java Code - Community class  </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Community</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7516165631503337884L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> version;</span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> activity_entry;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> activity_update;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> blog_entry;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> blog_comments;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> feed;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookmark;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> file;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> forum_topic;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> forum_reply;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> wiki;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> iRam;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> liquid;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> user;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    getters;</span><br><span class="line">    setters;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getValueArray() &#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123; activity_entry, activity_update, blog_entry,</span><br><span class="line">                blog_comments, feed, bookmark, file, forum_topic, forum_reply,</span><br><span class="line">                wiki, iRam, liquid &#125;;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HighCharts</tag>
      </tags>
  </entry>
  <entry>
    <title>Dojo在IE中的那些坑</title>
    <url>/2013/05/53164b018ef1.html</url>
    <content><![CDATA[<p>最近的一个小项目中使用的<a class="link"   href="http://dojotoolkit.org/" >dojo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>作为前台页面框架。本来很简单的功能，但是发布给用户做  UAT时却发现一堆简单低级的错误，但在开发环境却始终不能重现，百思不得其解…原来用户的测试环境是 IE8，果然问题在这，之前测试是在FireFox，没想到相同的功能在IE中却报错。   </p>
<h3 id="坑一："><a href="#坑一：" class="headerlink" title="坑一："></a>坑一：</h3><ul>
<li><p>症状：页面上普通按钮，在IE中确实始终会默认submit页面。  </p>
</li>
<li><p>原因：在<a class="link"   href="http://zhidao.baidu.com/question/531818487.html" >这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>找到类似的问题：</p>
<blockquote>
<p>button元素的默认type属性的值为submit，这个是标准，和IE版本没关系。如果不喜欢可以直接用&lt; input type&#x3D;’button’&gt;代替。  </p>
</blockquote>
</li>
<li><p>解决方案：在 button 强制加上 type&#x3D;’button’ 属性  </p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&lt; button data-dojo-type=&quot;dijit.form.Button&quot; type=&#x27;button&#x27;&gt;  </span><br><span class="line">   Add  </span><br><span class="line">&lt; script type=&quot;dojo/method&quot; data-dojo-event=&quot;onClick&quot; data-dojo-args=&quot;evt&quot;&gt;  </span><br><span class="line">   add()  </span><br><span class="line">&lt; /script&gt;    </span><br><span class="line">&lt; /button&gt;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="坑二："><a href="#坑二：" class="headerlink" title="坑二："></a>坑二：</h3><ul>
<li>症状：在datagrid上做了 inline edit后，保存后数据不会刷新，总是更改前的就数据</li>
<li>原因： datagrid的data store默认是使用了cache,这在FireFox中是不会引起问题的，但在IE中就不能刷新数据。</li>
<li>解决方案：在datagrid中不使用缓存：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> store= <span class="keyword">new</span> dojo.<span class="property">data</span>.<span class="title class_">ItemFileWriteStore</span>(&#123; </span><br><span class="line">	url : <span class="string">&#x27;&lt;c:url value=&quot;/billitem.wss?method=modifiedListStore&amp;selectId=$&#123;selectId&#125;&quot; /&gt;&#x27;</span>, </span><br><span class="line">	<span class="attr">requestMethod</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">	<span class="attr">urlPreventCache</span>:<span class="literal">true</span>&#125; </span><br><span class="line">);</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="坑三："><a href="#坑三：" class="headerlink" title="坑三："></a>坑三：</h3><ul>
<li>症状：datagrid中最后修改的cell里的值总是不能保存到数据库</li>
<li>原因：datagrid是通过onApplyCellEdit事件将未保存的修改数据save到itemStore._pending(_newItem，_modifiedItems, _removedItems).但是onApplyCellEdit是通过Enter或者blur触发的，在FireFox中当用户点击当前cell以外的任意页面都会触发这个事件，但是在IE中必须要点击datagrid的其他地方才能触发，否则不会（比如：点击grid以外的save按钮）。</li>
<li>解决方案：google了一下午，最后在<a class="link"   href="http://dojo-toolkit.33424.n3.nabble.com/DataGrid-last-edited-cell-does-not-save-td2358868.html" >这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>找到解决办法：<blockquote>
<p>this is a known problem, I think.  Well at least I’ve known about it for<br>a while lol. I’m lazy so I never bothered to check for a bug on it. I<br>always figured that I could manually trigger lost focus or something on<br>the cell to get it to set the value to the store.  </p>
</blockquote>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&lt; table dojoType=&quot;dojox.grid.DataGrid&quot; onBlur=&quot;onTableBlur&quot;&gt;---&lt; /table&gt;</span><br><span class="line">	</span><br><span class="line">function onTableBlur()</span><br><span class="line">&#123;</span><br><span class="line">  if (this.edit.isEditing())</span><br><span class="line">    this.edit.apply();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ul>
<li><a class="link"   href="http://dojo-toolkit.33424.n3.nabble.com/DataGrid-last-edited-cell-does-not-save-td2358868.html" >DataGrid last edited cell does not save <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>   </li>
<li><a class="link"   href="http://stackoverflow.com/questions/12616974/event-not-firing-for-dojos-datagrid" >Event not firing for dojo’s DataGrid <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </li>
<li><a class="link"   href="http://zhidao.baidu.com/question/531818487.html" >html中button自动提交表单问题! <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>dojo</tag>
      </tags>
  </entry>
  <entry>
    <title>DisplayTag 1.1 Released, 可分页读取数据！！！</title>
    <url>/2006/02/f30ddfb4b7ed.html</url>
    <content><![CDATA[<p>DisplayTag一直以来为人们所诟病的缺点就是它的装载数据的方式: <strong>一次性把所有数据读取到内存中，然后再分页显示</strong>。这样做的后果就是在处理大批量数据时力不从心,可用性急剧下降,并且在翻页显示的仅仅是内存中的数据而不是实时数据.因此人们往往只是在实现小型项目的小数量表格分页显示时才想到DisplayTag，并且因为考虑到项目的扩展往往最终弃用DiaplayTag.</p>
<p>但是<strong>发布于本月12日的1.1版本彻底解决了这个问题</strong>，新版的DisplayTag提供了两种方式实现部分装入数据:</p>
<p><strong>(1)实现接口</strong> <code>org.displaytag.pagination.PaginatedList</code>,用户可以实现这个接口用来代替以前传入DisplayTag的list对象,DisplayTag将认为分页和排序的动作已经由外部动作执行了,而不会使用 原来的分页方式(即全部读入内存).但是这样用户需要自己编写分页和排序代码;</p>
<p><strong>(2)设置相应参数</strong>,告诉DisplayTag传入的数据集由外部分页和排序,而不使用默认的方式.比如:</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">display:table</span> <span class="attr">name</span>=<span class="string">&quot;testList&quot;</span> <span class="attr">sort</span>=<span class="string">&quot;external&quot;</span> <span class="attr">defaultsort</span>=<span class="string">&quot;1&quot;</span> <span class="attr">pagesize</span>=<span class="string">&quot;20&quot;</span> <span class="attr">id</span>=<span class="string">&quot;element&quot;</span> <span class="attr">partialList</span>=<span class="string">&quot;true&quot;</span> <span class="attr">size</span>=<span class="string">&quot;resultSize&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>其中：<br><strong>sort&#x3D;”external”</strong> 告诉DisplayTag传入的数据集已经由外部程序排好序了..<br><strong>defaultsort&#x3D;”1”</strong> 说明默认是升序(Descending is 2, Ascending is 1);<br><strong>partialList&#x3D;”true”</strong> 说明部分装入数据;<br><strong>pagesize&#x3D;”20”</strong> 每页显示记录数;<br><strong>size&#x3D;”resultSize”</strong> 显示记录的总条数(此参数结合PageSize，使得表格在只拿到某一页的完整数据的同时，可以知道会有多少页，并将其他的页数也列举出来，当用户实际翻页时才去获取当页数据);</p>
<p>关于以上翻页范例的详细内容可以查看发布包文档中的<a class="link"   href="http://displaytag.sourceforge.net/11/tut_externalSortAndPage.html" >External paging&#x2F;sorting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 一节。</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>HighCharts 笔记2：通过表格生成Pie Chart</title>
    <url>/2013/04/ef1007595811.html</url>
    <content><![CDATA[<p>接上一篇 <a class="link"   href="http://zjun.github.com/2013/03/28/highcharts-json-dataformat/" >HighCharts笔记之: Bar Chart <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，这一篇继续记录在项目中使用 Pie Chart 的情况,只是自己的一点总结和记录，以备日后翻阅。这一次是通过页面上的表格(Table)数据，生成对应的饼图（Pie Chart），具体实现如下：</p>
<blockquote>
<p><strong>Highcharts</strong> 是一个用纯JavaScript编写的一个图表库, 能够很简单便捷的在web网站或是web应用程序添加有交互性的图表，并且免费提供给个人学习、个人网站和非商业用途使用。目前HighCharts支持的图表类型有曲线图、区域图、柱状图、饼状图、散状点图和综合图表。<br>HighCharts界面美观，由于使用JavaScript编写，所以不需要像Flash和Java那样需要插件才可以运行，而且运行速度快。另外HighCharts还有很好的兼容性，能够完美支持当前大多数浏览器。</p>
</blockquote>
<span id="more"></span>

<h3 id="Pie-Chart"><a href="#Pie-Chart" class="headerlink" title="Pie Chart"></a>Pie Chart</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://farm9.staticflickr.com/8539/8609442562_2945899e60.jpg"
                     
                ></p>
<h3 id="HTML-Code"><a href="#HTML-Code" class="headerlink" title="HTML Code"></a>HTML Code</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;myModalLabel&quot;</span>&gt;</span>$&#123;title&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 280px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;datatable&quot;</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-bordered table-hover table-condensed&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					 <span class="tag">&lt;<span class="name">th</span>&gt;</span>User<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">					 <span class="tag">&lt;<span class="name">th</span>&gt;</span>$&#123;title&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;userSum&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>$&#123;item.user &#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;item.sum &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Javascript-Code"><a href="#Javascript-Code" class="headerlink" title="Javascript Code"></a>Javascript Code</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chart;</span><br><span class="line"><span class="title class_">Highcharts</span>.<span class="property">visualize</span> = <span class="keyword">function</span>(<span class="params">table, options</span>) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// the data series</span></span><br><span class="line">    options.<span class="property">series</span> = [];</span><br><span class="line">    <span class="keyword">var</span> l= options.<span class="property">series</span>.<span class="property">length</span>; </span><br><span class="line">    options.<span class="property">series</span>[l] = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;$&#123;title&#125;&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">&#x27;tbody tr&#x27;</span>, table).<span class="title function_">each</span>( <span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">      	<span class="keyword">var</span> tr = <span class="variable language_">this</span>;</span><br><span class="line">      	<span class="keyword">var</span> th = $(<span class="string">&#x27;th&#x27;</span>, tr).<span class="title function_">text</span>();</span><br><span class="line">      	<span class="keyword">var</span> td =<span class="built_in">parseFloat</span>($(<span class="string">&#x27;td&#x27;</span>, tr).<span class="title function_">text</span>());</span><br><span class="line">      	options.<span class="property">series</span>[<span class="number">0</span>].<span class="property">data</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:th,<span class="attr">y</span>:td&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    chart = <span class="keyword">new</span> <span class="title class_">Highcharts</span>.<span class="title class_">Chart</span>(options);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// On document ready, call visualize on the datatable.</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;         </span><br><span class="line">   <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;datatable&#x27;</span>),</span><br><span class="line">   options = &#123;</span><br><span class="line">         <span class="attr">chart</span>: &#123;</span><br><span class="line">            <span class="attr">renderTo</span>: <span class="string">&#x27;container2&#x27;</span>,</span><br><span class="line">            <span class="attr">defaultSeriesType</span>: <span class="string">&#x27;pie&#x27;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;$&#123;title&#125;&#x27;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">formatter</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&#x27;&lt;b&gt;&#x27;</span>+ <span class="variable language_">this</span>.<span class="property">series</span>.<span class="property">name</span> +<span class="string">&#x27;&lt;/b&gt;&lt;br/&gt;&#x27;</span>+</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">point</span>.<span class="property">name</span> +<span class="string">&#x27; &#x27;</span>+ <span class="variable language_">this</span>.<span class="property">y</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">plotOptions</span>: &#123;</span><br><span class="line">             <span class="attr">pie</span>: &#123;</span><br><span class="line">                 <span class="attr">allowPointSelect</span>: <span class="literal">true</span>,</span><br><span class="line">                 <span class="attr">cursor</span>: <span class="string">&#x27;pointer&#x27;</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">   </span><br><span class="line">                     </span><br><span class="line">   <span class="title class_">Highcharts</span>.<span class="title function_">visualize</span>(table, options);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p>这种做法在 Coding 时会更简洁，但在实际运行时效率不高，因为 Pie Chart 需要等待页面上的数据都生成时才能呈现，所以总是给用户一种迟滞感，所以个人感觉还是通过 JSon 的方式生成图表更好（更快）。</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>Javascript中的继承关系</title>
    <url>/2006/03/f893cfaf5b14.html</url>
    <content><![CDATA[<p>意译自KevLinDev上一篇文章，才疏学浅，望指正，英文原文可到<a class="link"   href="http://www.kevlindev.com/tutorials/javascript/inheritance/" >这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>查看。</p>
<p>javascript脚本语言是支持面向对象编程(<strong>O</strong>bject <strong>O</strong>riented <strong>P</strong>rogramming )的,只是javascript实现的方式比较特别，与C++和java中的实现方式不同。在javascript中我们需要借助<strong>prototype</strong>对象来访问父类的方法，下面将讨论在javascript中实现OOP中最基本的特征关系 — <strong>继承</strong>。</p>
<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>我们从最基本的开始：<strong>在javascript中创建对象</strong>。创建一个对象包括2步：</p>
<ol>
<li>创建一个和你想要创建的对象同名的函数(这里可以把这个函数理解为java中的构造函数)；  </li>
<li>通过调用 <strong>new 上面创建的函数名</strong> 的方式创建一个对象实例；</li>
</ol>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建同名函数   </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last</span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first</span> = first;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last</span>  = last;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 创建实例  </span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Dough&quot;</span>);  </span><br></pre></td></tr></table></figure></div>

<p>注意：构造函数中的<strong>this</strong>指针指向当前的创建的对象，这与java中的表示是一致的。通过this指针我们可以操作对象的属性。</p>
<h2 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h2><p>设置对象的方法：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">toString</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">first</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">last</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( person.<span class="title function_">toString</span>() ); <span class="comment">// displays &quot;John Dough&quot;  </span></span><br><span class="line"><span class="title function_">alert</span>( person ); <span class="comment">// alert函数将默认调用toString()函数  </span></span><br></pre></td></tr></table></figure></div>

<p>在这里我们用到了javascript中的<strong>prototype</strong>属性。所有的javascript对象都拥有一个prototype属性，javascript就是通过这个属性来实现继承关系的。具体的实现机制是这样的：</p>
<ol>
<li><strong>当你访问一个对象的属性时，编译器将先查找对象的属性看有没有匹配的。</strong>  </li>
<li><strong>如果没有找到，将继续查找这个对象的prototype属性所指的对象，看是否存在匹配的属性。</strong>  </li>
<li><strong>如果还是没有找到，编译器将检查当前对象的prototype是否拥有prototype属性，如果有将继续查找下去。</strong>  </li>
<li><strong>以此类推，直到查找完所有的prototype属性。</strong></li>
</ol>
<p>从这个过程不难看出，存在着一个类似于继承的访问链，可以把prototype对象指向我们要继承的父类，以此来访问父类的方法。</p>
<h2 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h2><p>我们新建一个类Employee来继承上面的Person类，并且新增一个属性id,在Employee的构造函数中只是初始化属性id，而父类中的属性将由Person的构造函数类设置：  </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last</span>) &#123;  </span><br><span class="line"><span class="keyword">if</span> ( <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> )  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>(first, last);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">first, last</span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first</span> = first;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last</span>  = last;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Employee</span>;  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property">superclass</span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Employee</span>(<span class="params">first, last, id</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> )  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>(first, last, id);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">first, last, id</span>) &#123;      </span><br><span class="line">    <span class="comment">// Call superclass method  </span></span><br><span class="line">    <span class="title class_">Employee</span>.<span class="property">superclass</span>.<span class="property">init</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, first, last);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// init properties  </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可以看到，我们把初始化属性的操作提取出来放到了一个init函数中，这样做是为了方便在子类中调用。注意其中的&quot;**Employee.superclass = Person.prototype;**&quot;，这里是一个技巧，方便下面在子类中调用父类的方法。</span></span><br><span class="line"><span class="string">另一个需要注意的地方是&quot;**Employee.superclass.init.call(this, first, last);**&quot;:对于所有对象中的方法来说，都可以通过两个方法来调用－－&quot;**call**&quot; 和 &quot;**apply**&quot;.  </span></span><br><span class="line"><span class="string">这里使用了**call**方法，其中第一个参数是将在调用的方法中访问的对象，后面的参数与调用方法的参数一致。</span></span><br><span class="line"><span class="string"> **apply**方法的使用与call大致一致，不同在于除了第一个参数外，后面是一个参数数组。  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">下面附上完整的例子和类图：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">继承关系图如下：  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![](http://www.blogjava.net/images/blogjava_net/zjun/8140/o_javascriptOOP.gif)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">代码：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Person constructor  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>   </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> )  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>(first, last);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Person init  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">first, last</span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first</span> = first;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last</span>  = last;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Person toString  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">first</span> + <span class="string">&quot;,&quot;</span> + <span class="variable language_">this</span>.<span class="property">last</span>;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Setup Employee inheritance  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Employee</span>;  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property">superclass</span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Employee constructor  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Employee</span>(<span class="params">first, last, id</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> )  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>(first, last, id);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Employee init  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">first, last, id</span>) &#123;      </span><br><span class="line">    <span class="comment">// Call superclass method  </span></span><br><span class="line">    <span class="title class_">Employee</span>.<span class="property">superclass</span>.<span class="property">init</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, first, last);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// init properties  </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Employee toString  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> name = <span class="title class_">Employee</span>.<span class="property">superclass</span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;:&quot;</span> + name;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Setup Manager inheritance  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Manager</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Employee</span>;  </span><br><span class="line"><span class="title class_">Manager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Manager</span>;  </span><br><span class="line"><span class="title class_">Manager</span>.<span class="property">superclass</span> = <span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Manager constructor  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Manager</span>(<span class="params">first, last, id, department</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> )  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>(first, last, id, department);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Manager init  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Manager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">first, last, id, department</span>)&#123;  </span><br><span class="line">    <span class="comment">// Call superclass method  </span></span><br><span class="line">    <span class="title class_">Manager</span>.<span class="property">superclass</span>.<span class="property">init</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, first, last, id);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// init properties  </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">department</span> = department;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Manager toString  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Manager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> employee = <span class="title class_">Manager</span>.<span class="property">superclass</span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> employee + <span class="string">&quot; manages &quot;</span> + <span class="variable language_">this</span>.<span class="property">department</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java并发编程笔记：线程管理</title>
    <url>/article/2cf8f79a.html</url>
    <content><![CDATA[<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>两种方法：  </p>
<ol>
<li>通过直接继承thread类，然后覆盖run()方法;</li>
<li>构建一个实现Runnable接口的类, 然后创建一个thread类对象并传递Runnable对象作为构造参数;</li>
</ol>
<p><strong>启动线程：</strong><br>只有调用start()方法才能启动一个新的执行线程。  </p>
<span id="more"></span>
<h2 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h2><p>通过以下方法访问线程属性：  </p>
<ol>
<li>id: 			<code>thread.getId()</code>  </li>
<li>name: 		<code>thread.getName()</code>  </li>
<li>Priority: 	<code>thread.getPriority()</code>  </li>
<li>State: 		<code>thread.getState()</code></li>
</ol>
<h2 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h2><ol>
<li>在线程外调用线程的 <code>interrupt()</code> 方法；  </li>
<li>在线程内判断 <code>isInterrupted()</code>，如果为true 则退出线程； </li>
<li>可以在线程内判断 <code>isInterrupted()</code>， 如果为true 则抛出 <code> InterruptedException</code> 异常来进行中断处理；</li>
</ol>
<p><strong>说明</strong>： Thread 类有一个boolean类型的属性来表明线程是否被中断。当你调用线程的 <code>interrupt()</code> 方法，就代表你把这个属性设置为 true。 而 <code>isInterrupted()</code> 方法仅返回属性值。   </p>
<h2 id="线程的睡眠和恢复"><a href="#线程的睡眠和恢复" class="headerlink" title="线程的睡眠和恢复"></a>线程的睡眠和恢复</h2><ol>
<li>可以使用 <code>Thread.sleep()</code> 方法休眠线程，此方法接收一个整数作为参数，表示线程暂停运行的毫秒数；</li>
<li>也可以使用一个有TimeUnit列举元素的sleep() 方法，使用线程类的 sleep() 方法让当前线程睡眠，它接收的参数单位是表示并转换成毫秒的: <code>TimeUnit.SECONDS.sleep(1);</code>  ；  </li>
<li>可以通过 <code>thread.interrupt();</code> 中断休眠，唤醒线程；</li>
</ol>
<p><strong>说明</strong>：当调用sleep()方法， Thread 离开CPU并在一段时间内停止运行。在这段时间内，它是不消耗CPU时间的，使用可以执行其他任务。</p>
<h2 id="等待线程终结"><a href="#等待线程终结" class="headerlink" title="等待线程终结"></a>等待线程终结</h2><p>当前线程调用其他线程的 join() 后， 会暂停当前线程，直到被调用线程执行完成。  </p>
<p>Java 提供2种形式的 join() 方法:  </p>
<ol>
<li><code>join (long milliseconds)</code>  </li>
<li><code>join (long milliseconds, long nanos)</code></li>
</ol>
<p>第一种 join() 方法, 这方法让调用线程等待特定的毫秒数。例如，如果thread1对象使用代码 thread2.join(1000), 那么线程 thread1暂停运行，直到以下其中一个条件发生：</p>
<ol>
<li>thread2 结束运行  </li>
<li>1000 毫秒过去了</li>
</ol>
<p>当其中一个条件为真时，join() 方法返回。</p>
<p>第二个版本的 join() 方法和第一个很像，只不过它接收一个毫秒数和一个纳秒数作为参数。  </p>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p><strong>守护线程</strong>: 这种线程的优先级非常低，通常在程序里没有其他线程运行时才会执行它。当守护线程是程序里唯一在运行的线程时，JVM会结束守护线程并终止程序。  </p>
<ol>
<li><code>setDaemon(true);</code> 设置守护线程  </li>
<li>只能在 <code>start()</code> 方法之前可以调用 <code>setDaemon()</code> 方法。一旦线程运行了，就不能修改守护状态  </li>
<li>可以使用 <code>isDaemon()</code> 方法来检查线程是否是守护线程（方法返回 true) 或者是使用者线程 (方法返回 false)</li>
</ol>
<h2 id="处理线程中的-Unchecked-exceptions"><a href="#处理线程中的-Unchecked-exceptions" class="headerlink" title="处理线程中的 Unchecked exceptions"></a>处理线程中的 Unchecked exceptions</h2><p>Java里有2种异常:</p>
<ul>
<li><p>检查异常（<strong>Checked exceptions</strong>）: 这些异常必须强制捕获它们或在一个方法里的throws子句中。 例如， <code>IOException</code> 或者<code>ClassNotFoundException</code></p>
</li>
<li><p>未检查异常（<strong>Unchecked exceptions</strong>）: 这些异常不用强制捕获它们。例如:<code>NumberFormatException</code></p>
</li>
</ul>
<ol>
<li>thread.run() 方法不接受 throws 子句。当一个非检查异常被抛出，默认的行为是在控制台写下stack trace并退出程序。</li>
<li>实现 UncaughtExceptionHandler 接口并实现 uncaughtException() 方法;</li>
<li>thread.setUncaughtExceptionHandler(new ExceptionHandler());</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">UncaughtExceptionHandler</span>&#123;  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uncaughtException</span><span class="params">(Thread t, Throwable e)</span>&#123;  </span><br><span class="line">		System.out.printf(<span class="string">&quot;An exception has been captured\n&quot;</span>);  </span><br><span class="line">		System.out.printf(<span class="string">&quot;Thread: %s\n&quot;</span>,t.getId());  </span><br><span class="line">		System.out.printf(<span class="string">&quot;Exception: %s: %s\n&quot;</span>,e.getClass().getName(),e.getMessage());  </span><br><span class="line">		System.out.printf(<span class="string">&quot;Stack Trace: \n&quot;</span>);  </span><br><span class="line">		e.printStackTrace(System.out); System.out.printf(<span class="string">&quot;Thread status: %s\n&quot;</span>,t.getState());  </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(task);  </span><br><span class="line">thread.setUncaughtExceptionHandler(<span class="keyword">new</span> <span class="title class_">ExceptionHandler</span>());  </span><br><span class="line">thread.start();  </span><br></pre></td></tr></table></figure>

<h2 id="本地线程变量"><a href="#本地线程变量" class="headerlink" title="本地线程变量"></a>本地线程变量</h2><ol>
<li>本地线程变量 ThreadLocal;  </li>
<li>本地线程变量为每个使用这些变量的线程储存属性值;  </li>
<li>使用 get() 方法读取值和使用 set() 方法改变值;  </li>
<li>如果第一次访问本地线程变量的值，没有值给当前的线程对象，那么本地线程变量会调用 initialValue() 方法来设置值给线程并返回初始值;  </li>
<li>本地线程类还提供 remove() 方法，删除存储在线程本地变量里的值;</li>
</ol>
<h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><ol>
<li>创建线程组： ThreadGroup threadGroup &#x3D; new ThreadGroup(“Searcher”);  </li>
<li>加入线程组： Thread thread&#x3D;new Thread(threadGroup, runnable );  </li>
<li>threadGroup.list() 得到关于 ThreadGroup ob对象信息；</li>
<li>activeCount() 方法获取线程个数；  </li>
<li>enumerate() 方法获取与ThreadGroup对象关联的线程的列表；<br>threadGroup.enumerate(Thread[]);  </li>
<li>interrupt() 方法中断组里的其他线程： threadGroup.interrupt();</li>
</ol>
<h2 id="处理线程组中的-Unchecked-exceptions"><a href="#处理线程组中的-Unchecked-exceptions" class="headerlink" title="处理线程组中的 Unchecked exceptions"></a>处理线程组中的 Unchecked exceptions</h2><ol>
<li>override ThreadGroup 的 uncaughtException() 方法；  </li>
<li>当一个非捕捉异常在线程内抛出，JVM会为这个异常寻找3种可能handlers：  <ol>
<li>找这个未捕捉的线程对象的异常handle;  </li>
<li>在线程对象的ThreadGroup里寻找非捕捉异常的handler;  </li>
<li>寻找默认非捕捉异常handle;</li>
</ol>
</li>
</ol>
<p>如果没有 handlers存在, 那么 JVM会把异常的 stack trace 写入控制台并结束任务。  </p>
<h2 id="线程工厂"><a href="#线程工厂" class="headerlink" title="线程工厂"></a>线程工厂</h2><ol>
<li>ThreadFactory 接口;  </li>
<li>实现接口方法: newThread(), 接收 Runnable 对象作为参数并返回一个 Thread 对象;</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>配置Log4j</title>
    <url>/article/eefb8f1c.html</url>
    <content><![CDATA[<p>Log4J的配置文件(Configuration File)就是用来设置记录器的级别、存放器和布局的，它可接key&#x3D;value格式的设置或xml格式的设置信息。通过配置，可以创建出Log4J的运行环境。</p>
<span id="more"></span>

<h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h2><p>Log4J配置文件的基本格式如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置根Logger</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>  =   <span class="string">[ level ]   ,  appenderName1 ,  appenderName2 ,  …</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置日志信息输出目的地Appender</span></span><br><span class="line"><span class="attr">log4j.appender.appenderName</span>  =  <span class="string">fully.qualified.name.of.appender.class </span></span><br><span class="line"><span class="attr">　　log4j.appender.appenderName.option1</span>  =  <span class="string">value1 </span></span><br><span class="line"><span class="attr">　　…</span> <span class="string"></span></span><br><span class="line"><span class="attr">　　log4j.appender.appenderName.optionN</span>  =  <span class="string">valueN </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置日志信息的格式（布局）</span></span><br><span class="line"><span class="attr">log4j.appender.appenderName.layout</span>  =  <span class="string">fully.qualified.name.of.layout.class </span></span><br><span class="line"><span class="attr">　　log4j.appender.appenderName.layout.option1</span>  =  <span class="string">value1 </span></span><br><span class="line"><span class="attr">　　…</span> <span class="string"></span></span><br><span class="line"><span class="attr">　　log4j.appender.appenderName.layout.optionN</span>  =  <span class="string">valueN </span></span><br></pre></td></tr></table></figure>

<p>其中 [<strong>level</strong>] 是日志输出级别，共有5级：</p>
<blockquote>
<p>FATAL      0<br>ERROR      3<br>WARN       4<br>INFO       6<br>DEBUG      7</p>
</blockquote>
<p><strong>Appender</strong> 为日志输出目的地，Log4j提供的appender有以下几种：  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.apache.log4j.ConsoleAppender（控制台），</span></span><br><span class="line"><span class="attr">org.apache.log4j.FileAppender（文件），</span></span><br><span class="line"><span class="attr">org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），</span></span><br><span class="line"><span class="attr">org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），</span></span><br><span class="line"><span class="attr">org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</span></span><br></pre></td></tr></table></figure>

<p><strong>Layout</strong>：日志输出格式，Log4j提供的layout有以下几种：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.apache.log4j.HTMLLayout（以HTML表格形式布局），</span></span><br><span class="line"><span class="attr">org.apache.log4j.PatternLayout（可以灵活地指定布局模式），</span></span><br><span class="line"><span class="attr">org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</span></span><br><span class="line"><span class="attr">org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</span></span><br></pre></td></tr></table></figure>

<p><strong>打印参数</strong>: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line">	<span class="attr">　　%m</span>   <span class="string">输出代码中指定的消息  </span></span><br><span class="line">	<span class="attr">　　%p</span>   <span class="string">输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL   </span></span><br><span class="line">	<span class="attr">　　%r</span>   <span class="string">输出自应用启动到输出该log信息耗费的毫秒数   </span></span><br><span class="line">	<span class="attr">　　%c</span>   <span class="string">输出所属的类目，通常就是所在类的全名   </span></span><br><span class="line">	<span class="attr">　　%t</span>   <span class="string">输出产生该日志事件的线程名   </span></span><br><span class="line">	<span class="attr">　　%n</span>   <span class="string">输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”   </span></span><br><span class="line">	<span class="attr">　　%d</span>   <span class="string">输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d&#123;yyy MMM dd HH:mm:ss , SSS&#125;，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921    </span></span><br><span class="line">	<span class="attr">　　%l</span>   <span class="string">输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )   </span></span><br></pre></td></tr></table></figure>

<h2 id="2-在代码中初始化Logger"><a href="#2-在代码中初始化Logger" class="headerlink" title="2. 在代码中初始化Logger"></a>2. 在代码中初始化Logger</h2><p>1）在程序中调用<strong>BasicConfigurator.configure()<strong>方法：给根记录器增加一个ConsoleAppender，输出格式通过PatternLayout设为”%-4r [%t] %-5p %c %x - %m%n”，还有根记录器的默认级别是</strong>Level.DEBUG</strong>.<br>2）配置放在文件里，通过命令行参数传递文件名字，通过PropertyConfigurator.configure(args[x])解析并配置；<br>3）配置放在文件里，通过环境变量传递文件名等信息，利用log4j默认的初始化过程解析并配置；<br>4）配置放在文件里，通过应用服务器配置传递文件名等信息，利用一个特殊的servlet来完成配置。  </p>
<h2 id="3-为不同的-Appender-设置日志输出级别"><a href="#3-为不同的-Appender-设置日志输出级别" class="headerlink" title="3. 为不同的 Appender 设置日志输出级别"></a>3. 为不同的 Appender 设置日志输出级别</h2><p>当调试系统时，我们往往注意的只是异常级别的日志输出，但是通常所有级别的输出都是放在一个文件里的，如果日志输出的级别是BUG！？那就慢慢去找吧。<br>这时我们也许会想要是能把异常信息单独输出到一个文件里该多好啊。当然可以，Log4j已经提供了这样的功能，我们只需要在配置中修改<strong>Appender的Threshold</strong> 就能实现,比如下面的例子：</p>
<p><strong>[配置文件]</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### set log levels ###</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span> = <span class="string">debug ,  stdout ,  D ,  E</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出到控制台 ###</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span> =  <span class="string">%d&#123;ABSOLUTE&#125; %5p %c&#123; 1 &#125;:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出到日志文件 ###</span></span><br><span class="line"><span class="attr">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.D.File</span> = <span class="string">logs/log.log</span></span><br><span class="line"><span class="attr">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.D.Threshold</span> = <span class="string">DEBUG ## 输出DEBUG级别以上的日志</span></span><br><span class="line"><span class="attr">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 保存异常信息到单独文件 ###</span></span><br><span class="line"><span class="attr">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.D.File</span> = <span class="string">logs/error.log ## 异常日志文件名</span></span><br><span class="line"><span class="attr">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.D.Threshold</span> = <span class="string">ERROR ## 只输出ERROR级别以上的日志!!!</span></span><br><span class="line"><span class="attr">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br></pre></td></tr></table></figure>

<p><strong>[代码中使用]</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">TestLog4j</span>  &#123;  </span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;  </span><br><span class="line">        PropertyConfigurator.configure( <span class="string">&quot; D:/Code/conf/  log4j.properties &quot;</span> );  </span><br><span class="line">        <span class="type">Logger</span> <span class="variable">logger</span>  <span class="operator">=</span>  Logger.getLogger(TestLog4j. class );  </span><br><span class="line">        logger.debug( <span class="string">&quot; debug &quot;</span> );  </span><br><span class="line">        logger.error( <span class="string">&quot; error &quot;</span> );  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一下，看看异常信息是不是保存在了一个单独的文件error.log中。 </p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>Find duplicate records in text file</title>
    <url>/article/2f7dbe20.html</url>
    <content><![CDATA[<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  </span><br><span class="line">abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  </span><br><span class="line">tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  </span><br><span class="line">aer 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  </span><br><span class="line">tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  </span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="UNIX"><a href="#UNIX" class="headerlink" title="UNIX"></a>UNIX</h2><p>display the no of occurance and the record</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> f1.txt|<span class="built_in">uniq</span> -c</span><br><span class="line"></span><br><span class="line">2 abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  </span><br><span class="line">1 aer 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  </span><br><span class="line">2 tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  </span><br></pre></td></tr></table></figure>

<p>display only the duplicate records  </p>
<pre><code class="bash">sort f1.txt|uniq -d

abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  
tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  
</code></pre>
<p>display distinct records</p>
<pre><code class="bash">sort f1.txt|uniq

abc 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  
aer 1000 3452 2463 2343 2176 7654 3452 8765 5643 3452  
tas 3420 3562 2123 1343 2176 7654 3252 8765 5643 3452  
</code></pre>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>Notepad++ can sort by line, and remove the duplicate lines at the same time.</p>
<blockquote>
<ol>
<li>Open the menu under: <strong>TextFX–&gt;TextFX</strong> Tools  </li>
<li>Make sure “<strong>sort outputs only unique…</strong>“ is checked  </li>
<li>select a block of text (ctrl-a to select the entire document).  </li>
<li>click “<strong>sort lines case sensitive</strong>“ or “<strong>sort lines case insensitive</strong>“</li>
</ol>
</blockquote>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://www.unix.com/shell-programming-scripting/85711-how-find-duplicate-records-text-file.html">How to find Duplicate Records in a text file</a><br><a href="http://www.cyberciti.biz/faq/unix-linux-shell-removing-duplicate-lines/">Shell: How To Remove Duplicate Text Lines</a><br><a href="http://www.ehow.com/how_5084389_remove-duplicate-lines-unix.html">How to Remove Duplicate Lines in Unix</a><br><a href="http://answers.yahoo.com/question/index?qid=20080522091139AAoVO8m">remove duplicates from a text file in free editor</a>  </p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>Hibernate中的继承关系</title>
    <url>/article/10d51e8f.html</url>
    <content><![CDATA[<p>Hibernate中支持3种形式实现继承关系：  </p>
<ol>
<li><strong>Table per concrete class</strong> 表与子类之间独立一对一关系  </li>
<li><strong>Table per subclass</strong> 每个子类对应一张子表，并与主类共享主表  </li>
<li><strong>Table per class hierarchy</strong> 表与类一对多关系  <span id="more"></span></li>
</ol>
<h3 id="1-Table-per-concrete-class"><a href="#1-Table-per-concrete-class" class="headerlink" title="1. Table per concrete class"></a>1. Table per concrete class</h3><p><strong>数据库</strong>：父类没有对应的表，每个子类独立对应一张表，父类中的公共属性将在每一张表中以相同冗余字段的形式出现。<br><strong>映射文件</strong>：子类对应的Hibernate的配映射文件与普通映射文件没有特别区别，只是通过<class>节点的 polymorphism&#x3D;”implicit” 属性实现隐式多态模式来实现与父类之间的继承关系。</p>
<h3 id="2-Table-per-subclass"><a href="#2-Table-per-subclass" class="headerlink" title="2. Table per subclass"></a>2. Table per subclass</h3><p><strong>数据库</strong>：父类单独映射一张主表，而每个子类分别映射一张子表。子表和主表通过外键相关联。<br><strong>映射文件</strong>：在映射文件中通过 <joined-subclass> 节点来表示主类和子类之间的继承关系，如下：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;BaseClass&quot;</span> <span class="attr">table</span>=<span class="string">&quot;T_BASE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--申明子类1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joined-subclass</span> <span class="attr">name</span>=<span class="string">&quot;SubClass1&quot;</span> <span class="attr">table</span>=<span class="string">&quot;T_SUB1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subName1&quot;</span> <span class="attr">column</span>=<span class="string">&quot;subName1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joined-subclass</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--申明子类2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joined-subclass</span> <span class="attr">name</span>=<span class="string">&quot;SubClass2&quot;</span> <span class="attr">table</span>=<span class="string">&quot;T_SUB1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subName2&quot;</span> <span class="attr">column</span>=<span class="string">&quot;subName2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joined-subclass</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Table-per-class-hierarchy"><a href="#3-Table-per-class-hierarchy" class="headerlink" title="3. Table per class hierarchy"></a>3. Table per class hierarchy</h3><p><strong>数据库</strong>：用一张表对应所有子类，包含所有子类字段，通过一个标示类别的字段来区分不同子类对应的数据。<br><strong>映射文件</strong>：通过<subclass> 和<disriminator>节点来对不同子类加以区别，如下：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;BaseClass&quot;</span> <span class="attr">table</span>=<span class="string">&quot;T_BASE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">column</span>=<span class="string">&quot;category&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>/&gt;</span>                &lt;------------- 声明discriminator字段</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--子类1--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">subclass</span> <span class="attr">name</span>=<span class="string">&quot;SubClass1&quot;</span> <span class="attr">discriminator-value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>       &lt;------------- discriminator为1，则是子类1</span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subName1&quot;</span> <span class="attr">column</span>=<span class="string">&quot;subName1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">subclass</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--子类2--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">subclass</span> <span class="attr">name</span>=<span class="string">&quot;SubClass2&quot;</span> <span class="attr">discriminator-value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>       &lt;------------- discriminator为2，则是子类2</span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subName2&quot;</span> <span class="attr">column</span>=<span class="string">&quot;subName2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">subclass</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>java中的Proxy模式(续)</title>
    <url>/article/df437fb5.html</url>
    <content><![CDATA[<p>在 <a href="https://zjun.github.io/article/46390b53.html">上一篇随笔</a> 中,由于时间和篇幅的关系只是简单介绍了Proxy模式的概念,并没有写到Java中对Proxy模式特有的支持,所以严格说起来是有点”名不符实”,现在就接着介绍JDK中Proxy模式的实现:<br>Java API中提供了对Proxy模式的支持,主要是通过反射(Reflect)包中的<strong>Proxy</strong>类和<strong>InvocationHandler</strong>接口实现,具体过程如下:  </p>
<span id="more"></span>

<p>(1) 实现<strong>InvocationHandler</strong>接口,在**invoke()<strong>方法中实现代理类要完成的操作;<br>(2) 通过</strong>Proxy.newProxyInstance(ClassLoader loader,Class[]<br>interfaces,InvocationHandler h)<strong>方法生成一个代理类,从参数可以看出代理类将实现被代理对象的接口,而具体的实现过程是在上面实现的</strong>InvocationHandler.invoke()**中定义的.</p>
<hr>
<p>我们还是用演艺圈的例子来说明：<br>首先，<strong>类的关系图</strong>需要修改一下：<br><img src="https://s2.loli.net/2023/11/09/B9zW6KQ2MTALIqY.gif" alt="类的关系图"></p>
<p>可以看出，这里并没有经纪人(Broke)类，而是新增了一个经纪人操作类(BrokeHandler),这是因为通过<code>Proxy.newProxyInstance()</code>方法,Java API将自动为我们生成一个对于Artist接口的代理类(即：Broke),我们只需定义代理的操作即可．  </p>
<h2 id="经纪人工作"><a href="#经纪人工作" class="headerlink" title="经纪人工作"></a>经纪人工作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 经纪人工作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span>  1.0 create on 2006-4-11 18:06:36</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">BrokerHandler</span>  <span class="keyword">implements</span>  <span class="title class_">InvocationHandler</span>  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">SIGN</span>  <span class="operator">=</span>   <span class="string">&quot;  [经纪人工作]  &quot;</span> ;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//  旗下明星</span></span><br><span class="line">     <span class="keyword">private</span>  Star star;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span>  <span class="title function_">BrokerHandler</span><span class="params">(Star star)</span>  &#123;</span><br><span class="line">         <span class="built_in">this</span> .star  =  star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签订和约</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">private</span>   <span class="keyword">void</span>  <span class="title function_">subcontract</span><span class="params">()</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  +   <span class="string">&quot;  签订和约  &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演出后交税</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">private</span>   <span class="keyword">void</span>  <span class="title function_">payTax</span><span class="params">()</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  +   <span class="string">&quot;  演出后交税  &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@see</span>  java.lang.reflect.InvocationHandler#invoke(java.lang.Object,</span></span><br><span class="line"><span class="comment">     *      java.lang.reflect.Method, java.lang.Object)</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>  Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">             <span class="keyword">throws</span>  Throwable  &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span>  <span class="operator">=</span>   <span class="literal">null</span> ;</span><br><span class="line">         <span class="comment">//  签约</span></span><br><span class="line">        subcontract();</span><br><span class="line">         <span class="comment">//  安排艺人演出</span></span><br><span class="line">        obj  =  method.invoke(star, args);</span><br><span class="line">         <span class="comment">//  交税</span></span><br><span class="line">        payTax();</span><br><span class="line">         <span class="keyword">return</span>  obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="艺人"><a href="#艺人" class="headerlink" title="艺人"></a>艺人</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 艺人</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span>  1.0 create on 2006-4-11 18:05:48</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">interface</span>  <span class="title class_">Artist</span>  &#123;</span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">(String showType)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="明星"><a href="#明星" class="headerlink" title="明星"></a>明星</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 明星</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span> zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span> 1.0 create on 2006-4-11 18:08:17</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Star</span>  <span class="keyword">implements</span>  <span class="title class_">Artist</span>  &#123;</span><br><span class="line">     <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">SIGN</span>  <span class="operator">=</span>   <span class="string">&quot;  [明星]  &quot;</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">(String showType)</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  + showType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="演出赞助商"><a href="#演出赞助商" class="headerlink" title="演出赞助商"></a>演出赞助商</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演出赞助商</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span> zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span> 1.0 create on 2006-4-11 18:30:25</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Patron</span>  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/** </span></span><br><span class="line"><span class="comment">      *  <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">Star</span> <span class="variable">star</span>  <span class="operator">=</span>   <span class="keyword">new</span> <span class="title class_">Star</span>();</span><br><span class="line">        <span class="type">BrokerHandler</span> <span class="variable">broker</span>  <span class="operator">=</span>   <span class="keyword">new</span> <span class="title class_">BrokerHandler</span>(star);</span><br><span class="line">        <span class="type">Artist</span> <span class="variable">b</span>  <span class="operator">=</span> (Artist) Proxy.newProxyInstance(star.getClass()</span><br><span class="line">                .getClassLoader(), star.getClass().getInterfaces(), broker);</span><br><span class="line">        b.show( <span class="string">&quot;  演电影  &quot;</span>);</span><br><span class="line">        b.show( <span class="string">&quot;  拍电视  &quot;</span>);</span><br><span class="line">        b.show( <span class="string">&quot;  出唱片  &quot;</span>);</span><br><span class="line">        b.show( <span class="string">&quot;  演唱会  &quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong>：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[ 经纪人工作 ]  签订和约   </span><br><span class="line">[ 明星 ]  演电影   </span><br><span class="line">[ 经纪人工作 ]  演出后交税   </span><br><span class="line">[ 经纪人工作 ]  签订和约   </span><br><span class="line">[ 明星 ]  拍电视   </span><br><span class="line">[ 经纪人工作 ]  演出后交税   </span><br><span class="line">[ 经纪人工作 ]  签订和约   </span><br><span class="line">[ 明星 ]  出唱片   </span><br><span class="line">[ 经纪人工作 ]  演出后交税   </span><br><span class="line">[ 经纪人工作 ]  签订和约   </span><br><span class="line">[ 明星 ]  演唱会   </span><br><span class="line">[ 经纪人工作 ]   演出后交税   </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>java中的观察者模式(Observer)</title>
    <url>/article/368d2438.html</url>
    <content><![CDATA[<p>Java作为一种面向对象的开发语言，对实现设计模式提供了良好的支持，并且提供了许多默认的实现，比如：通过Java中的<strong>Observable类</strong>和<strong>Observer接口</strong>可以方便的实现观察者模式。</p>
<p>下面我们就用一个实际的例子来说明：日常生活中说起观察者，最常见的例子可能就是天气预报，在这里我们的观察对象是地球，而我们是通过发射气象卫星这个观察者来检测地球气象变化的。</p>
<span id="more"></span>

<p>所以这个例子中涉及三个对象：  </p>
<ul>
<li><strong>地球 (Earth)：</strong>			被观察对象  </li>
<li><strong>气象卫星(Satellite)：</strong>    观察者</li>
<li><strong>气象局(WeatherService)：</strong> 客户端调用</li>
</ul>
<p><strong>被观察对象：地球 (Earth)</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.util.Observable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被观察对象：地球</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span>  1.0 create on 2006-5-18 9:42:45</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Earth</span>  <span class="keyword">extends</span>  <span class="title class_">Observable</span>  &#123;</span><br><span class="line">     <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">weather</span>  <span class="operator">=</span>   <span class="string">&quot; 晴朗 &quot;</span> ;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@return</span>  Returns the weather.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>  String <span class="title function_">getWeather</span><span class="params">()</span>  &#123;</span><br><span class="line">         <span class="keyword">return</span>  weather;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span>  weather</span></span><br><span class="line"><span class="comment">     *            The weather to set.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">setWeather</span><span class="params">(String weather)</span>  &#123;</span><br><span class="line">         <span class="built_in">this</span> .weather  =  weather;</span><br><span class="line">         <span class="comment">//  设置变化点</span></span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers(weather);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>[注意]</strong> 在需检测的对象前需要**设置变化点setChanged()和通知观察者notifyObservers()**，这两个函数是由Observable类实现的，封装了观察者模式实现的细节。</p>
<p><strong>观察者：气象卫星(Satellite)</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.util.Observable;</span><br><span class="line"><span class="keyword">import</span>  java.util.Observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察对象：气象卫星</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span>  1.0 create on 2006-5-18 9:46:30</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Satellite</span>  <span class="keyword">implements</span>  <span class="title class_">Observer</span>  &#123;</span><br><span class="line">     <span class="keyword">private</span>  String weather;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">update</span><span class="params">(Observable obj, Object arg)</span>  &#123;</span><br><span class="line">        weather  =  (String) arg;</span><br><span class="line">         <span class="comment">//  捕获天气变化情况，反馈给检测者</span></span><br><span class="line">        System.out.println( <span class="string">&quot; 近期天气变化： &quot;</span>   +  weather);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>客户端调用：气象局(WeatherService)</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端调用：天气预报</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zjun</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@version</span>  1.0 create on 2006-5-18 9:57:19</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">WeatherService</span>  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span>  args</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">Earth</span> <span class="variable">earth</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">Earth</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Satellite</span> <span class="variable">satellite</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">Satellite</span>();</span><br><span class="line">         <span class="comment">//  发射气象卫星</span></span><br><span class="line">        earth.addObserver(satellite);</span><br><span class="line"></span><br><span class="line">        System.out.println( <span class="string">&quot; 天气预报： &quot;</span> );</span><br><span class="line">        System.out.println( <span class="string">&quot; ------------ &quot;</span> );</span><br><span class="line">        earth.setWeather( <span class="string">&quot; 台风‘珍珠’逼近 &quot;</span> );</span><br><span class="line">        earth.setWeather( <span class="string">&quot; 大到暴雨 &quot;</span> );</span><br><span class="line">        earth.setWeather( <span class="string">&quot; 天气炎热 &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>[运行结果]</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">天气预报：  </span><br><span class="line">------------   </span><br><span class="line">近期天气变化：台风‘珍珠’逼近  </span><br><span class="line">近期天气变化：大到暴雨  </span><br><span class="line">近期天气变化：天气炎热  </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>java中的Proxy模式</title>
    <url>/article/46390b53.html</url>
    <content><![CDATA[<h1 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h1><p><strong>代理（Proxy）模式</strong>，顾名思义就是对象之间不直接发生联系，而是通过中间的代理人进行沟通。这种关系在现在的娱乐圈中普遍存在：明星通常都有经纪人来代理自己的演出事宜，而不是直接去联系演出商。下面就通过这个实际中的例子来说明代理模式。  </p>
<h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p><img src="https://s2.loli.net/2023/11/09/zcCK32vuB89GDSi.jpg" alt="关系类图"></p>
<span id="more"></span>

<h1 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h1><p><strong>演艺人士</strong>：包括经纪人和明星，都属于娱乐圈中人。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演艺人士</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zJun</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">interface</span>  <span class="title class_">Artist</span>  &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演出活动</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">(String showType)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>经纪人</strong>：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 经纪人（参考《Java与模式》－ &quot;代理(Proxy)模式&quot;一章部分代码）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zJun</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Broker</span>  <span class="keyword">implements</span>  <span class="title class_">Artist</span>, InvocationHandler  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">SIGN</span>  <span class="operator">=</span>   <span class="string">&quot; [经纪人] &quot;</span> ;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//  旗下明星</span></span><br><span class="line">     <span class="keyword">private</span>  Star star;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签订和约</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">subcontract</span><span class="params">()</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  +   <span class="string">&quot; 签订和约 &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 经纪人代明星打理一切演出事宜</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">(String showType)</span>  &#123;</span><br><span class="line">         <span class="comment">//  签约</span></span><br><span class="line">        subcontract();</span><br><span class="line"></span><br><span class="line">         <span class="comment">//  通知明星演出</span></span><br><span class="line">         <span class="keyword">if</span>  (star  ==   <span class="literal">null</span> )  &#123;</span><br><span class="line">            star  =   <span class="keyword">new</span>  <span class="title class_">Star</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        star.show(showType);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//  交税</span></span><br><span class="line">        payTax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演出后交税</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">payTax</span><span class="params">()</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  +   <span class="string">&quot; 演出后交税 &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>明星</strong>：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 明星</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zJun</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Star</span>  <span class="keyword">implements</span>  <span class="title class_">Artist</span>  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">SIGN</span>  <span class="operator">=</span>   <span class="string">&quot; [明星] &quot;</span> ;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">(String showType)</span>  &#123;</span><br><span class="line">        System.out.println(SIGN  +  showType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>赞助商</strong>：通过联系经纪人安排明星演出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 赞助商: 与经纪人联系安排演出事宜</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span>  zJun</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">class</span>  <span class="title class_">Patron</span>  &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span>  args</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">Broker</span> <span class="variable">broker</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">Broker</span>();</span><br><span class="line">        broker.show( <span class="string">&quot; 演电影 &quot;</span> );</span><br><span class="line">        broker.show( <span class="string">&quot; 拍电视 &quot;</span> );</span><br><span class="line">        broker.show( <span class="string">&quot; 出唱片 &quot;</span> );</span><br><span class="line">        broker.show( <span class="string">&quot; 演唱会 &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>[运行结果]：</strong>  </p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[ 经纪人 ] 签订和约  </span><br><span class="line">[ 明星 ] 演电影  </span><br><span class="line">[ 经纪人 ] 演出后交税  </span><br><span class="line">[ 经纪人 ] 签订和约  </span><br><span class="line">[ 明星 ] 拍电视  </span><br><span class="line">[ 经纪人 ] 演出后交税  </span><br><span class="line">[ 经纪人 ] 签订和约  </span><br><span class="line">[ 明星 ] 出唱片  </span><br><span class="line">[ 经纪人 ] 演出后交税  </span><br><span class="line">[ 经纪人 ] 签订和约   </span><br><span class="line">[ 明星 ] 演唱会  </span><br><span class="line">[ 经纪人 ] 演出后交税  </span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《Java与模式》 阎宏 电子工业出版社</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>DisplayTag 1.1 Released, 可分页读取数据！！！</title>
    <url>/article/25204a98.html</url>
    <content><![CDATA[<p>DisplayTag一直以来为人们所诟病的缺点就是它的装载数据的方式: <strong>一次性把所有数据读取到内存中，然后再分页显示</strong>。这样做的后果就是在处理大批量数据时力不从心,可用性急剧下降,并且在翻页显示的仅仅是内存中的数据而不是实时数据.因此人们往往只是在实现小型项目的小数量表格分页显示时才想到DisplayTag，并且因为考虑到项目的扩展往往最终弃用DiaplayTag.</p>
<span id="more"></span>

<p>但是<strong>发布于本月12日的1.1版本彻底解决了这个问题</strong>，新版的DisplayTag提供了两种方式实现部分装入数据:</p>
<p><strong>(1)实现接口</strong> <code>org.displaytag.pagination.PaginatedList</code>,用户可以实现这个接口用来代替以前传入DisplayTag的list对象,DisplayTag将认为分页和排序的动作已经由外部动作执行了,而不会使用 原来的分页方式(即全部读入内存).但是这样用户需要自己编写分页和排序代码;</p>
<p><strong>(2)设置相应参数</strong>,告诉DisplayTag传入的数据集由外部分页和排序,而不使用默认的方式.比如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">display:table</span> <span class="attr">name</span>=<span class="string">&quot;testList&quot;</span> <span class="attr">sort</span>=<span class="string">&quot;external&quot;</span> <span class="attr">defaultsort</span>=<span class="string">&quot;1&quot;</span> <span class="attr">pagesize</span>=<span class="string">&quot;20&quot;</span> <span class="attr">id</span>=<span class="string">&quot;element&quot;</span> <span class="attr">partialList</span>=<span class="string">&quot;true&quot;</span> <span class="attr">size</span>=<span class="string">&quot;resultSize&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中：<br><strong>sort&#x3D;”external”</strong> 告诉DisplayTag传入的数据集已经由外部程序排好序了..<br><strong>defaultsort&#x3D;”1”</strong> 说明默认是升序(Descending is 2, Ascending is 1);<br><strong>partialList&#x3D;”true”</strong> 说明部分装入数据;<br><strong>pagesize&#x3D;”20”</strong> 每页显示记录数;<br><strong>size&#x3D;”resultSize”</strong> 显示记录的总条数(此参数结合PageSize，使得表格在只拿到某一页的完整数据的同时，可以知道会有多少页，并将其他的页数也列举出来，当用户实际翻页时才去获取当页数据);</p>
<p>关于以上翻页范例的详细内容可以查看发布包文档中的<a href="http://displaytag.sourceforge.net/11/tut_externalSortAndPage.html">External paging&#x2F;sorting</a> 一节。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>将Java应用注册为后台服务</title>
    <url>/article/d531bfa2.html</url>
    <content><![CDATA[<p>项目中有一个java应用程序，交付后用户要求要把这个程序做成后台服务程序，即：系统启动后该程序可以自动启动，并且在前台不要出现运行窗口，维护人员只要在“服务管理”(Windows)中选择启动或停止即可.<br>解决办法如下：</p>
<span id="more"></span>

<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>在Linux中注册后台服务程序相对容易，只需编辑<code>/etc/init.d/boot.local</code>文件，在<code>boot.local</code>文件里加上下面这句脚本：<br><code>/iapappserver/MessageServer2.1/run.sh</code><br>其中run.sh是java应用的运行脚本</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>在Windows下的情况较为复杂，需要使用Windows提供的两个工具：<strong>instsrv.exe</strong>(<a href="http://postboy.myetang.com/files/instsrv.exe">下载</a>)和<strong>Srvany.exe</strong>(<a href="http://postboy.myetang.com/files/srvany.exe">下载</a>).<br><strong>instsrv: 这个工具是把win32程序变成系统服务。</strong><br>基本用法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">instsrv [服务名] [应用程序绝对路径] (增加服务)  </span><br><span class="line">instsrv [服务名] REMOVE　　(删除服务)  </span><br></pre></td></tr></table></figure>

<p>但是并不是所有程序都适合做系统服务的，注册成系统服务后就是无法启动的,这时就需要用到<code>srvany</code>.</p>
<p><strong>srvany:</strong> 这个工具就是用来解决上面的工具中的问题，你注册的时候把它当作你要的服务，在用它来启动你的应用程序。  </p>
<p>基本用法:<br><code>instsrv [服务名] [srvany的绝对路径]</code></p>
<p>具体步骤如下:  </p>
<ol>
<li>注册服务: <strong>path\instsrv 服务名 path\srvany.exe</strong>  </li>
<li>regedit打开注册表  </li>
<li>进入HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\服务名  </li>
<li>右键-新建-项 填入 Parameters  </li>
<li>打开Parameters，右键-新建-字符串值 Application  </li>
<li>双击Application 填入 应用程序的绝对路径,如: D:\workspace\app\main.exe  </li>
<li>右键-新建-字符串值AppDirectory  </li>
<li>双击AppDirectory 填入 应用程序的工作目录,如: D:\workspace\app\  </li>
<li>启动服务。</li>
</ol>
<p>在<strong>Parameters</strong>里还可以添加很多键值：  </p>
<ul>
<li><strong>AppDirectory</strong> 工作目录  </li>
<li><strong>AppParameters</strong> 你的应用程序的参数。  </li>
<li><strong>AppEnvironment</strong> 运行环境变量。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>为程序加上关闭钩子(ShutdownHook)</title>
    <url>/article/31eff00a.html</url>
    <content><![CDATA[<p>“<strong>关闭钩子</strong>”（ShutdownHook）是这样一个概念：向虚拟机注册一个线程，当程序退出(Ctrl+C)时虚拟机会启动这个线程,我们可以在这个线程的run()中做一些清除的工作,如:<strong>释放数据库连接,关闭文件</strong>等.  </p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>shutdownhook通常用来在Ctrl+C退出时触发清理工作(多是在后台服务中，这种服务通常是24*7运行的，正常情况下是不退出的)，如果能够在程序中显式地确定退出的时机，那么最好是直接在退出前做清理，不用搞得这么复杂。</p>
<span id="more"></span>

<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p><code>Runtime.getRuntime().addShutdownHook(Thread t);</code></p>
<h2 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h2><p><code>Runtime.getRuntime().removeShutdownHook(Thread t);</code></p>
<p><strong>[例子]</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在这个线程中实现程序退出前的清理工作  </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator  </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isTerminal</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!isTerminal) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;run sub thread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTerminal</span><span class="params">()</span> &#123;</span><br><span class="line">        isTerminal = <span class="literal">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;stop sun sub thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ShutdownDownHook测试类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestShutdownHook</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    TestThread testThread;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addThread</span><span class="params">(TestThread t)</span> &#123;</span><br><span class="line">        testThread = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现程序退出前的清理工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is ShutdownHook&quot;</span>);</span><br><span class="line">        testThread.onTerminal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestShutdownHook</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestShutdownHook</span>();</span><br><span class="line">        <span class="type">TestThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread</span>();</span><br><span class="line">        t.start();</span><br><span class="line">        m.addThread(t);</span><br><span class="line">        <span class="comment">// 注册退出处理线程</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong>:    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run sub thread  </span><br><span class="line">run sub thread  </span><br><span class="line">run sub thread  </span><br><span class="line">run sub thread  </span><br><span class="line">This is ShutdownHook  </span><br><span class="line">stop sun sub thread  </span><br></pre></td></tr></table></figure>

<p>可以看到:<strong>当程序退出时启动了TestThread线程，执行了定义的释放工作</strong>。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>剔除List中的重复值</title>
    <url>/article/59d39a85.html</url>
    <content><![CDATA[<h3 id="方法一：循环元素删除"><a href="#方法一：循环元素删除" class="headerlink" title="方法一：循环元素删除"></a>方法一：循环元素删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  删除ArrayList中重复元素</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">removeDuplicate</span><span class="params">(List list)</span>  &#123;</span><br><span class="line">   <span class="keyword">for</span>  ( <span class="type">int</span>  <span class="variable">i</span>  <span class="operator">=</span>   <span class="number">0</span> ; i  &lt;  list.size()  -   <span class="number">1</span> ; i ++ )  &#123;</span><br><span class="line">    <span class="keyword">for</span>  ( <span class="type">int</span>  <span class="variable">j</span>  <span class="operator">=</span>  list.size()  -   <span class="number">1</span> ; j  &gt;  i; j -- )  &#123;</span><br><span class="line">      <span class="keyword">if</span>  (list.get(j).equals(list.get(i)))  &#123;</span><br><span class="line">        list.remove(j);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="方法二：通过HashSet剔除"><a href="#方法二：通过HashSet剔除" class="headerlink" title="方法二：通过HashSet剔除"></a>方法二：通过HashSet剔除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  删除ArrayList中重复元素</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">removeDuplicate</span><span class="params">(List list)</span>  &#123;</span><br><span class="line">    <span class="type">HashSet</span> <span class="variable">h</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">HashSet</span>(list);</span><br><span class="line">    list.clear();</span><br><span class="line">    list.addAll(h);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法三：-删除ArrayList中重复元素，保持顺序"><a href="#方法三：-删除ArrayList中重复元素，保持顺序" class="headerlink" title="方法三： 删除ArrayList中重复元素，保持顺序"></a>方法三： 删除ArrayList中重复元素，保持顺序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除ArrayList中重复元素，保持顺序</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>  <span class="title function_">removeDuplicateWithOrder</span><span class="params">(List list)</span>  &#123;</span><br><span class="line">      <span class="type">Set</span> <span class="variable">set</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">HashSet</span>();</span><br><span class="line">      <span class="type">List</span> <span class="variable">newList</span>  <span class="operator">=</span>   <span class="keyword">new</span>  <span class="title class_">ArrayList</span>();</span><br><span class="line">   <span class="keyword">for</span>  (<span class="type">Iterator</span> <span class="variable">iter</span>  <span class="operator">=</span>  list.iterator(); iter.hasNext();)  &#123;</span><br><span class="line">         <span class="type">Object</span> <span class="variable">element</span>  <span class="operator">=</span>  iter.next();</span><br><span class="line">         <span class="keyword">if</span>  (set.add(element))</span><br><span class="line">            newList.add(element);</span><br><span class="line">     &#125;</span><br><span class="line">     list.clear();</span><br><span class="line">     list.addAll(newList);</span><br><span class="line">     System.out.println( <span class="string">&quot; remove duplicate &quot;</span>   +  list);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>把Raspberry Pi打造成 Web Server</title>
    <url>/article/ddf385ff.html</url>
    <content><![CDATA[<h2 id="Setup-Raspberry-Pi"><a href="#Setup-Raspberry-Pi" class="headerlink" title="Setup Raspberry Pi"></a>Setup Raspberry Pi</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>理论上 OS 可以是任何支持 ARM v6 的 Linux 发行版，推荐使用官方的 wheezy 系统，因为这是针对树莓派定制并优化了的 Debian。<br>下载地址：<a href="http://www.raspberrypi.org/downloads" title="http://www.raspberrypi.org/downloads">http://www.raspberrypi.org/downloads</a><br>解压之后得到一个 .img 的镜像文件，比如 2013-07-26-wheezy-raspbian.img.  </p>
<p>在Windows下使用工具：<a href="http://sourceforge.net/projects/win32diskimager/">win32diskimager</a> 把镜像文件写入 SD 卡。  </p>
<p>将刻好的 SD 卡插入树莓派的 SD 卡插槽，接上键盘和显示器。然后开机，也就是插上电源，树莓派没有电源开关，插电即开机。拔出电源就是关机，不过最安全的方式是使用 <code>sudo shutdown -h now</code> 或 <code>sudo halt</code> 命令正确地关闭系统，然后再拔电源。 重启使用 <code>sudo reboot</code> 命令。</p>
<span id="more"></span>

<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>第一次开机正常启动后，看到的是 Raspi-config 界面， 你可以使用键盘做一些基本的系统设置:  </p>
<ul>
<li>先简单地设置一下地区、时区、键盘。注意默认的键盘布局（layout）设置是 English(UK) （因为是英国人发明的），在 Others 中把它改为 English(US)，否则 # 号的位置不对。</li>
<li>接着还可以修改默认用户 pi 的密码，官方系统的默认账号是 pi &#x2F; raspberry 。</li>
<li>在 ssh 设置中启用 ssh 服务（默认已启用），这样以后就可以 ssh 远程控制了。</li>
<li>在 boot_behaviour 设置中，设置开机是否自动进入桌面环境（默认进入），选择否则只进入命令行模式。建议关闭桌面，需要的时候使用 <code>startx</code> 命令就可以进入。系统提供的桌面是 LXDE ，有一些基本功能。</li>
<li>expand_rootfs 设置是让你的系统扩展到全部 SD 卡空间，默认没有使用全部 SD 卡空间，所以请执行这个选项。</li>
<li>最后，执行 Finish 完成设置，重启系统。</li>
</ul>
<p>重启之后就不会再出现这个设置界面了，但你随时可以使用 <code>sudo raspi-config</code> 命令再次使用这个设置工具。</p>
<p>装好 OS 后，建议先升级一下系统，最新的更新可能会提高系统的性能：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update      </span><br><span class="line">sudo apt-get upgrade  </span><br></pre></td></tr></table></figure>

<p>一些在设置系统时常用到的命令：  </p>
<ul>
<li><p>关机: <code>sudo shutdown -h now</code>或 <code>sudo halt</code></p>
</li>
<li><p>重启: <code>sudo reboot</code></p>
</li>
<li><p>查看IP地址： <code>ifconfig</code></p>
</li>
<li><p>Set Up SSH:</p>
</li>
<li><p>Install FTP</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R pi /var/www  -- Take ownership of the web root  </span><br><span class="line">sudo apt-get install vsftpd -- install vsftpd  </span><br><span class="line">sudo service vsftpd restart -- restart vsftpd</span><br></pre></td></tr></table></figure>

<p>到这里，<strong>就装好了一台 RPi</strong></p>
<h2 id="Setup-Tomcat"><a href="#Setup-Tomcat" class="headerlink" title="Setup Tomcat"></a>Setup Tomcat</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul>
<li>install tomcat server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tomcat7  </span><br></pre></td></tr></table></figure>

<h3 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h3><ul>
<li>link conf and webapps folders</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/tomcat7  </span><br><span class="line">sudo <span class="built_in">rm</span> -r webapps  </span><br><span class="line">sudo <span class="built_in">ln</span> -s /var/lib/tomcat7/conf conf  </span><br><span class="line">sudo <span class="built_in">ln</span> -s /var/lib/tomcat7/webapps webapps   </span><br></pre></td></tr></table></figure>

<ul>
<li>give full access to webapps folder</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 /usr/share/tomcat7/webapps  </span><br></pre></td></tr></table></figure>

<ul>
<li>copy war file to server webapps folder (from local pc)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp &lt;path&gt;/&lt;file&gt;.war &lt;username&gt;@&lt;ip&gt;:/usr/share/tomcat7/webapps/&lt;file&gt;.war   </span><br></pre></td></tr></table></figure>

<ul>
<li>restart tomcat server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service tomcat7 restart    </span><br></pre></td></tr></table></figure>

<h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><ul>
<li>tomcat server commands</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service tomcat7 [&lt;start&gt; &lt;stop&gt; &lt;restart&gt;]</span><br></pre></td></tr></table></figure>

<ul>
<li>Where to find the web app log files:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/log/tomcat</span><br></pre></td></tr></table></figure>

<h2 id="Setup-MySQL"><a href="#Setup-MySQL" class="headerlink" title="Setup MySQL"></a>Setup MySQL</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ul>
<li>Install MySQL server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client php5-mysql</span><br></pre></td></tr></table></figure>

<h3 id="管理-1"><a href="#管理-1" class="headerlink" title="管理"></a>管理</h3><ul>
<li>Manage MySQL service</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mysql start/stop/restart  </span><br></pre></td></tr></table></figure>

<h3 id="设置-2"><a href="#设置-2" class="headerlink" title="设置"></a>设置</h3><h4 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h4><p>By default remote access to the MySQL database server is disabled for security reasons.To allow remotely access to the database server from the web server or home, follow below quick steps.  </p>
<p><strong>1.Edit my.cnf File</strong>    </p>
<ul>
<li>If you are using Debian Linux file is located at <strong>&#x2F;etc&#x2F;mysql&#x2F;my.cnf</strong> location   </li>
<li>If you are using Red Hat Linux&#x2F;Fedora&#x2F;Centos Linux file is located at <strong>&#x2F;etc&#x2F;my.cnf</strong> location   </li>
<li>If you are using FreeBSD you need to create a file <strong>&#x2F;var&#x2F;db&#x2F;mysql&#x2F;my.cnf</strong><br>Edit <strong>&#x2F;etc&#x2F;my.cnf</strong>, run:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf  </span><br></pre></td></tr></table></figure>

<p>Once file opened, locate line that read as follows  </p>
<p>[mysqld]<br>Make sure line skip-networking is commented (or remove line) and add following line  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bind-address=YOUR-SERVER-IP  </span><br></pre></td></tr></table></figure>

<p>For example, if your MySQL server IP is <code>65.55.55.2</code> then entire block should be look like as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]  </span><br><span class="line">user            = mysql  </span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid  </span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock  </span><br><span class="line">port            = 3306  </span><br><span class="line">basedir         = /usr  </span><br><span class="line">datadir         = /var/lib/mysql  </span><br><span class="line">tmpdir          = /tmp  </span><br><span class="line">language        = /usr/share/mysql/English  </span><br><span class="line">bind-address    = 65.55.55.2  </span><br><span class="line"><span class="comment">#  skip-networking  </span></span><br><span class="line">....  </span><br><span class="line">..  </span><br><span class="line">....  </span><br></pre></td></tr></table></figure>

<p>Where,</p>
<ul>
<li><strong>bind-address</strong> : IP address to bind to.</li>
<li><strong>skip-networking</strong> : Don’t listen for TCP&#x2F;IP connections at all. All interaction with mysqld must be made via Unix sockets. This option is highly recommended for systems where only local requests are allowed. Since you need to allow remote connection this line should be removed from my.cnf or put it in comment state.</li>
</ul>
<p>2.Grant access to remote IP address</p>
<ul>
<li>Connect to mysql server:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p mysql  </span><br></pre></td></tr></table></figure>

<ul>
<li>Grant access to a new database<br>If you want to add a new database called foo for user bar and remote IP <code>202.54.10.20</code> then you need to type the following commands at mysql&gt; prompt:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE foo;  </span><br><span class="line">mysql&gt; GRANT ALL ON foo.* TO bar@<span class="string">&#x27;202.54.10.20&#x27;</span> IDENTIFIED BY <span class="string">&#x27;PASSWORD&#x27;</span>;  </span><br></pre></td></tr></table></figure>

<ul>
<li>Grant Access To An Existing Database</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; update db <span class="built_in">set</span> Host=<span class="string">&#x27;202.54.10.20&#x27;</span> <span class="built_in">where</span> Db=<span class="string">&#x27;webdb&#x27;</span>;  </span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> Host=<span class="string">&#x27;202.54.10.20&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;webadmin&#x27;</span>;   </span><br></pre></td></tr></table></figure>

<ul>
<li>Test connection</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -u webadmin –h 65.55.55.2 –p</span><br></pre></td></tr></table></figure>

<p>Where  </p>
<ul>
<li>u webadmin: webadmin is MySQL username   </li>
<li>h IP or hostname: 65.55.55.2 is MySQL server IP address or hostname (FQDN)   </li>
<li>p Prompt for password</li>
</ul>
<p>You can also use the telnet or nc command to connect to port 3306 for testing purpose:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> X | telnet -e X 65.55.55.2 3306  </span><br></pre></td></tr></table></figure>

<p>OR  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nc -z -w1 65.55.55.2 3306  </span><br></pre></td></tr></table></figure>

<p>Sample outputs:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Connection to 65.55.55.2 3306 port [tcp/mysql] succeeded!  </span><br></pre></td></tr></table></figure>

<h4 id="MySQL-中文乱码"><a href="#MySQL-中文乱码" class="headerlink" title="MySQL 中文乱码"></a>MySQL 中文乱码</h4><p>MySQL中默认字符集的设置有四级:服务器级，数据库级，表级 。最终是字段级 的字符集设置。注意前三种均为默认设置，并不代码你的字段最终会使用这个字符集设置。所以我们建议要用<code>show create table table ;</code> 或<code>show full fields from tableName;</code> 来检查当前表中字段的字符集设置。</p>
<p><strong>1.查看默认的编码格式:</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;%char%&quot;</span>;</span><br><span class="line"></span><br><span class="line">+--------------------------+---------------+  </span><br><span class="line">| Variable_name | Value |  </span><br><span class="line">+--------------------------+---------------+  </span><br><span class="line">| character_set_client | gbk |  </span><br><span class="line">| character_set_connection | gbk |  </span><br><span class="line">| character_set_database | utf8 |  </span><br><span class="line">| character_set_filesystem | binary |  </span><br><span class="line">| character_set_results | gbk |  </span><br><span class="line">| character_set_server | utf8 |  </span><br><span class="line">| character_set_system | utf8 |  </span><br><span class="line">+--------------------------+-------------+  </span><br></pre></td></tr></table></figure>

<p>注：以前2个来确定,可以使用<code>set names utf8</code>,<code>set names gbk</code>设置默认的编码格式;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> names utf8;   **有时候这一句很关键！**</span><br></pre></td></tr></table></figure>

<p>执行SET NAMES utf8的效果等同于同时设定如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET character_set_client=<span class="string">&#x27;utf8&#x27;</span>;  </span><br><span class="line">SET character_set_connection=<span class="string">&#x27;utf8&#x27;</span>;  </span><br><span class="line">SET character_set_results=<span class="string">&#x27;utf8&#x27;</span>;  </span><br></pre></td></tr></table></figure>

<p><strong>2.数据库表中字段的字符集设置 :</strong> </p>
<p><code>show create table TableName</code> 或 <code>show full columns from tableName</code>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table t1;  </span><br><span class="line">+-------+------------------------------------  </span><br><span class="line">| Table | Create Table                       </span><br><span class="line">+-------+------------------------------------  </span><br><span class="line">| t1    | CREATE TABLE `t1` (  </span><br><span class="line">  `<span class="built_in">id</span>` int(11) NOT NULL,  </span><br><span class="line">  `c1` varchar(30) DEFAULT NULL,  </span><br><span class="line">  PRIMARY KEY (`<span class="built_in">id</span>`)      </span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=gbk |  </span><br><span class="line">+-------+------------------------------------  </span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)   </span><br><span class="line"></span><br><span class="line">mysql&gt; show full columns from t1;  </span><br><span class="line">+-------+-------------+----------------+------+-----+-  </span><br><span class="line">| Field | Type        | Collation      | Null | Key |   </span><br><span class="line">+-------+-------------+----------------+------+-----+-  </span><br><span class="line">| <span class="built_in">id</span>    | int(11)     | NULL           | NO   | PRI |   </span><br><span class="line">| c1    | varchar(30) | gbk_chinese_ci | YES  |     |   </span><br><span class="line">+-------+-------------+----------------+------+-----+-  </span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)   </span><br><span class="line">mysql&gt;   </span><br></pre></td></tr></table></figure>

<p><strong>3.当前联接系统参数</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;char%&#x27;</span>    </span><br><span class="line">&gt;+--------------------------+----------------  </span><br><span class="line">| Variable_name            | Value  </span><br><span class="line">+--------------------------+----------------  </span><br><span class="line">| character_set_client     | gbk  </span><br><span class="line">| character_set_connection | gbk  </span><br><span class="line">| character_set_database   | latin1  </span><br><span class="line">| character_set_filesystem | binary  </span><br><span class="line">| character_set_results    | gbk  </span><br><span class="line">| character_set_server     | latin1  </span><br><span class="line">| character_set_system     | utf8  </span><br><span class="line">| character_sets_dir       | C:/Program File  </span><br><span class="line">+--------------------------+----------------  </span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)   </span><br><span class="line">mysql&gt;   </span><br></pre></td></tr></table></figure>

<p><strong>4.中文，请确保 表中该字段的字符集为中文兼容：</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">big5     | Big5 Traditional Chinese  </span><br><span class="line">gb2312   | GB2312 Simplified Chinese  </span><br><span class="line">gbk      | GBK Simplified Chinese  </span><br><span class="line">utf8     | UTF-8 Unicode   </span><br></pre></td></tr></table></figure>

<p><strong>5.确保联接参数与这个字段字符集一致,你可以用 <code>set name &#39;charsetname&#39;;</code></strong><br>比如， <code>set name &#39;gbk&#39;;</code><br> 这条命令会同时修改  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">character_set_client  </span><br><span class="line">character_set_connection  </span><br><span class="line">character_set_results  </span><br></pre></td></tr></table></figure>

<p>(如果你的这架MySQL中都为中文，则你可以在<code>my.ini</code>或<code>my.cnf</code>中加上或修改这个参数, 参数文件修改后需重启MySQL服务)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">default-character-set=gbk </span><br></pre></td></tr></table></figure>

<p><strong>Update on 2013-9-20</strong><br>上面提到的方法都没有解决中文乱码的问题，最终采用在connection URL 中加入编码参数的方法，问题解决，终于可以正常存入和显示中文了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://serverhost:3306/database?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>关于 Java String 内存管理的几个有趣的例子</title>
    <url>/article/ae982c1d.html</url>
    <content><![CDATA[<p>今天在 <a href="http://www.oschina.net/">OSChina</a> 上看到一篇有趣的文章：<a href="http://my.oschina.net/u/551903/blog/134000">关于String内存分配的深入探讨</a>,文章通过几个简单的例子，把Java中String的内存管理的方式解释的很清楚，涨了不少姿势，现根据自己的理解做些笔记在这里：</p>
<span id="more"></span>

<p>废话不多说，先上代码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE</span> <span class="operator">=</span> <span class="string">&quot;taobao&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// ---------------------------------------------</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;tao&quot;</span> + <span class="string">&quot;bao&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;tao&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;bao&quot;</span>;</span><br><span class="line"></span><br><span class="line">		System.out.println(a == MESSAGE);<span class="comment">// true</span></span><br><span class="line">		System.out.println((b + c) == MESSAGE);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// ---------------------------------------------</span></span><br><span class="line">		<span class="keyword">final</span> <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;tao&quot;</span>;</span><br><span class="line">		<span class="keyword">final</span> <span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> <span class="string">&quot;bao&quot;</span>;</span><br><span class="line"></span><br><span class="line">		System.out.println((d + e) == MESSAGE);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// ---------------------------------------------</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> <span class="string">&quot;tao&quot;</span> + <span class="string">&quot;bao&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;taobao&quot;</span>);</span><br><span class="line"></span><br><span class="line">		System.out.println(f == MESSAGE); <span class="comment">// true</span></span><br><span class="line">		System.out.println(g == MESSAGE); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">		g = g.intern();</span><br><span class="line"></span><br><span class="line">		System.out.println(g == MESSAGE); <span class="comment">// true</span></span><br><span class="line">		System.out.println(f == g.intern()); <span class="comment">// true</span></span><br><span class="line">		<span class="comment">// ---------------------------------------------</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ul>
<li>Java中对于编译和运行时能够知道大小的变量（如：引用变量和基本类型的值）存放于<strong>栈内存</strong>   </li>
<li>Java中通过 new 产生的变量和大小会在运行时变化的变量(如：数组和链表)存放于<strong>堆内存，但指向对象的引用还是存放在栈内存</strong>   </li>
<li><strong>栈内存中的数据会相互共享</strong>，如果新增变量的值在栈中已经存在，那么新变量将指向同一个地址和值，而不会新增一个空间来存放自己的值;如果没有就在该栈内存增加一个该常量，并将变量指向该常量。 </li>
<li>对于<strong>直接赋值的字符串常量</strong>（如String s&#x3D;“Hello World”；中的Hello World）也是<strong>存放在栈内存中</strong>  </li>
<li>堆内存没有数据共享的特点,每次都会新增划分一个空间给新的变量，哪怕是相同的值  </li>
<li>Java <strong>编译器的优化</strong>，会对于<strong>字符串常量的相加</strong>，在编译时<strong>直接</strong>将字符串<strong>合并</strong>，而不是等到运行时再合并，比如：<strong>String a &#x3D; “tao”+”bao”;和String a &#x3D; “taobao”;编译出的字节码是一样的</strong>  </li>
<li><strong>Java对String的相加是通过StringBuffer实现的</strong>，先构造一个StringBuffer,然后调用append()方法追加，然后将StringBuffer转化成String对象。StringBuffer对象<strong>在堆内存中</strong>，那转换成的String对象理所应当的也是在堆内存中  </li>
<li><strong>intern()<strong>方法会</strong>先检查</strong>String池(或者说成<strong>栈内存</strong>)中是否存在相同的字符串常量，如果有就返回  </li>
<li><strong>final变量</strong>不可能再次赋值了，所以存放在<strong>栈内存里</strong></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>把Raspberry Pi打造成 Web Server</title>
    <url>/article/ddf385ff.html</url>
    <content><![CDATA[<h2 id="Setup-Raspberry-Pi"><a href="#Setup-Raspberry-Pi" class="headerlink" title="Setup Raspberry Pi"></a>Setup Raspberry Pi</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>理论上 OS 可以是任何支持 ARM v6 的 Linux 发行版，推荐使用官方的 wheezy 系统，因为这是针对树莓派定制并优化了的 Debian。<br>下载地址：<a href="http://www.raspberrypi.org/downloads" title="http://www.raspberrypi.org/downloads">http://www.raspberrypi.org/downloads</a><br>解压之后得到一个 .img 的镜像文件，比如 2013-07-26-wheezy-raspbian.img.  </p>
<p>在Windows下使用工具：<a href="http://sourceforge.net/projects/win32diskimager/">win32diskimager</a> 把镜像文件写入 SD 卡。  </p>
<p>将刻好的 SD 卡插入树莓派的 SD 卡插槽，接上键盘和显示器。然后开机，也就是插上电源，树莓派没有电源开关，插电即开机。拔出电源就是关机，不过最安全的方式是使用 <code>sudo shutdown -h now</code> 或 <code>sudo halt</code> 命令正确地关闭系统，然后再拔电源。 重启使用 <code>sudo reboot</code> 命令。</p>
<span id="more"></span>

<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>第一次开机正常启动后，看到的是 Raspi-config 界面， 你可以使用键盘做一些基本的系统设置:  </p>
<ul>
<li>先简单地设置一下地区、时区、键盘。注意默认的键盘布局（layout）设置是 English(UK) （因为是英国人发明的），在 Others 中把它改为 English(US)，否则 # 号的位置不对。</li>
<li>接着还可以修改默认用户 pi 的密码，官方系统的默认账号是 pi &#x2F; raspberry 。</li>
<li>在 ssh 设置中启用 ssh 服务（默认已启用），这样以后就可以 ssh 远程控制了。</li>
<li>在 boot_behaviour 设置中，设置开机是否自动进入桌面环境（默认进入），选择否则只进入命令行模式。建议关闭桌面，需要的时候使用 <code>startx</code> 命令就可以进入。系统提供的桌面是 LXDE ，有一些基本功能。</li>
<li>expand_rootfs 设置是让你的系统扩展到全部 SD 卡空间，默认没有使用全部 SD 卡空间，所以请执行这个选项。</li>
<li>最后，执行 Finish 完成设置，重启系统。</li>
</ul>
<p>重启之后就不会再出现这个设置界面了，但你随时可以使用 <code>sudo raspi-config</code> 命令再次使用这个设置工具。</p>
<p>装好 OS 后，建议先升级一下系统，最新的更新可能会提高系统的性能：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update      </span><br><span class="line">sudo apt-get upgrade  </span><br></pre></td></tr></table></figure>

<p>一些在设置系统时常用到的命令：  </p>
<ul>
<li>关机: <code>sudo shutdown -h now</code>或 <code>sudo halt</code></li>
<li>重启: <code>sudo reboot</code></li>
<li>查看IP地址： <code>ifconfig</code></li>
<li>Set Up SSH:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> /boot/boot_enable_ssh.rc /boot/boot.rc   </span><br><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure>

<ul>
<li>Install FTP</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R pi /var/www  -- Take ownership of the web root  </span><br><span class="line">sudo apt-get install vsftpd -- install vsftpd  </span><br><span class="line">sudo service vsftpd restart -- restart vsftpd</span><br></pre></td></tr></table></figure>

<p>到这里，<strong>就装好了一台 RPi</strong></p>
<h2 id="Setup-Tomcat"><a href="#Setup-Tomcat" class="headerlink" title="Setup Tomcat"></a>Setup Tomcat</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul>
<li>install tomcat server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tomcat7  </span><br></pre></td></tr></table></figure>

<h3 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h3><ul>
<li>link conf and webapps folders</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/tomcat7  </span><br><span class="line">sudo <span class="built_in">rm</span> -r webapps  </span><br><span class="line">sudo <span class="built_in">ln</span> -s /var/lib/tomcat7/conf conf  </span><br><span class="line">sudo <span class="built_in">ln</span> -s /var/lib/tomcat7/webapps webapps   </span><br></pre></td></tr></table></figure>

<ul>
<li>give full access to webapps folder</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 /usr/share/tomcat7/webapps  </span><br></pre></td></tr></table></figure>

<ul>
<li>copy war file to server webapps folder (from local pc)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp &lt;path&gt;/&lt;file&gt;.war &lt;username&gt;@&lt;ip&gt;:/usr/share/tomcat7/webapps/&lt;file&gt;.war   </span><br></pre></td></tr></table></figure>

<ul>
<li>restart tomcat server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service tomcat7 restart    </span><br></pre></td></tr></table></figure>

<h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><ul>
<li>tomcat server commands</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service tomcat7 [&lt;start&gt; &lt;stop&gt; &lt;restart&gt;]</span><br></pre></td></tr></table></figure>

<ul>
<li>Where to find the web app log files:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/log/tomcat</span><br></pre></td></tr></table></figure>

<h2 id="Setup-MySQL"><a href="#Setup-MySQL" class="headerlink" title="Setup MySQL"></a>Setup MySQL</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ul>
<li>Install MySQL server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client php5-mysql</span><br></pre></td></tr></table></figure>

<h3 id="管理-1"><a href="#管理-1" class="headerlink" title="管理"></a>管理</h3><ul>
<li>Manage MySQL service</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mysql start/stop/restart  </span><br></pre></td></tr></table></figure>

<h3 id="设置-2"><a href="#设置-2" class="headerlink" title="设置"></a>设置</h3><h4 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h4><p>By default remote access to the MySQL database server is disabled for security reasons.To allow remotely access to the database server from the web server or home, follow below quick steps.  </p>
<p><strong>1.Edit my.cnf File</strong>    </p>
<ul>
<li>If you are using Debian Linux file is located at <strong>&#x2F;etc&#x2F;mysql&#x2F;my.cnf</strong> location   </li>
<li>If you are using Red Hat Linux&#x2F;Fedora&#x2F;Centos Linux file is located at <strong>&#x2F;etc&#x2F;my.cnf</strong> location   </li>
<li>If you are using FreeBSD you need to create a file <strong>&#x2F;var&#x2F;db&#x2F;mysql&#x2F;my.cnf</strong><br>Edit <strong>&#x2F;etc&#x2F;my.cnf</strong>, run:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf  </span><br></pre></td></tr></table></figure>

<p>Once file opened, locate line that read as follows  </p>
<p>[mysqld]<br>Make sure line skip-networking is commented (or remove line) and add following line  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bind-address=YOUR-SERVER-IP  </span><br></pre></td></tr></table></figure>

<p>For example, if your MySQL server IP is <code>65.55.55.2</code> then entire block should be look like as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]  </span><br><span class="line">user            = mysql  </span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid  </span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock  </span><br><span class="line">port            = 3306  </span><br><span class="line">basedir         = /usr  </span><br><span class="line">datadir         = /var/lib/mysql  </span><br><span class="line">tmpdir          = /tmp  </span><br><span class="line">language        = /usr/share/mysql/English  </span><br><span class="line">bind-address    = 65.55.55.2  </span><br><span class="line"><span class="comment">#  skip-networking  </span></span><br><span class="line">....  </span><br><span class="line">..  </span><br><span class="line">....  </span><br></pre></td></tr></table></figure>

<p>Where,</p>
<ul>
<li><strong>bind-address</strong> : IP address to bind to.</li>
<li><strong>skip-networking</strong> : Don’t listen for TCP&#x2F;IP connections at all. All interaction with mysqld must be made via Unix sockets. This option is highly recommended for systems where only local requests are allowed. Since you need to allow remote connection this line should be removed from my.cnf or put it in comment state.</li>
</ul>
<p>2.Grant access to remote IP address</p>
<ul>
<li>Connect to mysql server:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p mysql  </span><br></pre></td></tr></table></figure>

<ul>
<li>Grant access to a new database<br>If you want to add a new database called foo for user bar and remote IP <code>202.54.10.20</code> then you need to type the following commands at mysql&gt; prompt:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE foo;  </span><br><span class="line">mysql&gt; GRANT ALL ON foo.* TO bar@<span class="string">&#x27;202.54.10.20&#x27;</span> IDENTIFIED BY <span class="string">&#x27;PASSWORD&#x27;</span>;  </span><br></pre></td></tr></table></figure>

<ul>
<li>Grant Access To An Existing Database</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; update db <span class="built_in">set</span> Host=<span class="string">&#x27;202.54.10.20&#x27;</span> <span class="built_in">where</span> Db=<span class="string">&#x27;webdb&#x27;</span>;  </span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> Host=<span class="string">&#x27;202.54.10.20&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;webadmin&#x27;</span>;   </span><br></pre></td></tr></table></figure>

<ul>
<li>Test connection</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -u webadmin –h 65.55.55.2 –p</span><br></pre></td></tr></table></figure>

<p>Where  </p>
<ul>
<li>u webadmin: webadmin is MySQL username   </li>
<li>h IP or hostname: 65.55.55.2 is MySQL server IP address or hostname (FQDN)   </li>
<li>p Prompt for password</li>
</ul>
<p>You can also use the telnet or nc command to connect to port 3306 for testing purpose:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> X | telnet -e X 65.55.55.2 3306  </span><br></pre></td></tr></table></figure>

<p>OR  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nc -z -w1 65.55.55.2 3306  </span><br></pre></td></tr></table></figure>

<p>Sample outputs:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Connection to 65.55.55.2 3306 port [tcp/mysql] succeeded!  </span><br></pre></td></tr></table></figure>

<h4 id="MySQL-中文乱码"><a href="#MySQL-中文乱码" class="headerlink" title="MySQL 中文乱码"></a>MySQL 中文乱码</h4><p>MySQL中默认字符集的设置有四级:服务器级，数据库级，表级 。最终是字段级 的字符集设置。注意前三种均为默认设置，并不代码你的字段最终会使用这个字符集设置。所以我们建议要用<code>show create table table ;</code> 或<code>show full fields from tableName;</code> 来检查当前表中字段的字符集设置。</p>
<p><strong>1.查看默认的编码格式:</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;%char%&quot;</span>;</span><br><span class="line"></span><br><span class="line">+--------------------------+---------------+  </span><br><span class="line">| Variable_name | Value |  </span><br><span class="line">+--------------------------+---------------+  </span><br><span class="line">| character_set_client | gbk |  </span><br><span class="line">| character_set_connection | gbk |  </span><br><span class="line">| character_set_database | utf8 |  </span><br><span class="line">| character_set_filesystem | binary |  </span><br><span class="line">| character_set_results | gbk |  </span><br><span class="line">| character_set_server | utf8 |  </span><br><span class="line">| character_set_system | utf8 |  </span><br><span class="line">+--------------------------+-------------+  </span><br></pre></td></tr></table></figure>

<p>注：以前2个来确定,可以使用<code>set names utf8</code>,<code>set names gbk</code>设置默认的编码格式;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> names utf8;   **有时候这一句很关键！**</span><br></pre></td></tr></table></figure>

<p>执行SET NAMES utf8的效果等同于同时设定如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET character_set_client=<span class="string">&#x27;utf8&#x27;</span>;  </span><br><span class="line">SET character_set_connection=<span class="string">&#x27;utf8&#x27;</span>;  </span><br><span class="line">SET character_set_results=<span class="string">&#x27;utf8&#x27;</span>;  </span><br></pre></td></tr></table></figure>

<p><strong>2.数据库表中字段的字符集设置 :</strong> </p>
<p><code>show create table TableName</code> 或 <code>show full columns from tableName</code>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table t1;  </span><br><span class="line">+-------+------------------------------------  </span><br><span class="line">| Table | Create Table                       </span><br><span class="line">+-------+------------------------------------  </span><br><span class="line">| t1    | CREATE TABLE `t1` (  </span><br><span class="line">  `<span class="built_in">id</span>` int(11) NOT NULL,  </span><br><span class="line">  `c1` varchar(30) DEFAULT NULL,  </span><br><span class="line">  PRIMARY KEY (`<span class="built_in">id</span>`)      </span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=gbk |  </span><br><span class="line">+-------+------------------------------------  </span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)   </span><br><span class="line"></span><br><span class="line">mysql&gt; show full columns from t1;  </span><br><span class="line">+-------+-------------+----------------+------+-----+-  </span><br><span class="line">| Field | Type        | Collation      | Null | Key |   </span><br><span class="line">+-------+-------------+----------------+------+-----+-  </span><br><span class="line">| <span class="built_in">id</span>    | int(11)     | NULL           | NO   | PRI |   </span><br><span class="line">| c1    | varchar(30) | gbk_chinese_ci | YES  |     |   </span><br><span class="line">+-------+-------------+----------------+------+-----+-  </span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)   </span><br><span class="line">mysql&gt;   </span><br></pre></td></tr></table></figure>

<p><strong>3.当前联接系统参数</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;char%&#x27;</span>    </span><br><span class="line">&gt;+--------------------------+----------------  </span><br><span class="line">| Variable_name            | Value  </span><br><span class="line">+--------------------------+----------------  </span><br><span class="line">| character_set_client     | gbk  </span><br><span class="line">| character_set_connection | gbk  </span><br><span class="line">| character_set_database   | latin1  </span><br><span class="line">| character_set_filesystem | binary  </span><br><span class="line">| character_set_results    | gbk  </span><br><span class="line">| character_set_server     | latin1  </span><br><span class="line">| character_set_system     | utf8  </span><br><span class="line">| character_sets_dir       | C:/Program File  </span><br><span class="line">+--------------------------+----------------  </span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)   </span><br><span class="line">mysql&gt;   </span><br></pre></td></tr></table></figure>

<p><strong>4.中文，请确保 表中该字段的字符集为中文兼容：</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">big5     | Big5 Traditional Chinese  </span><br><span class="line">gb2312   | GB2312 Simplified Chinese  </span><br><span class="line">gbk      | GBK Simplified Chinese  </span><br><span class="line">utf8     | UTF-8 Unicode   </span><br></pre></td></tr></table></figure>

<p><strong>5.确保联接参数与这个字段字符集一致,你可以用 <code>set name &#39;charsetname&#39;;</code></strong><br>比如， <code>set name &#39;gbk&#39;;</code><br> 这条命令会同时修改  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">character_set_client  </span><br><span class="line">character_set_connection  </span><br><span class="line">character_set_results  </span><br></pre></td></tr></table></figure>

<p>(如果你的这架MySQL中都为中文，则你可以在<code>my.ini</code>或<code>my.cnf</code>中加上或修改这个参数, 参数文件修改后需重启MySQL服务)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">default-character-set=gbk </span><br></pre></td></tr></table></figure>

<p><strong>Update on 2013-9-20</strong><br>上面提到的方法都没有解决中文乱码的问题，最终采用在connection URL 中加入编码参数的方法，问题解决，终于可以正常存入和显示中文了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://serverhost:3306/database?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>使用Spring Data JPA 简化持久层的开发</title>
    <url>/article/29fea7b8.html</url>
    <content><![CDATA[<p>最近看到<a href="http://www.springside.org.cn/">SpringSide</a>最新版的<a href="https://github.com/springside/springside4/wiki/Design">技术选型</a>中提到了<a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a>,号称只需要实现接口就可以实现大部分操作。真有怎么神奇？于是Google一番，果然好使，在这里记录一下：</p>
<span id="more"></span>
<h2 id="需要的包"><a href="#需要的包" class="headerlink" title="需要的包"></a>需要的包</h2><ul>
<li>spring 3.x(4.0)</li>
<li>spring data jpa 1.4.2</li>
<li>spring data commons 1.5 or later</li>
<li>hibernate 4  </li>
<li>JUnit 4.11</li>
<li>log4j 1.2.14</li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="persistence-xml"><a href="#persistence-xml" class="headerlink" title="persistence.xml"></a>persistence.xml</h3><p>根据JPA的规范，要在类路径下的META-INF文件夹中创建<strong>persistence.xml</strong>文件，spring提供了<strong>org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean</strong>来进行配置，persistence.xml中的属性都可以在这个bean中进行注入。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/persistence&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">&quot;appName&quot;</span> <span class="attr">transaction-type</span>=<span class="string">&quot;RESOURCE_LOCAL&quot;</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.ejb.HibernatePersistence<span class="tag">&lt;/<span class="name">provider</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/appname&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.dialect.MySQL5Dialect&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.use_sql_comments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span>  </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span>  </span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">**说明:**   </span><br><span class="line">1. **persistence-unit**是定义一个单元名称,可以定义多个，在实际使用的时候选择其中一个就可以了。将在后面的**applicationContext.xml**中使用。    </span><br><span class="line">2. 这里的META-INF是classpath下的目录，不是WEB目录下与WEB-INF同级那个目录，要注意区分，我刚开始的时候就是混淆了这两个目录，搞了很久。  </span><br><span class="line"></span><br><span class="line">### applicationContext.xml</span><br><span class="line">```xml</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span> <span class="attr">xmlns:jpa</span>=<span class="string">&quot;http://www.springframework.org/schema/data/jpa&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd&quot;</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span>      </span><br><span class="line">	 </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjun.appname&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">&lt;!-- 启用 annotation事务--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span>  </span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置事务管理器 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;entityManagerFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;entityManagerFactory&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;entityManagerFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;persistenceUnitName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;appName&quot;</span> /&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;persistenceXmlLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:META-INF/persistence.xml&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jpaVendorAdapter&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;generateDdl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;showSql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置Spring Data JPA扫描目录--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjun.appname.dao&quot;</span>  <span class="attr">repository-impl-postfix</span>=<span class="string">&quot;Impl&quot;</span> <span class="attr">entity-manager-factory-ref</span>=<span class="string">&quot;entityManagerFactory&quot;</span> <span class="attr">transaction-manager-ref</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong>主要就是 <code>&lt;jpa:repositories base-package=&quot;com.zjun.appname.dao&quot;/&gt;</code>，这个可以扫描repository接口。</p>
<h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line">log4j.rootLogger=debug, stdout</span><br><span class="line">log4j.logger.footmark=debug</span><br></pre></td></tr></table></figure>
<h2 id="创建-Domain-类"><a href="#创建-Domain-类" class="headerlink" title="创建 Domain 类"></a>创建 Domain 类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="meta">@Table(name = &quot;account&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;  </span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1487994788928657645L</span>;  </span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;  </span><br><span class="line">	<span class="keyword">private</span> String name;  </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Id</span>  </span><br><span class="line">	<span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span>  </span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;  </span><br><span class="line">		<span class="keyword">return</span> id;  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;  </span><br><span class="line">		<span class="built_in">this</span>.id = id;  </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Column(name = &quot;name&quot;)</span>  </span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  </span><br><span class="line">		<span class="keyword">return</span> name;  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">		<span class="built_in">this</span>.name = name;  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="创建-DAO-类"><a href="#创建-DAO-类" class="headerlink" title="创建 DAO 类"></a>创建 DAO 类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;Account, Integer&gt; &#123;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong>  </p>
<ul>
<li>这里实现的是 <strong>CrudRepository</strong> 接口， 通过这个接口 Spring Data JPA 默认提供了全套的增删改查(CRUD)操作；  </li>
<li>也可以实现 <strong>JpaRepository</strong>接口，通过定义方法名来定制需要的操作；  </li>
<li>泛型中的参数，第一个是Entry类，第二个是这个类ID的类型；</li>
<li>根据规范来对方法进行命名，比如 findByUsername 意思是通过username栏位进行数据查找，具体可以参照下面的表格：</li>
</ul>
<p><img src="https://s2.loli.net/2023/11/09/879UlD1W3H24iN5.jpg"></p>
<h2 id="Unit-Test-Case"><a href="#Unit-Test-Case" class="headerlink" title="Unit Test Case"></a>Unit Test Case</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span>  </span><br><span class="line"><span class="meta">@TestExecutionListeners(&#123; DependencyInjectionTestExecutionListener.class,</span></span><br><span class="line"><span class="meta">		TransactionalTestExecutionListener.class &#125;)</span>  </span><br><span class="line"><span class="meta">@Transactional</span>  </span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123; &quot;classpath:spring-appname-cfg.xml&quot; &#125;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAccountDao</span> &#123;  </span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ApplicationContext ctx;  </span><br><span class="line">	<span class="keyword">private</span> AccountDao accountDao;  </span><br><span class="line">	<span class="keyword">private</span> Account account;  </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span>  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;  </span><br><span class="line">		ctx = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-appname-cfg.xml&quot;</span>);  </span><br><span class="line">		accountDao = ctx.getBean(<span class="string">&quot;accountDao&quot;</span>, AccountDao.class);   </span><br><span class="line">		account = <span class="keyword">new</span> <span class="title class_">Account</span>();  </span><br><span class="line">		account.setName(<span class="string">&quot;for testing&quot;</span>);  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span>  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;  </span><br><span class="line">		ctx = <span class="literal">null</span>;  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span>  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCRUD</span><span class="params">()</span> &#123;  </span><br><span class="line">		<span class="comment">// Test create  </span></span><br><span class="line">		<span class="type">Account</span> <span class="variable">a</span> <span class="operator">=</span> accountDao.save(account);  </span><br><span class="line">		<span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> accountDao.count();  </span><br><span class="line">		Assert.assertEquals(<span class="number">1</span>, count);  </span><br><span class="line"></span><br><span class="line">		<span class="comment">// Test find  </span></span><br><span class="line">		<span class="type">Account</span> <span class="variable">b</span> <span class="operator">=</span> accountDao.findOne(a.getId());  </span><br><span class="line">		Assert.assertNotNull(b);  </span><br><span class="line">		Assert.assertEquals(account.getName(), b.getName());  </span><br><span class="line"></span><br><span class="line">		<span class="comment">// Test update  </span></span><br><span class="line">		b.setName(<span class="string">&quot;Test Update&quot;</span>);  </span><br><span class="line">		accountDao.save(b);  </span><br><span class="line">		<span class="type">Account</span> <span class="variable">c</span> <span class="operator">=</span> accountDao.findOne(a.getId());  </span><br><span class="line">		Assert.assertEquals(<span class="string">&quot;Test Update&quot;</span>, c.getName());  </span><br><span class="line"></span><br><span class="line">		<span class="comment">// Test delete  </span></span><br><span class="line">		accountDao.delete(account.getId());  </span><br><span class="line">		<span class="type">Account</span> <span class="variable">d</span> <span class="operator">=</span> accountDao.findOne(account.getId());  </span><br><span class="line">		Assert.assertNull(d);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-spring-jpa/">使用 Spring Data JPA 简化 JPA 开发</a></li>
<li><a href="http://mybar.iteye.com/blog/1863390">Spring-data-jpa 使用</a></li>
<li><a href="http://docs.spring.io/spring-data/jpa/docs/1.4.2.RELEASE/reference/html/index.html">Spring Data JPA - Reference Documentation</a></li>
<li><a href="http://docs.spring.io/spring-data/jpa/docs/1.4.2.RELEASE/reference/html/repository-query-keywords.html">Appendix B. Repository query keywords</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Javascript中的继承关系</title>
    <url>/article/5d2ba95e.html</url>
    <content><![CDATA[<p>意译自KevLinDev上一篇文章，才疏学浅，望指正，英文原文可到<a href="http://www.kevlindev.com/tutorials/javascript/inheritance/">这里</a>查看。</p>
<p>javascript脚本语言是支持面向对象编程(<strong>O</strong>bject <strong>O</strong>riented <strong>P</strong>rogramming )的,只是javascript实现的方式比较特别，与C++和java中的实现方式不同。在javascript中我们需要借助<strong>prototype</strong>对象来访问父类的方法，下面将讨论在javascript中实现OOP中最基本的特征关系 — <strong>继承</strong>。</p>
<span id="more"></span>
<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>我们从最基本的开始：<strong>在javascript中创建对象</strong>。创建一个对象包括2步：</p>
<ol>
<li>创建一个和你想要创建的对象同名的函数(这里可以把这个函数理解为java中的构造函数)；  </li>
<li>通过调用 <strong>new 上面创建的函数名</strong> 的方式创建一个对象实例；</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建同名函数   </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last</span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first</span> = first;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last</span>  = last;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 创建实例  </span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Dough&quot;</span>);  </span><br></pre></td></tr></table></figure>

<p>注意：构造函数中的<strong>this</strong>指针指向当前的创建的对象，这与java中的表示是一致的。通过this指针我们可以操作对象的属性。</p>
<h2 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h2><p>设置对象的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">toString</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">first</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">last</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( person.<span class="title function_">toString</span>() ); <span class="comment">// displays &quot;John Dough&quot;  </span></span><br><span class="line"><span class="title function_">alert</span>( person ); <span class="comment">// alert函数将默认调用toString()函数  </span></span><br></pre></td></tr></table></figure>

<p>在这里我们用到了javascript中的<strong>prototype</strong>属性。所有的javascript对象都拥有一个prototype属性，javascript就是通过这个属性来实现继承关系的。具体的实现机制是这样的：</p>
<ol>
<li><strong>当你访问一个对象的属性时，编译器将先查找对象的属性看有没有匹配的。</strong>  </li>
<li><strong>如果没有找到，将继续查找这个对象的prototype属性所指的对象，看是否存在匹配的属性。</strong>  </li>
<li><strong>如果还是没有找到，编译器将检查当前对象的prototype是否拥有prototype属性，如果有将继续查找下去。</strong>  </li>
<li><strong>以此类推，直到查找完所有的prototype属性。</strong></li>
</ol>
<p>从这个过程不难看出，存在着一个类似于继承的访问链，可以把prototype对象指向我们要继承的父类，以此来访问父类的方法。</p>
<h2 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h2><p>我们新建一个类Employee来继承上面的Person类，并且新增一个属性id,在Employee的构造函数中只是初始化属性id，而父类中的属性将由Person的构造函数类设置：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last</span>) &#123;  </span><br><span class="line"><span class="keyword">if</span> ( <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> )  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>(first, last);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">first, last</span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first</span> = first;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last</span>  = last;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Employee</span>;  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property">superclass</span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Employee</span>(<span class="params">first, last, id</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> )  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>(first, last, id);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">first, last, id</span>) &#123;      </span><br><span class="line">    <span class="comment">// Call superclass method  </span></span><br><span class="line">    <span class="title class_">Employee</span>.<span class="property">superclass</span>.<span class="property">init</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, first, last);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// init properties  </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可以看到，我们把初始化属性的操作提取出来放到了一个init函数中，这样做是为了方便在子类中调用。注意其中的&quot;**Employee.superclass = Person.prototype;**&quot;，这里是一个技巧，方便下面在子类中调用父类的方法。</span></span><br><span class="line"><span class="string">另一个需要注意的地方是&quot;**Employee.superclass.init.call(this, first, last);**&quot;:对于所有对象中的方法来说，都可以通过两个方法来调用－－&quot;**call**&quot; 和 &quot;**apply**&quot;.  </span></span><br><span class="line"><span class="string">这里使用了**call**方法，其中第一个参数是将在调用的方法中访问的对象，后面的参数与调用方法的参数一致。</span></span><br><span class="line"><span class="string"> **apply**方法的使用与call大致一致，不同在于除了第一个参数外，后面是一个参数数组。  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">下面附上完整的例子和类图：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">继承关系图如下：  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![](http://www.blogjava.net/images/blogjava_net/zjun/8140/o_javascriptOOP.gif)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">代码：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Person constructor  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>   </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> )  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>(first, last);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Person init  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">first, last</span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first</span> = first;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last</span>  = last;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Person toString  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">first</span> + <span class="string">&quot;,&quot;</span> + <span class="variable language_">this</span>.<span class="property">last</span>;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Setup Employee inheritance  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Employee</span>;  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property">superclass</span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Employee constructor  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Employee</span>(<span class="params">first, last, id</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> )  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>(first, last, id);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Employee init  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">first, last, id</span>) &#123;      </span><br><span class="line">    <span class="comment">// Call superclass method  </span></span><br><span class="line">    <span class="title class_">Employee</span>.<span class="property">superclass</span>.<span class="property">init</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, first, last);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// init properties  </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Employee toString  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> name = <span class="title class_">Employee</span>.<span class="property">superclass</span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;:&quot;</span> + name;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Setup Manager inheritance  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Manager</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Employee</span>;  </span><br><span class="line"><span class="title class_">Manager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Manager</span>;  </span><br><span class="line"><span class="title class_">Manager</span>.<span class="property">superclass</span> = <span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Manager constructor  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Manager</span>(<span class="params">first, last, id, department</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> )  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>(first, last, id, department);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Manager init  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Manager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params">first, last, id, department</span>)&#123;  </span><br><span class="line">    <span class="comment">// Call superclass method  </span></span><br><span class="line">    <span class="title class_">Manager</span>.<span class="property">superclass</span>.<span class="property">init</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, first, last, id);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// init properties  </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">department</span> = department;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*****  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*    Manager toString  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*****/</span>  </span><br><span class="line"><span class="title class_">Manager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> employee = <span class="title class_">Manager</span>.<span class="property">superclass</span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> employee + <span class="string">&quot; manages &quot;</span> + <span class="variable language_">this</span>.<span class="property">department</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
